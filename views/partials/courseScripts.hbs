<script>

    var
        data = {}
    ;

    $(function() {
        var
            urlParts = location.pathname.split('/'),
            $prevLink = $('#prev-link'),
            $nextLink = $('#next-link'),
            $prevButton = $prevLink.find('button'),
            $nextButton = $nextLink.find('button'),
            prevId,
            nextId
        ;

        // TODO: Analyze this code, filter off some to subfunctions
        // And lower the complexity level as much as possible. This is
        // bound to be very buggy.


        // Code to add lightbox functionality to images using jQuery fancybox.
        $('a.fancy-image').fancybox({
            'transitionIn'	:	'elastic',
            'transitionOut'	:	'elastic',
            'speedIn'		:	600,
            'speedOut'		:	200,
            'overlayShow'	:	false
        });

        // Make sure our URL has a section ID
        if (urlParts[3] && urlParts[3] !== '__start') {
            var
                $selectedMenuLink = $('.sidebar-section').find('li[data-id="' + urlParts[3] + '"]'),
                $parentDrawer = $selectedMenuLink.closest('li.sidebar-drawer'),
                $previousMenuLink = $selectedMenuLink.prev(),
                $nextMenuLink = $selectedMenuLink.next()
            ;

            // If selected item is inside of a drawer, we need to
            // collapse the parent menu to ensure selected item is shown.
            if ($parentDrawer.length > 0) {
                $parentDrawer.addClass('sidebar-drawer--opened');
            }

            console.log($parentDrawer);

            // Use CSS to indicate the correct menu item that is currently
            // selected.
            $selectedMenuLink.addClass('selected');

            // If there is a previous link...
            if ($previousMenuLink.length > 0) {
                // If the previous link is a sidebar-drawer...
                if ($previousMenuLink.hasClass('sidebar-drawer')) {
                    // We want the previous link to be set to the last child of that set.
                    prevId = $previousMenuLink.find('ul > li:last').data('id');
                }
                // ...otherwise we set the previous link ID to be that of the next
                // sibling link.
                else {
                    prevId = $previousMenuLink.data('id');
                }
            }
            // Otherwise we set previous link to 0, which tells the code to
            // make a home button.
            else {
                prevId = 0;
            }

            // If there is a next link...
            if ($nextMenuLink.length > 0) {
                // If the next link is a sidebar-drawer with no top level element
                // then the data-empty attribute will be set to true.
                if ($nextMenuLink.data('empty')) {
                    // When this is the case, we want the next link to be
                    // set to the first child of that set.
                    nextId = $nextMenuLink.find('ul > li:first').data('id');
                }
                // ...otherwise we set the next link ID to be that of the next
                // sibling link.
                else {
                    nextId = $nextMenuLink.data('id');
                }

            }
            // Otherwise we set next to be 0, which tells the code to make
            // a home button.
            else {
                nextId = 0;
            }

            // If we're in a submenu and the first child is selected...
            if ($parentDrawer.length > 0 && $parentDrawer.data('empty') && $parentDrawer.find('ul li:first').hasClass('selected')) {
                var $lastSibling = $parentDrawer.prev();

                if ($lastSibling.length === 0) {
                    // We're already at the first element and there is
                    // no previous sibling to the parent. So we set the home
                    // button.
                    prevId = 0;
                }
                // Check out the parent's last sibling. If it has the sidebar-drawer
                // class, it's also a drawer...
                else if ($lastSibling.hasClass('sidebar-drawer')) {
                    // And then we want the ID of its last child to be our prevId
                    prevId = $lastSibling.find('ul li:last').data('id');
                }
                // If it's not a drawer, then we want to make its id our prevID
                else {
                    prevId = $lastSibling.data('id');
                }
            }
            // Unless the parentDrawer has top level data (marked by not having the empty
            // data attribute. In which case we just make the previous link the top level element.
            else if ($parentDrawer.length > 0 && $parentDrawer.find('ul li:first').hasClass('selected')) {
                prevId = $parentDrawer.data('id');
            }

            // If we're in a submenu and the last child is selected...
            if ($parentDrawer.length > 0 && $parentDrawer.find('ul li:last').hasClass('selected')) {
                var $nextSibling = $parentDrawer.next();

                // If there is no next sibling, then we just return 0
                // to generate a Home button.
                if ($nextSibling.length === 0) {
                    nextId = 0;
                }
                // Check out the parent's first sibling. If it has the sidebar-drawer
                // class, it's also a drawer, if it is empty, it will say so...
                else if ($nextSibling.hasClass('sidebar-drawer') && $nextSibling.data('empty')) {
                    // And then we want the ID of its first child to be our nextId
                    nextId = $nextSibling.find('ul li:first').data('id');
                }
                // If it's not an empty drawer, then we want to make its id our nextId
                else {
                    nextId = $nextSibling.data('id');
                }
            }

            // If selected link *is* the parent drawer...
            if ($selectedMenuLink.hasClass('sidebar-drawer') && !$selectedMenuLink.data('empty')) {
                // then we need to make our next link the first child.
                nextId = $selectedMenuLink.find('ul li:first').data('id');
            }

            // If previous link is marked with zero, we create a home button
            // that returns us to the splash screen.
            if (prevId === 0) {
                $prevButton.html('<span class="icon-home"></span> Home');
                $prevLink.attr('href', '/courses/' + urlParts[2]);
            }
            else {
                $prevLink.attr('href', '/courses/' + urlParts[2] + '/' + prevId);
            }

            // If next link is marked with zero, we create a home button
            // that returns us to the splash screen.
            if (nextId === 0) {
                $nextButton.html('Home <span class="icon-home"></span>');
                $nextLink.attr('href', '/courses/' + urlParts[2]);
            }
            else {
                $nextLink.attr('href', '/courses/' + urlParts[2] + '/' + nextId);
            }
        }
        // No course ID, so we're on initial load of the course.
        else {
            // Select the relevant item from the list.
            var
                $firstLink = $('.sidebar-section').find('li').first()
            ;

            // If the first link is an empty drawer...
            if ($firstLink.data('empty')) {
                var
                    $firstChild = $firstLink.find('ul li:first'),
                    $nextMenuLink = $firstChild.next()
                ;

                // Select first child
                $firstChild.addClass('selected');

                // Open the drawer so the child is visible
                $firstLink.addClass('sidebar-drawer--opened');

                // If there is no next link at this level, we grab the
                // next sibling of the parent.
                if ($nextMenuLink.length === 0) {
                    $nextMenuLink = $firstLink.next();
                }

                // If the next link is a sidebar-drawer with no top level element
                // then the data-empty attribute will be set to true.
                if ($nextMenuLink.data('empty')) {
                    // When this is the case, we want the next link to be
                    // set to the first child of that set.
                    nextId = $nextMenuLink.find('ul > li:first').data('id');
                }
                // ...otherwise we set the next link ID to be that of the next
                // sibling link.
                else {
                    nextId = $nextMenuLink.data('id');
                }
            }
            else {
                $firstLink.addClass('selected');

                // If the first link has a sidebar-drawer class, then it has children
                // and needs to display them.
                if ($firstLink.hasClass('sidebar-drawer')) {
                    $firstLink.addClass('sidebar-drawer--opened');
                    // If there are children, we also need for the next link
                    // to lead to the first child.
                    nextId = $firstLink.find('ul li:first').data('id');
                }
                // If there are no children, we set the next link to the next
                // list item.
                else {
                    nextId = $firstLink.next().data('id');
                }
            }

            // Configure location of next button.
            $nextLink.attr('href', '/courses/' + urlParts[2] + '/' + nextId);

            // Replace prev button with a home button.
            $prevButton.html('<span class="icon-home"></span> Home');
            $prevLink.attr('href', '/courses/' + urlParts[2]);
        }

        // Shows or hides the submenu when the drawer link is clicked.
        $('.sidebar-drawer').on('click', function(ev) {
            var
                $currentItem = $(this),
                // If the top level link has no data, then this is
                // collapsible. If it does, then we'll just initiate
                // the link to the appropriate page.
                collapsible = $currentItem.data('empty')
            ;

            // If the link is not collapsible, we just return true
            // to enable the link to operate as normal.
            if (!collapsible) {
                return true;
            }

            // The CSS will handle the exposure of submenu items and the styling
            // of the arrow indicators.
            if ($currentItem.hasClass('sidebar-drawer--opened')) {
                $currentItem.removeClass('sidebar-drawer--opened');
            }
            else {
                $currentItem.addClass('sidebar-drawer--opened');
            }
        });

        // Prevents clicks on the submenu from folding up the drawer
        // before redirecting.
        $('.sidebar-drawer ul').on('click', function(ev) {
            ev.stopPropagation();
            return true;
        });

        // Add a copy button to our code blocks so that people
        // can copy/paste the contents. We're adding it to the
        // Prism toolbar library to aid with placement, but Prism's
        // Clipboard plugin was buggy, so we're actually bypassing it.
        $('pre[class*="language-"]').each(function(index, target) {
            var toolbarString = '<div class="toolbar">' +
                                    '<div class="toolbar-item">' +
                                        '<button class="copy-button">Copy</button>' +
                                    '</div>' +
                                '</div>'
            ;

            $(toolbarString).appendTo(target);
        });


        // Our own clipboard.js implementation to copy code when
        // a copy button is pressed.
        $('.copy-button').each(function(index, button) {
            var clippy = new Clipboard(button, {
                target: function(trigger) {
                    return $(trigger).closest('pre').find('code')[0]
                }
            });

            clippy.on('success', function(ev) {
                var button = ev.trigger;

                // After the code block has been copied, we clear
                // the text selection that clipboard automatically performs
                // when it copies.
                ev.clearSelection();

                // And we temporarily change the button text to "Copied"
                button.textContent = 'Copied';

                // Then after 1.5s we switch it back to Copy.
                setTimeout(function () {
                    button.textContent = 'Copy';
                }, 1500);
            });

            // Error catching in case the copy functionality isn't working right.
            clippy.on('failure', function(ev) {
               alert('Clipboard error, please copy using ctrl + c instead.');
            });
        });

        $('a.toggle-menu').on('click', function(ev) {
            var
                $contentWrapper = $('#content-wrapper'),
                $sidebar = $('.sidebar'),
                $content = $('#content')
            ;

            // If the show-menu class is present already
            // when we toggle the menu, we will collapse
            // the sidebar...
            if ($contentWrapper.hasClass('show-menu')) {
                $contentWrapper.removeClass('show-menu');
                $content.addClass('col-md-10 col-md-offset-1');
                $sidebar.hide();

                // Let the server know to hide the sidebar.
                $.get('/sidebar/false');
            }
            // ...Otherwise we will show the sidebar
            else {
                $contentWrapper.addClass('show-menu');
                $content.removeClass('col-md-10 col-md-offset-1');
                $sidebar.show();

                // Let the server know to show the sidebar.
                $.get('/sidebar/true');
            }
        });
    });

</script>