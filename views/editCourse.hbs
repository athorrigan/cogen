<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Course Generator</title>

    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.6.0/themes/prism.min.css"/>
    <link rel="stylesheet" href="/css/jqtree.css">
    <link rel="stylesheet" href="/css/editor-styles.css">
</head>
<body class="edit-page">

<header class="header">
    <div class="header-bar container">
        <a href="http://ciscolive.com" class="header-bar__logo">
            <span class="icon-cisco"></span>
        </a>
        <div class="header-bar__main">
            <div class="header-heading">
                <h1 class="page-title">
                    {{courseName}}: {{courseBrief}}
                </h1>
            </div>
        </div>
            <a class="btn btn--icon"
               title="Course Variables"
               data-toggle="modal"
               data-target="#course_variables"
            >
                <span class="icon-info"></span>
            </a>
        </div>
    </div>
</header>

<div class="row course-data">
    <div class="section-label col-md-12">
        Course Details:
    </div>
    <div class="col-md-8 panel panel-default">
        <div class="col-md-12">
            <div class="content">
                <form id="courseData">
                    <div class="row">
                        <div class="form-group col-md-4">
                            <div class="form-group__text">
                                <input type="text" id="what" name="what" class="form-control" />
                                <label for="title">Title:</label>
                            </div>
                        </div>
                        <div class="form-group col-md-4">
                            <div class="form-group__text">
                                <input type="text" id="what" name="what" class="form-control" />
                                <label for="title">Title:</label>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="form-group col-md-4">
                            <div class="form-group__text">
                                <input type="text" id="what" name="what" class="form-control" />
                                <label for="title">Title:</label>
                            </div>
                        </div>
                        <div class="form-group col-md-4">
                            <div class="form-group__text">
                                <input type="text" id="what" name="what" class="form-control" />
                                <label for="title">Title:</label>
                            </div>
                        </div>
                    </div>
                    <div class="row save-button">
                        <div class="col-md-6">&nbsp;</div>
                            <div class="col-md-2">
                                <button type="button" class="btn btn-primary pull-right" onclick="saveData(true)">Save</button>
                            </div>
                        <div class="col-md-6">&nbsp;</div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="col-md-4 panel panel-default">
        <div class="col-md-12">
            <div class="content">
                <form id="courseVariables">
                    <div class="row">
                        <div class="form-group col-md-9">
                            <div class="">
                                <label class="control-label">A file upload button without icon</label>
                                <input type="file" class="filestyle" data-icon="false">
                            </div>
                        </div>
                        <div class="form-group col-md-9 instructions">
                            <div class="form-group__text">
                                <span>Upload a CSV file with student-to-variable mapping.</span>
                            </div>
                        </div>
                    </div>
                    <div class="row save-button">
                        <div class="col-md-6">&nbsp;</div>
                        <div class="col-md-2">
                            <button type="button" class="btn btn-primary pull-right" onclick="saveData(true)">Save</button>
                        </div>
                        <div class="col-md-6">&nbsp;</div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="row leading-data">
    <div class="section-label col-md-12">
        Course Structure:
    </div>
    <div class="col-md-12 panel panel-default">
        <div class="col-md-3">
            <div id="tree"></div>
        </div>
        <div class="col-md-9">
            <div class="content">
                <form id="nodeData">
                    <div class="row">
                        <div class="form-group col-md-4 col-md-offset-1">
                            <div class="form-group__text">
                                <input type="text" id="title" name="title" class="form-control" />
                                <label for="title">Title:</label>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-10 col-md-offset-1">
                            <textarea name="editor" id="editor" class="form-control">
                            </textarea>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-9">&nbsp;</div>
                            <div class="col-md-2">
                                <button type="button" class="btn btn-primary pull-right" onclick="saveData(true)">Save</button>
                            </div>
                        <div class="col-md-2">&nbsp;</div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<ul id="contextMenu" class="dropdown-menu">
    <li class="delete">
        <a href="#delete">
            <span class="icon-remove"></span>
            Delete
        </a>
    </li>
    <li class="divider"></li>
    <li class="add-before">
        <a href="#addBefore">
            <span class="icon-plus"></span>
            Add Sibling Before
        </a>
    </li>
    <li class="add-after">
        <a href="#addAfter">
            <span class="icon-plus"></span>
            Add Sibling After
        </a>
    </li>
    <li class="add-child">
        <a href="#addChild">
            <span class="icon-plus"></span>
            Add Child
        </a>
    </li>
</ul>


<script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.6.0/prism.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.6.0/components/prism-javascript.min.js"></script>
<script src="/js/js.cookie.js"></script>
<script src="/js/ckeditor/ckeditor.js"></script>
<script src="/js/tree.jquery.js"></script>
<script src="/js/jqTreeContextMenu.js"></script>
<script>

    var
            $tree = $('#tree'),
            $titleField = $('#title'),
            $nodeData = $('#nodeData'),
            data = {},
            currentNodeId = 0
    ;


    var saveData = function(edited) {
        var
                currentTitle = $titleField.val(),
                currentData = CKEDITOR.instances['editor'].getData(),
                currentNode = $tree.tree('getNodeById', currentNodeId)
        ;

        if (edited) {
            $tree.tree(
                    'updateNode',
                    currentNode,
                    {
                        name: currentTitle,
                        data: currentData
                    }
            );
        }

        data.courseData.children = JSON.parse($tree.tree('toJson'));

        $.post('/update-course', data)
                .fail(function(er) {
                    console.log('Failed');
                    console.log(er);
                })
        ;

    };

    var addNode = function(parentNode, newNode) {
        $tree.tree('appendNode', newNode, parentNode);
    };

    var addNodeBefore = function(siblingNode, newNode) {
        $tree.tree('addNodeBefore', newNode, siblingNode);
    };

    var addNodeAfter = function(siblingNode, newNode) {
        $tree.tree('addNodeAfter', newNode, siblingNode);
    };

    var collapseTree = function(tree) {
        tree.iterate(function(node, level) {
            if (node.hasChildren()) {
                $tree.tree("closeNode", node, true);
            }
            return true;
        });
    };

    var expandTree = function(tree) {
        tree.iterate(function(node, level) {
            if (node.hasChildren()) {
                $tree.tree("openNode", node, true);
            }
            return true;
        });
    };

    $(function() {

        var userData = "{{courseVars}}";
        console.log(userData);


        $.getJSON('/get-course/{{courseTitle}}', function(courseInfo) {
            data = courseInfo;

            $tree.tree({
                data: data.courseData.children,
                dragAndDrop: true,
                autoOpen: false
            });

            // Collapse tree since the autoOpen parameter is currently broken and the tree is always expanded
            // by default.
            collapseTree($tree.tree('getTree'));

            var contextMenuApi = $tree.jqTreeContextMenu(
                    $('#contextMenu'),
                    {
                        delete: function(node) {
                            $tree.tree('removeNode', node);
                            saveData(false);
                        },
                        addBefore: function(node) {
                            var newId = Math.floor((Math.random() * 1000000000000) + 1);
                            addNodeBefore(node, {
                                id: newId,
                                name: '[title]',
                                data: ''
                            });

                            var $newNode = $tree.tree('getNodeById', newId);
                            $tree.tree('selectNode', $newNode);
                        },
                        addAfter: function(node) {
                            var newId = Math.floor((Math.random() * 1000000000000) + 1);
                            addNodeAfter(node, {
                                id: newId,
                                name: '[title]',
                                data: ''
                            });

                            var $newNode = $tree.tree('getNodeById', newId);
                            $tree.tree('selectNode', $newNode);
                        },
                        addChild: function(node) {
                            var newId = Math.floor((Math.random() * 1000000000000) + 1);
                            addNode(node, {
                                id: newId,
                                name: '[title]',
                                data: ''
                            });

                            var $newNode = $tree.tree('getNodeById', newId);
                            $tree.tree('selectNode', $newNode);
                        }
                    }
            );

            var rootNode = $tree.tree(
                    'getNodeByCallback',
                    function(node) {
                        if (node.getLevel() === 1) {
                            return true;
                        }
                        else {
                            return false;
                        }
                    }
            );

            contextMenuApi.disable(rootNode.name, ['delete']);

            $tree.on('tree.select', function(event) {
                if (event.node) {
                    var node = event.node;

                    currentNodeId = node.id;
                    $titleField.val(node.name);
                    CKEDITOR.instances['editor'].setData(node.data);
                    $nodeData.show();

                }
                else {
                    currentNodeId = 0;
                    $titleField.val('');
                    CKEDITOR.instances['editor'].setData('');
                    $nodeData.hide();
                }
            });

            $tree.on('tree.move', function(event) {
                // For whatever reason this needs to be fired manually
                // before the internal tree is ready to be saved.
                event.move_info.do_move();

                saveData(false);
            });
        });

        CKEDITOR.config.customConfig = 'config.js';
        CKEDITOR.config.uploadUrl = '/upload_photo';
        CKEDITOR.replace('editor');

        var editor = CKEDITOR.instances['editor'];

        editor.on('fileUploadResponse', function(event) {
            var
                    url = JSON.parse(event.data.fileLoader.xhr.responseText).url,
                    imgHtml = CKEDITOR.dom.element.createFromHtml('<img src="' + url + '"/>');
            ;

            editor.insertElement(imgHtml);
        });

        // Allow for the copying of the variable name when a user clicks on the appropriate variable in the popup.
        var clipboard = new Clipboard('ul.variables > li.list-group-item', {
            text: function(trigger) {
                return '\{\{' + trigger.innerHTML + '\}\}';
            }
        });

        clipboard.on('success', function(e) {
            var
                triggeredItem = e.trigger,
                originalText = triggeredItem.innerHTML
            ;

            triggeredItem.innerHTML = originalText + ' <span class="element-copied">:: copied ::</span>';

            // Need to use a closure to capture the original variables so that we can set them back in a timeout. 
            function restoreText () {
                return function() {
                    triggeredItem.innerHTML = originalText;
                };
            }

            setTimeout(restoreText(), 1000);
        });
    });

</script>
<section id="modals">
    <div class="modal fade" id="course_variables" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button"
                            class="close"
                            data-dismiss="modal"
                            aria-label="Close"
                    >
                        <span>&times;</span>
                    </button>
                    <h3 class="modal-title">
                        Course Variables
                    </h3>
                </div>
                <div class="modal-body">
                    <div class="modal-image">
                        <div class="col-md-12">
                            <div class="panel-body">
                                <ul class="variables list-group col-md-12">
                                    {{#each courseVars}}
                                        <li class="list-group-item col-md-6">{{this}}</li>
                                    {{/each}}
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button"
                            class="btn btn-default dismiss"
                            data-dismiss="modal"
                    >
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
</section>
</body>
</html>