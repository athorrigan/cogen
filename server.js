'use strict';

const
    // Express is our web framework (mostly handles routing)
    express = require('express'),
    // Required to properly utilize HTTP data.
    bodyParser = require('body-parser'),
    // This is the express handlebars integration module
    // and will be used for standard template serving
    hbs = require('express-handlebars'),
    // This is the standalone version of Handlebars which we use
    // to parse template strings and substitute student data.
    Handlebars = require('handlebars'),
    // This maintains sessions for users.
    session = require('express-session'),
    // Redis session store
    RedisStore = require('connect-redis')(session),
    // Redis client
    redis = require('redis'),
    // Passport - used for user authentication.
    passport = require('passport'),
    // Passport local is a passport plugin that allows us to set a local strategy for user auth(as opposed to say oauth).
    LocalStrategy = require('passport-local').Strategy,
    // Library to facilitate image uploads
    multer = require('multer'),
    // Also need file system library for image uploads
    fs = require('fs'),
    // Random id for image names
    guid = require('guid'),
    // Finally need the path library for uploads
    path = require('path'),
    // CSV parsing library
    Baby = require('babyparse'),
    // Functional programming library
    _ = require('underscore'),
    // Connect-Flash allows us to use session stores to pass messages between pages.
    flash = require('connect-flash'),
    // Add mongoose for MongoDB support
    mongoose = require('mongoose'),
    // Encryption mechanism for our passwords
    bcrypt = require('bcrypt'),
    // Our API for handling course data.
    courseApi = require('./api/course_service.js')
;

let port = 8040;

if (process.env.NODE_ENV === 'production') {
    port = 80;
}

let app = express();

let upload = multer({ dest: 'public/uploads/' });

// Pass the bodyParser middleware to our application. Idiomatic
// CommonJS middleware uses a pattern where a function that
// returns a function is called to initialize middleware.
app.use(bodyParser.json({limit: '100mb'}));
app.use(bodyParser.urlencoded({
    limit: '100mb',
    extended: true
}));

// Setup the handlebars middleware.
app.engine('hbs', hbs({
    // The filename extension used by the engine.
    extname: 'hbs',
    // This is the core layout (found in views/layouts/main.hbs)
    // Handlebars uses composition rather than hierarchies. So
    // this file will layout the other components to load at runtime.
    defaultLayout: 'main',
    // The location of the main file above.
    layoutsDir: __dirname + '/views/layouts/'
}));

// Create a redis client to be used with the session store
const redisClient = redis.createClient();

// Setup the session middleware
app.use(session({
    // We're using Redis to store our sessions, a cookie will still be used to identify the Redis key.
    store: new RedisStore({
        url: 'localhost',
        port: 6379,
        client: redisClient
    }),
    // Pretty arbitrary, used for encryption and such
    secret: 'supercalifragilisticexpialidocious',
    // Resave will force a session write, even if the session wasn't modified by a request, we don't want this.
    resave: false,
    // saveUnitialized causes a new session to be saved even if it hasn't been modified yet. This can cause quite a few
    // issues, so we disallow it.
    saveUninitialized: false
}));

app.use(flash());

// Set our default template engine to be handlebars.
app.set('view engine', 'hbs');

/** Set up passport -- move this into an auth section in later versions **/
app.use(passport.initialize());
app.use(passport.session());

passport.serializeUser((user, done) => {
    done(null, user.username);
});

passport.deserializeUser((username, done) => {
    courseApi.findUser(username, done);
});

passport.use('login', new LocalStrategy(
    {
        passReqToCallback: true
    },
    (req, username, password, done) => {
        courseApi.findUser(username, (err, user) => {
            if (err) {
                return done(err);
            }

            if (!user) {
                console.log('User not found.');
                return done(null, false, req.flash('message', 'User not found.'));
            }

            bcrypt.compare(
                password,
                user.password,
                (err, isMatch) => {
                    if (!isMatch) {
                        return done(null, false, req.flash('message', 'Invalid password.'));
                    }
                    else {
                        return done(null, user);
                    }
                }
            );
        });
    }
));

// Middleware used to guard a route.
let isAuthenticated = () => {
    return (req, res, next) => {
        if(req.isAuthenticated()) {
            return next();
        }
        else {
            res.redirect('/');
        }
    };
};

//
// courseApi.createCourse(
//     {
//         "courseTitle": "LTRDCN 2223",
//         "courseSlug": "LTRDCN-2223: Implementing VXLAN in a Data Center",
//         "courseName": "LTRDCN-2223",
//         "splashTitle": "Implementing VXLAN in a Data Center",
//         "splashInstructions": "Choose your assigned pod number in the top right corner to continue",
//         "userNomenclature": "Pod",
//         pages: [
//             {
//                 "name": "Introduction to the VXLAN Lab",
//                 "id": "609132732681",
//                 "data": "",
//                 "path": "introduction-to-vxlan-lab-1",
//                 "is_open": "false",
//                 "pages": [
//                     {
//                         "name": "Welcome",
//                         "id": "276169343648",
//                         "data": "<h1>Introduction to the VXLAN Lab (LTRDCN-2223)</h1><p>Welcome to the VXLAN Lab (LTRDCN-2223) at Cisco Live!</p><p>The VXLAN Lab (LTRDCN-2223) is presented by:</p><div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>Name</th><th>Department</th><th>Role</th><th>Email</th></tr><tr><td>Kevin Cook</td><td>Advanced Services</td><td>Solutions Architect</td><td>kevincoo@cisco.com</td></tr><tr><td>Shyla Karimanye</td><td>Advanced Services</td><td>Network Consulting Engineer</td><td>skariman@cisco.com</td></tr><tr><td>Rahul Parameswaran</td><td>Insieme Marketing</td><td>Technical Marketing Engineer</td><td>rparames@cisco.com</td></tr></tbody></table></div><p>You have entered into the lab manual for <u><strong>pod {{spod}}</strong></u>. If this pod number does not match the pod number written on the pod assignment document given to you by one of the proctors, please <a href=\"../ltrdcn-2223\">click here</a> and choose the correct pod number.</p><p>To proceed to the next section of the lab, please click on the &quot;Next&quot; button on the bottom right corner of this page. To go back a page, click the &quot;Back&quot; button of the lower left corner of any page.</p>",
//                         "path": "welcome"
//                     },
//                     {
//                         "name": "Introduction",
//                         "id": "566028265849",
//                         "data": "<h1>Introduction to the VXLAN Lab (LTRDCN-2223)</h1><p>In the current datacenter, server virtualization has placed increased demands on the physical network, not only for large scale of IP/MAC but also for VM mobility across the network. In addition to this, each tenant now wants to have their own dedicated network where they can easily expand their VLANs anywhere in the network over the cloud. &nbsp;With the increased IP/MAC and VLAN scale, expanding layer 2 across multiple pods is also challenging in large datacenters. &nbsp;The challenges described above lead to the creation of a virtualized overlay network known as Virtual Extensible LAN (VXLAN) to carry IP traffic from individual hosts, in an encapsulated format, over a logical &quot;tunnel&quot;.</p><p>This lab session will demonstrate deploying VXLAN (Virtual Extensible LAN) in a data center using hardware VXLAN endpoints (VTEPs) with the Nexus 9000 series platform. This lab will be focused on multiple scenarios using the hardware VTEPs to help you implement the VXLAN solution in your network. The following topology, shown below, depicts the high level design that we cover in our lab. It should help you understand multiple solutions available for VXLAN and its use cases.</p><p>We will be using Nexus 9396s as hardware VTEPs and running code that includes BGP EVPN for VXLAN control plane learning and Ingress Replication for BUM (broadcast, unicast, multicast) Traffic. In addition, this lab will cover how to extend Layer 2 networks across two datacenters by using a Multipod VXLAN fabric.</p><p><img src=\"/uploads/2a40d260-78ed-a7c2-babc-75bbd4d46b52.png\" /></p>",
//                         "path": "introduction",
//                         "is_open": "true"
//                     }
//                 ]
//             },
//             {
//                 "name": "VXLAN Lab Use Cases",
//                 "id": "916348362510",
//                 "data": "",
//                 "path": "vxlan-lab-use-cases",
//                 "is_open": "false",
//                 "pages": [
//                     {
//                         "name": "Use Case 1",
//                         "id": "12884967931",
//                         "data": "<h1>Use Case 1</h1><h2>Datacenter 1 - Network Overlay (Hardware Based VTEPs) for VXLAN Bridging/Routing and Connecting to an Outside Network</h2><p><img src=\"/uploads/2a40d260-78ed-a7c2-babc-75bbd4d46b52.png\" /></p><p>In this use case, each tenant will extend their layer 2 network across a layer 3 underlay network using VXLAN. For example, a host that is part of pod A will be able to create a virtual layer 2 overlay network, using any hardware capable VTEPs (such as the Nexus 3100 or Nexus 9300), to a host in pod B as well as able to route between VXLANs. This example is illustrated in the figure above with orange lines. Host A can also be able to communicate with a host outside of the network (on the internet for example). This example is illustrated in the figure above with green lines.&nbsp;</p><p>In this use case, the student will be able to configure VXLAN in the following scenarios.</p><ol><li>Bridging a VXLAN across two pods - POD A and POD B</li><li>Routing a VXLAN across two pods using Anycast Gateways - POD A and POD B</li><li>Connecting the Datacenter to an Outside Network using VXLAN Routing</li></ol>",
//                         "path": "use-case-1",
//                         "is_open": "true"
//                     },
//                     {
//                         "name": "Use Case 2",
//                         "id": "859970263090",
//                         "data": "<h1>Use Case 2</h1><h2>Connecting the Datacenter to an Outside Network through a Firewall using VXLAN Routing</h2><p><img src=\"/uploads/2a40d260-78ed-a7c2-babc-75bbd4d46b52.png\" /></p><p>In this use case, we will be creating trusted and non-trusted zones and forcing traffic through the firewall. The firewall is this case is in transport mode.&nbsp;</p><p>As shown the diagram in the figure above, the black lines depict how the host on POD B will be able to ping the Internet host but, in this case, traffic is forced through the Transparent firewall.</p>",
//                         "path": "use-case-2"
//                     },
//                     {
//                         "name": "Use Case 3",
//                         "id": "991548459809",
//                         "data": "<h1>Use Case 3</h1><h2>VXLAN Multipod (Fabric)</h2><p><img src=\"/uploads/2a40d260-78ed-a7c2-babc-75bbd4d46b52.png\" /></p><div class=\"important-note\"><p><strong>This use case is optional.</strong></p></div><p>The VXLAN fabric can be extended between data centers by using VXLAN Multipod. VXLAN can be extended across a LAN or WAN. This approach treats multiple data center fabrics as one single large administrative domain, which simplifies the operational aspects of the deployment. It can be deployed between any pods, whether they&rsquo;re in the same room in the same physical data center or in separate data center locations.</p><p>Another way to extend the datacenter is to have separate fabrics with their own administrative domains. Then, data center interconnect (DCI) protocols such as OTV can be used to connect remote data centers. This lab only focuses on VXLAN multipod with a single administrator domain.</p><p>In this use case, we will extend one of the VLANs to the remote DC 2/POD 2 as shown using red lines in the figure above. &nbsp;A host in POD A in DC 1/POD 1 will be able to ping the host in POD A in DC 2/POD 1 . &nbsp;For simplicity purposes, we have one spine and one compute leaf in DC2. In this use case, a host that is attached to DC2 can not only be part of the same VLAN/VXLAN as is present in DC1, but it can also access any host in DC1 that are members of any other VXLAN/VLANs.</p>",
//                         "path": "use-case-3"
//                     },
//                     {
//                         "name": "Lab Flow",
//                         "id": "291482775935",
//                         "data": "<h1>Lab Flow</h1><p>Students will first work through use case 1 and then use case 2. At that point, students will need to decide if they want to do use case 3. There may not be enough time during the lab to do all three use cases. If students desire to do all three but do not have time, they can request access to the lab after the session is finished. To request access, either ask a proctor or email us using the contact information on the <a href=\"welcome\">welcome</a> page.</p>",
//                         "path": "lab-flow"
//                     }
//                 ]
//             },
//             {
//                 "name": "Lab Information",
//                 "id": "300022416068",
//                 "data": "",
//                 "path": "lab-information",
//                 "is_open": "false",
//                 "pages": [
//                     {
//                         "name": "Lab Prerequisites",
//                         "id": "935479112001",
//                         "data": "<h1>Lab&nbsp;Prerequisites</h1><ul><li>Familiarity with Cisco NX-OS</li><li>Knowledge of unicast routing and switching concepts</li><li>Knowledge of BGP EVPN Concepts</li></ul>",
//                         "path": "lab-prerequisites"
//                     },
//                     {
//                         "name": "Lab Manual",
//                         "id": "27529861992",
//                         "data": "<style type=\"text/css\">ol.step {\n    counter-reset: step;\n    margin-left: 3em;\n}\n\nli.step {\n    display: block;\n}\n\nli.step::before {\n    display: inline-block;\n    content: \"Step \"counter(step) \":\";\n    counter-increment: step;\n    width: 4.3em;\n    margin-left: -4.3em;\n    font-weight: bold;\n}\n\npre.configsample {\n    background-color: rgba(255, 255, 255, 0.0);\n    color: #000;\n}\n\npre>strong {\n    color: rgba(0, 188, 235, 0.8);\n}\n\nspan.snip {\n    background-color: rgba(240, 76, 55, 0.7);\n}\n\nspan.highlight {\n    background-color: rgba(110, 190, 74, 0.4);\n}\n\nspan.arrow {\n    color: rgba(251, 171, 24, 1);\n    font-weight: bold;\n}</style><h1>Lab Manual</h1><p>There are several types of content in this manual. The following section is intended to show you how to use the manual.</p><p>Anything shown under a &ldquo;Configuration sample&rdquo; heading is not meant to be executed by the user. It is simply showing the configuration that was used to preconfigure that particular part of the lab. For example:</p><p><strong>Configuration sample:</strong></p><pre class=\"configsample\">VXLAN-L11(config)# feature vn-segment-vlan-based\nVXLAN-L11(config)# feature nv overlay\nVXLAN-L11(config)# feature interface-vlan</pre><p>Anything shown in a grey box is meant to be executed by the user. For example:</p><pre>VXLAN-L13(config)# <strong>evpn</strong>\nVXLAN-L13(config-evpn)# <strong>vni 42{{spod}}52 l2</strong>\nVXLAN-L13(config-evpn-evi)# <strong>rd auto</strong>\nVXLAN-L13(config-evpn-evi)# <strong>route-target import 2:42{{spod}}52</strong>\nVXLAN-L13(config-evpn-evi)# <strong>route-target export 2:42{{spod}}52</strong>\n\nVXLAN-L13(config)# <strong>show run interface vlan {{spod}}52</strong>\n\n!Command: show running-config interface Vlan{{spod}}52\n!Time: Sun May 10 00:47:53 2015\n\nversion 7.0(3)I1(3)\n\ninterface Vlan{{spod}}52 <span class=\"arrow\">&larr; Anycast SVI</span>\n  no shutdown\n  vrf member POD{{spod}}\n  ip address 10.{{spod}}.52.1/24\n  <span class=\"highlight\">fabric forwarding mode anycast-gateway</span>\n<span class=\"snip\">&lt;SNIP&gt;</span></pre><p>In the box above, you will notice 4 different colors:</p><ul><li><strong style=\"color: steelblue;\">Blue</strong> text: This shows which commands students should execute on the NXOS command line.</li><li><span class=\"arrow\">Gold</span> text: Gives more details about console output text.</li><li><span style=\"color: #fff; background-color: rgba(110,190,74,0.8);\">Green</span> highlight: This signifies something that we&rsquo;re calling out attention to. Usually, the green highlighting is showing you what you just configured in a show command output.</li><li><span style=\"color: #fff; background-color: rgba(240,76,55,0.9);\">Red</span> highlight: This shows where some output was removed for brevity.</li></ul>",
//                         "path": "lab-manual"
//                     },
//                     {
//                         "name": "Lab Topology",
//                         "id": "405564792197",
//                         "data": "<h1>Lab Topology</h1><p>The full physical lab topology is shown below.</p><p><img src=\"/uploads/104733fc-ae6b-63fa-8ab3-79c4a7b4717b.png\" /></p><p>If the topology above is too small on your screen, you can view a larger version by <a target=\"_blank\" href=\"/uploads/d23bf191-b27b-121a-f92f-30f4d18f2bcc.png\">clicking here.</a> To download a larger version so you can zoom in using a photo viewer, <a download=\"LTRDCN-2223_Physical_Topology-Large\" href=\"/uploads/d23bf191-b27b-121a-f92f-30f4d18f2bcc.png\">click here.</a></p>",
//                         "path": "lab-topology"
//                     },
//                     {
//                         "name": "Lab Layout",
//                         "id": "493501743198",
//                         "data": "<h1>Lab Layout</h1><h2>Hardware VXLAN Layout</h2><h3>Datacenter 1 / Pod&nbsp;1</h3><ul><li>OSPF area 0.0.0.0 is running throughout Datacenter 1 as the underlay protocol</li><li>IBGP is configured for the overlay protocol. BGP EVPN is also used. BGP route reflectors are configured on the spine Nexus 9000s in Datacenter 1</li><li>IBGP is configured on the Nexus 9300 leaf switches for BGP EVPN. This provides a path for VXLAN control plane traffic. Ingress replication is used for BUM (Broadcast, Unknown Unicast and Multicast) traffic.</li><li>Each Nexus 9300 switch will be configured as hardware VXLAN end point (VTEP). &nbsp;</li><li>Each Nexus 9300 switch will be configured with VLANs connecting to ESX hosts for VM traffic.</li><li>A firewall is connected to one of the Nexus 9300 edge switches.</li></ul><h3>Datacenter 2 / Pod 2</h3><ul><li>EBGP is configured as the underlay protocol in Datacenter 2.</li><li>&ldquo;next hop unchanged&rdquo; and &ldquo;retain route targets&rdquo; are configured to extend the EVPN routes.</li><li>Ingress replication is used for BUM (Broadcast, Unknown Unicast and Multicast) traffic.</li></ul><div class=\"note\"><p>To help student&rsquo;s understanding of the implementation of VXLAN, we are keeping the lab design simple to keep our focus on the configuration and troubleshooting of VXLAN.</p></div>",
//                         "path": "lab-layout"
//                     },
//                     {
//                         "name": "Lab Pods",
//                         "id": "230815154035",
//                         "data": "<h1>Lab Pods</h1><p>Each participant will be assigned one pod. Your pod is pod {{spod}}.</p><p>Each pod consists of (refer to the figure on the <a href=\"lab-topology\">Lab Topology</a> pages for Pod A/B/C definitions):</p><h2>Hardware Based VXLAN</h2><ul><li>One Linux Virtual Machine (VM) on Leaf Pod A designated as Ubuntu-VX (your pod&#39;s is Ubuntu-V{{spod}})</li><li>One Linux Virtual Machine (VM) on Leaf Pod B for Bridging designated as Ubuntu-D</li><li>One Linux Virtual Machine (VM) on Leaf Pod B for Routing designated as Ubuntu-R</li><li>One Linux Virtual Machine (VM) on Leaf Pod B for Routing with a Firewall designated as Ubuntu-FWX (your pod&#39;s is Ubuntu-FW{{spod}})</li><li>One Linux Virtual Machine (VM) on Leaf Pod C for Bridging and Routing in the VXLAN Multipod fabric designated as Ubuntu-SX (your pod&#39;s is Ubuntu-S{{spod}})</li><li>One Linux Virtual Machine (VM) on the Internet/Outside designated as Ubuntu-I</li></ul>",
//                         "path": "lab-pods"
//                     }
//                 ]
//             },
//             {
//                 "name": "Access to the Lab",
//                 "id": "278138278926",
//                 "data": "<style type=\"text/css\">ol.step {\n    counter-reset: step;\n    margin-left: 3em;\n}\n\nli.step {\n    display: block;\n}\n\nli.step::before {\n    display: inline-block;\n    content: \"Step \"counter(step) \":\";\n    counter-increment: step;\n    width: 4.3em;\n    margin-left: -4.3em;\n    font-weight: bold;\n}</style><h1>Access to the Lab</h1><ol class=\"step\"><li class=\"step\">Open Remote Desktop Connection from your computer</li><li class=\"step\">For the Computer name field, enter: vxlanlab.ciscolive.com:3390<p><img style=\"max-width:400px;\" src=\"/uploads/e1ab35cf-995d-a60d-8d53-e30c32fdeb24.png\" /></p></li><li class=\"step\">Enter the appropriate username and password as shown below, and click OK. The username is based on your pod number.<div class=\"note\">The domain is vxlan and should be entered with the username as shown below.</div><div class=\"note\">In the screenshot below, pod 2 is used as an example. Change &ldquo;pod2user&rdquo; to your pod&#39;s username (&quot;pod{{spod}}user&quot;).</div><div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>Device</th><th>Username</th><th>Password</th></tr><tr><td>Remote Desktop</td><td>vxlan\\pod{{spod}}user</td><td>Given by proctor</td></tr></tbody></table></div><p><img style=\"max-width:400px;\" src=\"/uploads/2ab21f89-53eb-e64a-80bd-06db66dc0a3b.png\" /></p></li><li class=\"step\">If presented with a security warning click YES to accept the security certificate identity.</li><li class=\"step\">After the login is complete, open a PuTTY connection by double-clicking on the puttycm icon on the desktop.<p><img style=\"max-width:100px;\" src=\"/uploads/3b947cbe-c2d0-6c2d-ef72-405796ef7c6c.png\" /></p></li><li class=\"step\">In the Putty Connection Manager application, double-click on your switches to launch the appropriate SSH sessions. Putty should automatically log you into each switch/VM. If it does not login, credentials are shown below:<div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>Device</th><th>Username</th><th>Password</th></tr><tr><td>Switches</td><td>pod{{spod}}user</td><td>Given by proctor</td></tr><tr><td>Virtual Machines</td><td>vxlan\\pod{{spod}}user</td><td>Given by proctor</td></tr></tbody></table></div><div class=\"note\">In the screenshot below, pod 2 is used as an example. You should see devices relevant to your pod (pod {{spod}}).</div><p>After you log in and launch PuttyCM, you should see the following list of devices:</p><p><img style=\"max-width:250px;\" src=\"/uploads/ea05685d-a7c0-b412-b879-1bca60a16aec.png\" /></p></li></ol>",
//                 "path": "access-to-the-lab",
//                 "is_open": "true"
//             },
//             {
//                 "name": "Use Case 1",
//                 "id": "832685939544",
//                 "data": "",
//                 "path": "use-case-1-instructions",
//                 "is_open": "true",
//                 "pages": [
//                     {
//                         "name": "Introduction",
//                         "id": "301178780102",
//                         "data": "<h1>Use Case 1</h1><h2>Datacenter 1 - Network Overlay (Hardware Based VTEPs) for VXLAN Bridging/Routing and Connecting to an Outside Network</h2><p>The hardware based VXLAN solution in this lab is configured on shared Nexus 9300 switches (two in a VPC pair in Leaf Pod A), a single leaf in Leaf Pod B, and a pair of Border Leaf and Edge Routers for external Connectivity. &nbsp;Each Nexus 9300 switch in Leaf Pod A and B is connected to end devices (VMs) on classic VLAN segments. All Nexus 9300 switches are connected over a layer 3 ECMP network via Nexus 9000 spine switches. &nbsp;Each Nexus 9300 switch will be configured as a VXLAN gateway, as well as a VXLAN router, and will connect the VLAN and VXLAN segments. In addition, the Border Leafs will be configured to allow communication with a device outside of the Datacenter (in the simulated &ldquo;internet&rdquo;).</p><p>In this lab, IBGP is configured to provide BGP EVPN for VXLAN control plane packets. &nbsp;Instead of using multicast, we will be using ingress replication for the BUM (broadcast, unknown unicast, multicast) traffic.</p><p>The hardware based VXLAN routing/bridging solution lab is setup based on the following network topology (this is an excerpt of the master physical topology shown earlier &ndash; only a portion of datacenter 1 is included):</p><p><img src=\"/uploads/35ada9a8-15a9-67e3-1710-5218036b9e79.png\" /></p><p>The hardware based external VXLAN solution lab (a host in the datacenter communicating with a host outside of the datacenter [on the internet, for example]) is setup based on the following network topology (this is an excerpt of the master physical topology shown earlier &ndash; only datacenter 1 and the external/firewall portion is included):</p><p><img src=\"/uploads/1fc3c588-bd2c-1597-efe9-f25774563026.png\" /></p>",
//                         "path": "use-case-1-introduction"
//                     },
//                     {
//                         "name": "Base Network Configuration Verification",
//                         "id": "100302167080",
//                         "data": "<style type=\"text/css\">ol.step {\n    counter-reset: step;\n    margin-left: 3em;\n}\n\nli.step {\n    display: block;\n}\n\nli.step::before {\n    display: inline-block;\n    content: \"Step \"counter(step) \":\";\n    counter-increment: step;\n    width: 4.3em;\n    margin-left: -4.3em;\n    font-weight: bold;\n}\n\npre.configsample {\n    background-color: rgba(255, 255, 255, 0.0);\n    color: #000;\n}\n\npre>strong {\n    color: rgba(0, 188, 235, 0.8);\n}\n\nspan.snip {\n    background-color: rgba(240, 76, 55, 0.7);\n}\n\nspan.highlight {\n    background-color: rgba(110, 190, 74, 0.4);\n}\n\nspan.arrow {\n    color: rgba(251, 171, 24, 1);\n    font-weight: bold;\n}</style><h1>Use Case 1</h1><h2>Base Network Configuration Verification</h2><div class=\"note\">All users are sharing hardware. Each switch can support only a single VTEP at this point. The underlay network is preconfigured but you will be able to verify the configuration of the entire underlay network before configuring VXLAN.</div><p>In this lab setup, the underlay network is pre-configured between the Nexus 9300 leaf switches and the Nexus 9300 spine switches. &nbsp;Prior to configuring the VXLAN components we will run basic verification of the OSPF underlay and BGP configurations.</p><h3>Verify Network Configuration</h3><p>The following section lists the preconfigured parts of the network we will verify to make sure the network is ready for VXLAN deployment.</p><ol><li>Verify OSPF is configured as the underlay protocol.</li><li>Verify BGP is configured with Route Reflectors on the Spines. BGP will be used for VXLAN control plane.</li><li>Verify the VPC configuration on L11 and L12. Verify VPC is up by verifying the VPC peer link is up and the VPC port-channels are up.</li></ol><h3>Verify the Underlay Network</h3><p>Follow the following steps to verify OSPF is configured correctly in the underlay and BGP is enabled as the overlay in the network. We will use leaf L11 and spine S11 for verification but the rest of the leafs are configured identically.</p><div class=\"important-note\">Only execute commands shown in the boxes below. Any commands shown under &ldquo;Configuration Sample&rdquo; are just an example. They are not meant to be executed.</div><ol class=\"step\"><li class=\"step\">Enable OSPF in the network. All of the leaf and edge switches are part of area 0.0.0.0.<p><strong>Configuration sample:</strong></p><pre class=\"configsample\">VXLAN-L11(config)# feature ospf\nVXLAN-L11(config)# router ospf 1\nVXLAN-L11(config-router)# router-id 100.1.1.2\nVXLAN-L11(config-router)# exit\nVXLAN-L11(config)# interface ethernet 2/1\nVXLAN-L11(config-if)# ip router ospf 1 area 0.0.0.0\nVXLAN-L11(config-if)# interface ethernet 2/2\nVXLAN-L11(config-if)# ip router ospf 1 area 0.0.0.0 \nVXLAN-L11(config-if)# interface loopback 0\nVXLAN-L11(config-if)# ip router ospf 1 area 0.0.0.0\nVXLAN-L11(config-if)# interface loopback 1\nVXLAN-L11(config-if)# ip router ospf 1 area 0.0.0.0\nVXLAN-L11(config-if)# interface loopback 3\nVXLAN-L11(config-if)# ip router ospf 1 area 0.0.0.0</pre></li><li class=\"step\">Verify OSPF is enabled in the network.<pre>VXLAN-L11# <strong>show run ospf</strong>\n\n!Command: show running-config ospf\n!Time: Sat May  9 23:23:15 2015\n\nversion 7.0(3)I1(3)\n<span class=\"highlight\">feature ospf</span>\n\n<span class=\"highlight\">router ospf 1</span>\n  router-id 100.1.1.2\n\ninterface loopback0\n  ip router ospf 1 area 0.0.0.0\n\ninterface loopback1\n  ip router ospf 1 area 0.0.0.0\n\ninterface loopback3\n  ip router ospf 1 area 0.0.0.0\n\ninterface Ethernet2/1\n  ip router ospf 1 area 0.0.0.0\n\ninterface Ethernet2/2\n  ip router ospf 1 area 0.0.0.0</pre><pre>VXLAN-S11# <strong>show run ospf</strong>\n\n!Command: show running-config ospf\n!Time: Sat May  9 23:23:56 2015\n\nversion 7.0(3)I1(3)\n<span class=\"highlight\">feature ospf</span>\n\n<span class=\"highlight\">router ospf 1</span>\n  router-id 201.1.1.1\n\ninterface loopback3\n  ip router ospf 1 area 0.0.0.0\n\ninterface loopback4\n  ip router ospf 1 area 0.0.0.0\n\ninterface Ethernet2/1\n  ip router ospf 1 area 0.0.0.0\n\ninterface Ethernet2/2\n  ip router ospf 1 area 0.0.0.0\n\ninterface Ethernet2/3\n  ip router ospf 1 area 0.0.0.0\n\ninterface Ethernet2/4\n  ip router ospf 1 area 0.0.0.0\n\ninterface Ethernet2/5\n  ip router ospf 1 area 0.0.0.0\n\ninterface Ethernet2/6\n  ip router ospf 1 area 0.0.0.0</pre></li><li class=\"step\">Verify IBGP on each leaf. IBGP will be used to exchange new MAC addresses learned on each leaf to all of the other leafs. A neighbor statement must be added for each leaf in the topology and L2VPN EVPN must be enabled for each neighbor. In addition, a source interface of loopback3 is used to keep the IP schema consistent. The current lab design uses spine switches S11 and S12 as route reflectors to avoid having a full mesh IBGP peering.<p><strong>Configuration sample:</strong></p><pre class=\"configsample\">VXLAN-L11(config)# router bgp 100\nVXLAN-L11(config-router)# address-family ipv4 unicast\nVXLAN-L11(config-router-af)# network 101.1.1.1/32\nVXLAN-L11(config-router-af)# neighbor 200.200.200.2 remote-as 100\nVXLAN-L11(config-router-neighbor)# update-source loopback 3\nVXLAN-L11(config-router-neighbor)# address-family ipv4 unicast\nVXLAN-L11(config-router-neighbor-af)# send-community both\nVXLAN-L11(config-router-neighbor-af)# address-family l2vpn evpn\nVXLAN-L11(config-router-neighbor-af)# send-community both\nVXLAN-L11(config-router-neighbor-af)# neighbor 200.200.200.3 remote-as 100\nVXLAN-L11(config-router-neighbor)# update-source loopback 3\nVXLAN-L11(config-router-neighbor)# address-family ipv4 unicast\nVXLAN-L11(config-router-neighbor-af)# send-community both\nVXLAN-L11(config-router-neighbor-af)# address-family l2vpn evpn\nVXLAN-L11(config-router-neighbor-af)# send-community both</pre><div class=\"note\">The two IBGP neighbors are spine switches S11 and S12 configured as Route Reflectors with loopback IPs 200.200.200.2 and 200.200.200.3, respectively.</div><pre>VXLAN-L11# <strong>show run bgp</strong>\n\n!Command: show running-config bgp\n!Time: Fri May  8 14:20:00 2015\n\nversion 7.0(3)I1(3)\nfeature bgp\n\nrouter bgp 100\n  address-family ipv4 unicast\n    network 101.1.1.1/32\n  <span class=\"highlight\">neighbor 200.200.200.2 remote-as 100</span>\n    update-source loopback3\n    address-family ipv4 unicast\n      send-community both\n    <span class=\"highlight\">address-family l2vpn evpn</span>\n      send-community both\n  <span class=\"highlight\">neighbor 200.200.200.3 remote-as 100</span>\n    update-source loopback3\n    address-family ipv4 unicast\n      send-community both\n    <span class=\"highlight\">address-family l2vpn evpn</span>\n      send-community both</pre><pre>VXLAN-S11# <strong>show run bgp</strong>\n\n!Command: show running-config bgp\n!Time: Fri May  8 14:57:41 2015\n\nversion 7.0(3)I1(3)\nfeature bgp\n\nrouter bgp 100\n  cluster-id 1000\n  address-family ipv4 unicast\n  template peer <span class=\"highlight\">OVERLAY</span>\n    remote-as 100\n    update-source loopback4\n    <span class=\"highlight\">address-family ipv4 unicast</span>\n      send-community both\n      <span class=\"highlight\">route-reflector-client</span>\n      soft-reconfiguration inbound always\n    <span class=\"highlight\">address-family l2vpn evpn</span>\n      send-community both\n      <span class=\"highlight\">route-reflector-client</span>\n  neighbor 101.1.1.3\n    inherit peer <span class=\"highlight\">OVERLAY</span>\n  neighbor 102.1.1.3\n    inherit peer <span class=\"highlight\">OVERLAY</span>\n  neighbor 103.1.1.3\n    inherit peer <span class=\"highlight\">OVERLAY</span>\n  neighbor 104.1.1.3\n    inherit peer <span class=\"highlight\">OVERLAY</span>\n  neighbor 105.1.1.3\n    inherit peer <span class=\"highlight\">OVERLAY</span>\n</pre><pre>VXLAN-S12# <strong>show run bgp</strong>\n\n!Command: show running-config bgp\n!Time: Fri May  8 15:04:52 2015\n\nversion 7.0(3)I1(3)\nfeature bgp\n\nrouter bgp 100\n  cluster-id 1000\n  address-family ipv4 unicast\n  template peer <span class=\"highlight\">OVERLAY</span>\n    remote-as 100\n    update-source loopback4\n    <span class=\"highlight\">address-family ipv4 unicast</span>\n      send-community both\n      <span class=\"highlight\">route-reflector-client</span>\n      soft-reconfiguration inbound always\n    <span class=\"highlight\">address-family l2vpn evpn</span>\n      send-community both\n      <span class=\"highlight\">route-reflector-client</span>\n  neighbor 101.1.1.3\n    inherit peer <span class=\"highlight\">OVERLAY</span>\n  neighbor 102.1.1.3\n    inherit peer <span class=\"highlight\">OVERLAY</span>\n  neighbor 103.1.1.3\n    inherit peer <span class=\"highlight\">OVERLAY</span>\n  neighbor 104.1.1.3\n    inherit peer <span class=\"highlight\">OVERLAY</span>\n  neighbor 105.1.1.3\n    inherit peer <span class=\"highlight\">OVERLAY</span>\n</pre></li><li class=\"step\">If you would like, verify the BGP and OSPF configurations on rest of the switches.</li></ol><h3>Verify VPC Configuration</h3><p>Leaf L11 and Leaf L12 are setup in a VPC pair to provide redundancy. Prior to configuring the VXLAN components, we will run basic verification of the VPC configuration.</p><div class=\"important-note\">Only execute commands shown in the boxes below. Any commands shown under &ldquo;Configuration Sample&rdquo; are just an example. They are not meant to be executed.</div><p>This section will verify the VPC setup between Leaf L11 and Leaf L12.</p><div class=\"note\">When using VXLAN in a VPC environment, VPC peers must have identical VXLAN configuration.</div><ol class=\"step\"><li class=\"step\">Verify the peer keep-alive is up on both switches and verify that the neighbor&rsquo;s management address is that of the proper switch (Leaf L11 IP address is 192.168.11.21 and Leaf L12 IP address is 192.168.11.22).<pre>VXLAN-L11# <strong>show vpc peer-keepalive</strong>\n\nvPC keep-alive status           : <span class=\"highlight\">peer is alive</span>\n--Peer is alive for             : (14122) seconds, (4) msec\n--Send status                   : Success\n--Last send at                  : 2015.05.08 02:16:54 975 ms\n--Sent on interface             : mgmt0\n--Receive status                : Success\n--Last receive at               : 2015.05.08 02:16:54 975 ms\n--Received on interface         : mgmt0\n--Last update from peer         : (0) seconds, (422) msec\n\nvPC Keep-alive parameters\n--Destination                   : <span class=\"highlight\">192.168.11.22</span>\n--Keepalive interval            : 1000 msec\n--Keepalive timeout             : 5 seconds\n--Keepalive hold timeout        : 3 seconds\n--Keepalive vrf                 : management\n--Keepalive udp port            : 3200\n--Keepalive tos                 : 192</pre><pre>VXLAN-L12# <strong>show vpc peer-keepalive</strong>\n\nvPC keep-alive status           : <span class=\"highlight\">peer is alive</span>\n--Peer is alive for             : (14237) seconds, (407) msec\n--Send status                   : Success\n--Last send at                  : 2015.05.08 02:23:49 228 ms\n--Sent on interface             : mgmt0\n--Receive status                : Success\n--Last receive at               : 2015.05.08 02:23:49 228 ms\n--Received on interface         : mgmt0\n--Last update from peer         : (0) seconds, (250) msec\n\nvPC Keep-alive parameters\n--Destination                   : <span class=\"highlight\">192.168.11.21</span>\n--Keepalive interval            : 1000 msec\n--Keepalive timeout             : 5 seconds\n--Keepalive hold timeout        : 3 seconds\n--Keepalive vrf                 : management\n--Keepalive udp port            : 3200\n--Keepalive tos                 : 192</pre></li><li class=\"step\">Verify that the VPC is up. Also verify that peer-link and the VPC&rsquo;s are up and allow the lab VLANs (X00 and X51 on the peer-link and X51 on the VPCs).<pre>VXLAN-L11# <strong>show vpc brief</strong>\nLegend:\n                (*) - local vPC is down, forwarding via vPC peer-link\n\nvPC domain id                     : 1\nPeer status                       : peer adjacency formed ok\nvPC keep-alive status             : peer is alive\nConfiguration consistency status  : success\nPer-vlan consistency status       : success\nType-2 consistency status         : success\nvPC role                          : primary\nNumber of vPCs configured         : 2\nPeer Gateway                      : Enabled\nDual-active excluded VLANs        : -\nGraceful Consistency Check        : Enabled\nAuto-recovery status              : Disabled\n\nvPC Peer-link status\n---------------------------------------------------------------------\nid   Port   Status Active vlans\n--   ----   ------ --------------------------------------------------\n1    Po1    <span class=\"highlight\">up</span>     <span class=\"snip\">&lt;SNIP&gt;</span>\n\nvPC status\n----------------------------------------------------------------------\nid   Port   Status Consistency Reason                     Active vlans\n--   ----   ------ ----------- ------                     ------------\n11   Po11   <span class=\"highlight\">up</span>     success     success                    <span class=\"snip\">&lt;SNIP&gt;</span>\n12   Po12   <span class=\"highlight\">up</span>     success     success                    <span class=\"snip\">&lt;SNIP&gt;</span></pre><pre>VXLAN-L12# <strong>show vpc brief</strong>\nLegend:\n                (*) - local vPC is down, forwarding via vPC peer-link\n\nvPC domain id                     : 1\nPeer status                       : peer adjacency formed ok\nvPC keep-alive status             : peer is alive\nConfiguration consistency status  : success\nPer-vlan consistency status       : success\nType-2 consistency status         : success\nvPC role                          : primary\nNumber of vPCs configured         : 2\nPeer Gateway                      : Enabled\nDual-active excluded VLANs        : -\nGraceful Consistency Check        : Enabled\nAuto-recovery status              : Disabled\n\nvPC Peer-link status\n---------------------------------------------------------------------\nid   Port   Status Active vlans\n--   ----   ------ --------------------------------------------------\n1    Po1    <span class=\"highlight\">up</span>     <span class=\"snip\">&lt;SNIP&gt;</span>\n\nvPC status\n----------------------------------------------------------------------\nid   Port   Status Consistency Reason                     Active vlans\n--   ----   ------ ----------- ------                     ------------\n11   Po11   <span class=\"highlight\">up</span>     success     success                    <span class=\"snip\">&lt;SNIP&gt;</span>\n12   Po12   <span class=\"highlight\">up</span>     success     success                    <span class=\"snip\">&lt;SNIP&gt;</span></pre><div class=\"note\">You might notice VPC inconsistency in the VPC output, ignore this at this point. Also there will be other students who might be on different speed or different part of the lab using their VLANs and can caused these messages.</div></li></ol>",
//                         "path": "use-case-1-base-network-configuration-verification"
//                     },
//                     {
//                         "name": "Nexus 9300 VXLAN Configuration",
//                         "id": "173234894000",
//                         "data": "<style type=\"text/css\">ol.step {\n    counter-reset: step;\n    margin-left: 3em;\n}\n\nli.step {\n    display: block;\n}\n\nli.step::before {\n    display: inline-block;\n    content: \"Step \"counter(step) \":\";\n    counter-increment: step;\n    width: 4.3em;\n    margin-left: -4.3em;\n    font-weight: bold;\n}\n\npre.configsample {\n    background-color: rgba(255, 255, 255, 0.0);\n    color: #000;\n}\n\npre>strong {\n    color: rgba(0, 188, 235, 0.8);\n}\n\nspan.snip {\n    background-color: rgba(240, 76, 55, 0.7);\n}\n\nspan.highlight {\n    background-color: rgba(110, 190, 74, 0.4);\n}\n\nspan.arrow {\n    color: rgba(251, 171, 24, 1);\n    font-weight: bold;\n}</style><h1>Use Case 1</h1><h2>Nexus 9300 VXLAN Configuration</h2><p>VXLAN configuration involves creating the hardware VTEP, mapping VLANs to VXLAN VNIDs, and configuring the VNIDs for ingress replication for broadcast, unknown unicast, and multicast traffic. In the following sections, we will:</p><div class=\"note\"><p>Since the Nexus 9000s supports a single VTEP, the VTEP will be preconfigured in this lab. Participants will verify the preconfigured VTEP configuration and then add VLAN to VXLAN mappings for their pod.</p></div><ol><li>Verify VXLAN features are enabled on the switches.</li><li>Verify the loopback 0 interface is configured. This will be source or destination IP address of the VXLAN tunnel. It has OSPF and multicast running to make sure it is reachable across the network.</li><li>Verify the VTEP interface (NVE [Network Virtualization Endpoint] interface) has been configured.</li><li>Verify the VTEP is configured to use the loopback 0 interface as the VTEP source interface.</li><li>Configure POD VRF.</li><li>Configure POD VLANs:<ul><li>VLAN {{spod}}00 (for L3 VNI),</li><li>VLAN {{spod}}51 (for VXLAN Bridging traffic),</li><li>VLAN {{spod}}52 (to demonstrate VXLAN routing capabilities),</li><li>VLAN {{spod}}53/{{spod}}54 (to demonstrate VXLAN routing capabilities through a firewall).</li></ul></li><li>Configure VLAN to VXLAN VNID mapping under VLAN configuration.</li><li>Configure data VXLAN VNIDs under NVE configuration for ingress replication BUM traffic.</li><li>Configure IBGP underlay. Add each spine as IBGP peers so that each host can provide updates to its neighbors directly.<div class=\"note\">In this portion of the lab, we used OSPF for the underlay network and IBGP for the overlay network. We could also use EBGP or IBGP full mesh if the spine hardware supports BGP with EVPN (for example, the Nexus 9000 and Nexus 7000 platforms).</div></li><li>Configure EVPN so that any L2 host MACs that are learned on Leaf L11 or Leaf L12 will be propagated to Leaf L13 and Leaf E11 and vice-versa.</li><li>Configure BGP to include EVPN POD VRF configuration to extend route reachability.<div class=\"note\">Configure interface VLANs for VLAN {{spod}}00, {{spod}}51 and {{spod}}52 and configure the anycast gateway across all the leafs.</div></li><li>Configure interface VLAN for VLAN {{spod}}54.</li></ol><p>There are three features that must be enabled to configure the Nexus 9300 switches to act as a VXLAN gateway: the <strong>vn-segment-vlan-based</strong> feature, the <strong>nv overlay</strong> feature and the <strong>interface-vlan</strong> feature.</p><h3>Verify VXLAN Configuration</h3><ol class=\"step\"><li class=\"step\">Verify VXLAN features are configured and enabled<p><strong>Configuration sample:</strong></p><pre class=\"configsample\">VXLAN-L11(config)# feature vn-segment-vlan-based\nVXLAN-L11(config)# feature nv overlay\nVXLAN-L11(config)# feature interface-vlan</pre></li><li class=\"step\">Globally enable the VLAN/VXLAN routing capability<p><strong>Configuration sample:</strong></p><pre class=\"configsample\">VXLAN-L11(config)# nv overlay evpn</pre><div class=\"note\"><p>Run the following commands on L11, L12, L13, E11, and E12. The output on all of them should be the same except for LACP and VPC which is required only on L11 and L12, as indicated on the lab topology.</p></div><pre>VXLAN-L11# <strong>show running | include feature</strong>\nfeature ospf\nfeature bgp\nfeature pim\nfeature interface-vlan\n<span class=\"highlight\">feature vn-segment-vlan-based</span> <span class=\"arrow\">&larr; Allows VLANs to be mapped to VXLAN VNIDs</span>\nfeature lacp\nfeature vpc\n<span class=\"highlight\">feature nv overlay</span> <span class=\"arrow\">&larr; Allows creation of NVE interface.</span>\nVXLAN-L11# <strong>show feature | inc vnseg</strong>\nvnseg_vlan             1          enabled\nVXLAN-L11# <strong>show feature | inc nve</strong>\nnve                    1          enabled\nVXLAN-L11# <strong>show running | inc &ldquo;overlay evpn&rdquo;</strong>\n<span class=\"highlight\">nv overlay evpn</span> <span class=\"arrow\">&larr; Enables the EVPN capability for the NV Overlay.</span></pre></li><li class=\"step\">Verify loopback interfaces are created on leaf L11 and L12. The loopback is assigned to the NVE interface. Since we are using a VPC setup on L11 and L12, we need a single IP address for the NVE to bind to that is common between both switches. We will create this using an identical secondary IP address. All packets sent by the NVE will be sourced from the secondary loopback interface IP address to avoid duplication.<div class=\"note\">The secondary IP address is only needed if VPC is in use.</div><p><strong>Configuration sample:</strong></p><pre class=\"configsample\">VXLAN-L11(config)# interface loopback0\nVXLAN-L11(config-if)# description loopback for NVE\nVXLAN-L11(config-if)# ip address 101.1.1.1/32\nVXLAN-L11(config-if)# ip address 101.1.1.10/32 secondary\nVXLAN-L11(config-if)# ip router ospf 100 area 0.0.0.0\nVXLAN-L11(config-if)# ip pim sparse-mode</pre><pre class=\"configsample\">VXLAN-L12(config)# interface loopback0\nVXLAN-L12(config-if)# description loopback for NVE\nVXLAN-L12(config-if)# ip address 102.1.1.1/32\nVXLAN-L12(config-if)# ip address 101.1.1.10/32 secondary\nVXLAN-L12(config-if)# ip router ospf 100 area 0.0.0.0\nVXLAN-L12(config-if)# ip pim sparse-mode</pre><pre>VXLAN-L11# <strong>show run interface loopback 0</strong>\n\n!Command: show running-config interface loopback0\n!Time: Fri May  8 03:29:43 2015\n\nversion 7.0(3)I1(3)\n\ninterface loopback0\n  description loopback for NVE\n  ip address 101.1.1.1/32\n  ip address <span class=\"highlight\">101.1.1.10/32 secondary</span>\n  ip router ospf 1 area 0.0.0.0\n  ip pim sparse-mode</pre><pre>VXLAN-L12# <strong>show run interface loopback 0</strong>\n\n!Command: show running-config interface loopback0\n!Time: Fri May  8 03:35:53 2015\n\nversion 7.0(3)I1(3)\n\ninterface loopback0\n  description loopback for NVE\n  ip address 102.1.1.1/32\n  ip address <span class=\"highlight\">101.1.1.10/32 secondary</span>\n  ip router ospf 1 area 0.0.0.0\n  ip pim sparse-mode</pre></li><li class=\"step\">Verify the loopback interfaces are created on L13, E11 and E12.<pre>VLAN-L13# <strong>show run interface loopback 0</strong>\n\n!Command: show running-config interface loopback0\n!Time: Fri May  8 13:46:53 2015\n\nversion 7.0(3)I1(3)\n\ninterface loopback0\n  description loopback for NVE\n  ip address <span class=\"highlight\">103.1.1.1/32</span>\n  ip router ospf 1 area 0.0.0.0\n  ip pim sparse-mode</pre><pre>VXLAN-E11# <strong>show run interface loopback 0</strong>\n\n!Command: show running-config interface loopback0\n!Time: Fri May  8 13:50:56 2015\n\nversion 7.0(3)I1(3)\n\ninterface loopback0\n  description loopback for NVE\n  ip address <span class=\"highlight\">104.1.1.1/32</span>\n  ip router ospf 1 area 0.0.0.0\n  ip pim sparse-mode</pre><pre>VXLAN-E12# <strong>show run interface loopback 0</strong>\n\n!Command: show running-config interface loopback0\n!Time: Fri May  8 13:45:22 2015\n\nversion 7.0(3)I1(3)\n\ninterface loopback0\n  description loopback for NVE\n  ip address <span class=\"highlight\">105.1.1.1/32</span>\n  ip router ospf 1 area 0.0.0.0\n  ip pim sparse-mode</pre></li><li class=\"step\">Verify VTEP (NVE) configuration on the leafs. The NVE interface configuration includes a source command to identify the source loopback interface, the mode of the VTEP (NVE) (in this case is the BGP EVPN) for host learning, and a number of member commands that map VXLAN VNIDs to multicast groups and configure any specific features used. The member configuration will be done later in this module. In this step we are verifying that the NVE has been created and is configured with the correct source loopback interface.<div class=\"note\">There may be some additional configuration present in the following show commands if other students have already moved past this point and started to configure their PODs.</div><div class=\"important-note\">Run the commands in the following two steps on L11, L12 and L13. The output on all of them should be the same.</div><p><strong>Configuration sample:</strong></p><pre class=\"configsample\">VXLAN-L11(config)# interface nve 1\nVXLAN-L11(config-if-nve)# source-interface loopback 0\nVXLAN-L11(config-if-nve)# host-reachability protocol bgp</pre><div class=\"note\">Note: The &ldquo;host-reachability protocol bgp&rdquo; command is required in order to use BGP EVPN control plane for VXLAN traffic.</div><pre>VXLAN-L11(config)# <strong>show run interface nve 1</strong>\n\n!Command: show running-config interface nve1\n!Time: Fri May  8 13:55:29 2015\n\nversion 7.0(3)I1(3)\n\ninterface nve1\n  no shutdown\n  <span class=\"highlight\">source-interface loopback0</span>\n  <span class=\"highlight\">host-reachability protocol bgp</span></pre></li></ol><h3>VXLAN Bridging and Routing Configuration</h3><p>Each POD has four Linux hosts that will be used to test the hardware VXLAN configuration. One host (Ubuntu-V{{spod}}) is connected to a VLAN on the L11/L12 VPC pair and the other host (Ubuntu-D) is connected to a VLAN on L13. Both of these VMs will communicate on the same VXLAN. The third host (Ubuntu-R) is connected to a different VLAN on L13. Ubuntu-V{{spod}} and Ubuntu-R will communicate across different VXLANs using VXLAN routing anycast gateway. In addition, Ubuntu-I resides outside the datacenter, connected to C3.</p><p>You will be adding configuration to map the VLAN to a VXLAN VNI as well as configuring the anycast gateway functionality across the leafs. The next steps will be to map the POD data (L2) VNI, under the NVE configuration, for your POD and create three VLANs: VLAN {{spod}}00 for BGP EVPN control plane traffic and two data plane VLANs/VXLANs: {{spod}}51 for intra-VLAN traffic (which Ubuntu-V{{spod}} and Ubuntu-D will reside on) and {{spod}}52 for inter-VLAN routing (which Ubuntu-R will reside on). Lastly, you will configure the border leaf switches to connect the datacenter to an outside network.</p><div class=\"note\">There may be some additional configuration present in the following show commands if other students have already moved past this point and started to configure their PODs.</div><div class=\"important-note\">Issue the commands in the following steps on L11, L12, and L13.</div><p>In this module, we are demonstrating how to configure the network for VXLAN bridging and routing.</p><ol class=\"step\"><li class=\"step\">Open putty sessions to your POD VMs and verify you are unable to ping between hosts across the pods.<p><strong>Ubuntu-V{{spod}}</strong></p><pre>VXLAN\\POD{{spod}}user@ubuntu-v28:~$ <strong>ping 10.{{spod}}.51.12</strong> <span class=\"arrow\">&larr; ping host Ubuntu-D</span>\nPING 10.{{spod}}.51.12 (10.{{spod}}.51.12) 56(84) bytes of data.\nFrom 10.{{spod}}.51.11 icmp_seq=1 Destination Host Unreachable\nFrom 10.{{spod}}.51.11 icmp_seq=2 Destination Host Unreachable\nFrom 10.{{spod}}.51.11 icmp_seq=3 Destination Host Unreachable\n^C\n--- 10.{{spod}}.51.12 ping statistics ---\n4 packets transmitted, 0 received, +3 errors, <span class=\"highlight\">100% packet loss</span>, time 3005ms\n\nVXLAN\\POD{{spod}}user@ubuntu-v{{spod}}:~$ <strong>ping 10.{{spod}}.52.11</strong> <span class=\"arrow\">&larr; ping host Ubuntu-R</span>\nPING 10.{{spod}}.52.11 (10.{{spod}}.52.11) 56(84) bytes of data.\nFrom 10.{{spod}}.51.11 icmp_seq=1 Destination Host Unreachable\nFrom 10.{{spod}}.51.11 icmp_seq=2 Destination Host Unreachable\nFrom 10.{{spod}}.51.11 icmp_seq=3 Destination Host Unreachable\n^C\n--- 10.{{spod}}.52.11 ping statistics ---\n4 packets transmitted, 0 received, +3 errors, <span class=\"highlight\">100% packet loss</span>, time 3001ms</pre></li><li class=\"step\">Add VLAN to VNID mapping on each leaf (Note: since Leaf L11 and Leaf L12 are VPC devices, the configuration has to be identical across both devices. However, this configuration does not have to match on L13). The value specified with the <strong>vn-segment</strong> keyword is the VNID value sent in the VXLAN header.<p>VLAN numbers will be: {{spod}}00, {{spod}}51 and will map to VXLAN VNIs: 4{{spod}}00, 42{{spod}}51 respectively.</p><pre>VXLAN-L11(config)# <strong>vlan {{spod}}00</strong>\nVXLAN-L11(config-vlan)# <strong>vn-segment 4{{spod}}00</strong>\nVXLAN-L11(config-vlan)# <strong>vlan {{spod}}51</strong>\nVXLAN-L11(config-vlan)# <strong>vn-segment 42{{spod}}51</strong>\nVXLAN-L11(config-vlan)# <strong>exit</strong>\n\nVXLAN-L11# <strong>show run vlan {{spod}}00,{{spod}}51</strong>\n\n!Command: show running-config vlan {{spod}}00, {{spod}}51\n!Time: Fri May  8 15:16:57 2015\n\nversion 7.0(3)I1(3)\nvlan {{spod}}00,{{spod}}51\nvlan {{spod}}00\n  <span class=\"highlight\">vn-segment 4{{spod}}00</span>\nvlan {{spod}}51\n  <span class=\"highlight\">vn-segment 42{{spod}}51</span></pre></li><li class=\"step\">For each VNID used for control plane traffic ({{spod}}00), associate the POD VRF. Under each member data VNI, configure ARP suppression. Configure the VNID for ingress replication on each leaf.<div class=\"note\">ARP suppression is highly recommended. It will help to minimize the amount of flooding across the VXLAN fabric. <a href=\"http://www.cisco.com/c/en/us/products/collateral/switches/nexus-9000-series-switches/guide-c07-734107.html#_Toc414541689\">This link</a> provides more information regarding ARP suppression.</div><div class=\"note\">Ingress Replication will help customers who don&rsquo;t want to enable multicast in their network. Ingress replication uses unicast instead of multicast for BUM traffic.</div><pre>VXLAN-L11(config)# <strong>interface nve 1</strong>\nVXLAN-L11(config-if-nve)# <strong>member vni 4{{spod}}00 associate-vrf</strong>\nVXLAN-L11(config-if-nve)# <strong>member vni 42{{spod}}51</strong>\nVXLAN-L11(config-if-nve-vni)# <strong>ingress-replication protocol bgp</strong>\nVXLAN-L11(config-if-nve-vni)# <strong>suppress-arp</strong>\n\nVXLAN-L11(config-if-nve)# <strong>show run interface nve 1</strong>\n!Command: show running-config interface nve1\n!Time: Fri May  8 15:21:00 2015\n\nversion 7.0(3)I1(3)\n\ninterface nve1\n  no shutdown\n  source-interface loopback0\n  host-reachability protocol bgp\n  <span class=\"highlight\">member vni 4{{spod}}00 associate-vrf</span>\n  <span class=\"highlight\">member vni 42{{spod}}51</span>\n     <span class=\"highlight\">suppress-arp</span>\n     <span class=\"highlight\">ingress-replication protocol bgp</span></pre></li><li class=\"step\">Create a VRF for the POD, associate the control plane VLAN {{spod}}00 VNID to the VRF on each leaf and specify the EVPN session used with route targets. This is only needed for L3 VNI that is needed for VXLAN routing.<pre>VXLAN-L11(config)# <strong>vrf context POD{{spod}}</strong>\nVXLAN-L11(config-vrf)# <strong>vni 4{{spod}}00</strong>\nVXLAN-L11(config-vrf)# <strong>rd auto</strong>\nVXLAN-L11(config-vrf)# <strong>address-family ipv4 unicast</strong>\nVXLAN-L11(config-vrf-af-ipv4)# <strong>route-target import 65000:{{spod}}</strong>\nVXLAN-L11(config-vrf-af-ipv4)# <strong>route-target import 65000:{{spod}} evpn</strong>\nVXLAN-L11(config-vrf-af-ipv4)# <strong>route-target export 65000:{{spod}} </strong>\nVXLAN-L11(config-vrf-af-ipv4)# <strong>route-target export 65000:{{spod}} evpn</strong>\n \nVXLAN-L11(config-vrf-af-ipv4)# <strong>show run vrf POD{{spod}}</strong>\n!Command: show running-config vrf POD{{spod}}\n!Time: Sat Jan 23 23:58:51 2016\n\nversion 7.0(3)I1(3)\nvrf context POD{{spod}}\n   vni 4{{spod}}00\n   rd auto\n   address-family ipv4 unicast\n     <span class=\"highlight\">route-target import 65000:{{spod}}</span>\n     <span class=\"highlight\">route-target import 65000:{{spod}} evpn</span>\n     <span class=\"highlight\">route-target export 65000:{{spod}}</span>\n     <span class=\"highlight\">route-target export 65000:{{spod}} evpn</span></pre></li><li class=\"step\">Import/export the data VLAN VNIDs (VLAN {{spod}}51) into/out of EVPN for host MAC learning.<pre>VXLAN-L11(config)# <strong>evpn</strong>\nVXLAN-L11(config-evpn)# <strong>vni 42{{spod}}51 l2</strong>\nVXLAN-L11(config-evpn-evi)# <strong>rd auto</strong>\nVXLAN-L11(config-evpn-evi)# <strong>route-target import {{spod}}:42{{spod}}51</strong>\nVXLAN-L11(config-evpn-evi)# <strong>route-target export {{spod}}:42{{spod}}51</strong></pre></li><li class=\"step\">Configure BGP to include your POD&rsquo;s VRF so that any MACs learned on the local switch will be propagated to the other VTEPs and their respective switches.<pre>VXLAN-L11(config)# <strong>router bgp 100</strong>\nVXLAN-L11(config-router)# <strong>vrf POD{{spod}}</strong>\nVXLAN-L11(config-router-vrf)# <strong>address-family ipv4 unicast</strong>\nVXLAN-L11(config-router-vrf-af)# <strong>advertise l2vpn evpn</strong>\nVXLAN-L11(config-router-vrf-af)# <strong>show run bgp</strong>\n\n!Command: show running-config bgp\n!Time: Fri May  8 17:08:14 2015\n\nversion 7.0(3)I1(3)\nfeature bgp\n\nrouter bgp 100\n  address-family ipv4 unicast\n    network 101.1.1.1/32\n  neighbor 200.200.200.2 remote-as 100\n    update-source loopback3\n    address-family ipv4 unicast\n      send-community both\n    address-family l2vpn evpn\n      send-community both\n  neighbor 200.200.200.3 remote-as 100\n    update-source loopback3\n    address-family ipv4 unicast\n      send-community both\n    address-family l2vpn evpn\n      send-community both\n  <span class=\"highlight\">vrf POD{{spod}}</span>\n    <span class=\"highlight\">address-family ipv4 unicast</span>\n      <span class=\"highlight\">advertise l2vpn evpn</span>\n<span class=\"snip\">&lt;SNIP&gt;</span>\nevpn\nvni 42{{spod}}51 l2\n     rd auto\n     route-target import {{spod}}:42{{spod}}51\n     route-target export {{spod}}:42{{spod}}51\n<span class=\"snip\">&lt;SNIP&gt;</span></pre></li><li class=\"step\">Configure the interface VLANs (SVI) for the control and data VLANs to enable VXLAN routing using an anycast gateway. Make sure the IP of the gateway is the same across all the leafs to provide the anycast gateway functionality.<div class=\"note\">In order for anycast gateway functionality to work, the MAC address must be specified and must be the same across all three switches. This is accomplished using the &ldquo;fabric forwarding anycast-gateway-mac 0002.0002.0002&rdquo; command.</div><div class=\"note\">Once you configure L11, you will notice VPC inconsistency in the VPC output, ignore this at this point. Also there will be other students who might be on different speed or different part of the lab using their VLANs and can caused these messages.</div><pre>VXLAN-L11(config)# <strong>interface vlan {{spod}}00</strong>\nVXLAN-L11(config-if)# <strong>vrf member POD{{spod}}</strong>\nVXLAN-L11(config-if)# <strong>no shutdown</strong>\nVXLAN-L11(config-if)# <strong>interface Vlan{{spod}}51</strong>\nVXLAN-L11(config-if)# <strong>vrf member POD{{spod}}</strong>\nVXLAN-L11(config-if)# <strong>ip address 10.{{spod}}.51.1/24</strong>\nVXLAN-L11(config-if)# <strong>no shutdown</strong>\nVXLAN-L11(config-if)# <strong>fabric forwarding mode anycast-gateway</strong>\nVXLAN-L11(config-if)# <strong>show run int vlan{{spod}}00,vlan{{spod}}51</strong>\n\n!Command: show running-config interface Vlan{{spod}}00, Vlan{{spod}}51\n!Time: Fri May  8 17:16:19 2015\n\nversion 7.0(3)I1(3)\ninterface Vlan{{spod}}00\n  no shutdown\n  <span class=\"highlight\">vrf member POD{{spod}}</span>\n\ninterface Vlan{{spod}}51\n  no shutdown\n  <span class=\"highlight\">vrf member POD{{spod}}</span>\n  ip address 10.{{spod}}.51.1/24\n  <span class=\"highlight\">fabric forwarding mode anycast-gateway</span></pre></li><li class=\"step\">You should have configured all of the above commands on L11, L12, and L13. If you haven&rsquo;t configured all three switches, there is a file in the folder entitled &ldquo;POD{{spod}}_Configs&rdquo; on your desktop called &ldquo;L11_L12_L13_pod{{spod}}&rdquo;. Copy paste all of the configuration in that file into any device that you didn&rsquo;t configure. This configuration is identical to that of L11 as overlay configuration for configuring VLANs {{spod}}50 and {{spod}}51 will be same across all the switches.<div class=\"important-note\">It is vital that you do not skip this step!</div></li><li class=\"step\">Configure Leaf L13 with VLAN {{spod}}52 / VXLAN VNI 42{{spod}}52. Ubuntu-R is a member of this VLAN. In order for Ubuntu-V{{spod}} to communicate with Ubuntu-R, traffic must be routed from VXLAN 42{{spod}}51 to 42{{spod}}52.<div class=\"important-note\">Up until this point, leaf L13 configuration has been the same as L11 and L12. Only the below configuration for VLAN{{spod}}52 / VNI 52{{spod}}52 is different. <u><strong>Configure this step only on L13.</strong></u></div><pre>VXLAN-L13(config)# <strong>vlan {{spod}}52</strong>\nVXLAN-L13(config-vlan)# <strong>vn-segment 42{{spod}}52</strong>\n\nVXLAN-L13(config)# <strong>interface vlan {{spod}}52</strong>\nVXLAN-L13(config-if)# <strong>no shutdown</strong>\nVXLAN-L13(config-if)# <strong>vrf member POD{{spod}}</strong>\nVXLAN-L13(config-if)# <strong>ip address 10.{{spod}}.52.1/24</strong>\nVXLAN-L13(config-if)# <strong>fabric forwarding mode anycast-gateway</strong>\n\nVXLAN-L13(config)# <strong>int nve1</strong>\nVXLAN-L13(config-if-nve)# <strong>member vni 42{{spod}}52</strong>\nVXLAN-L13(config-if-nve-vni)# <strong>ingress-replication protocol bgp</strong>\nVXLAN-L13(config-if-nve-vni)# <strong>suppress-arp</strong>\n\nVXLAN-L13(config)# <strong>evpn</strong>\nVXLAN-L13(config-evpn)# <strong>vni 42{{spod}}52 l2</strong>\nVXLAN-L13(config-evpn-evi)# <strong>rd auto</strong>\nVXLAN-L13(config-evpn-evi)# <strong>route-target import {{spod}}:42{{spod}}52</strong>\nVXLAN-L13(config-evpn-evi)# <strong>route-target export {{spod}}:42{{spod}}52</strong>\n\nVXLAN-L13(config)# <strong>show run interface vlan {{spod}}52</strong>\n\n!Command: show running-config interface Vlan{{spod}}52\n!Time: Sun May 10 00:47:53 2015\n\nversion 7.0(3)I1(3)\n\n<span class=\"highlight\">interface Vlan{{spod}}52</span>\n  no shutdown\n  <span class=\"highlight\">vrf member POD{{spod}}</span>\n  ip address 10.{{spod}}.52.1/24\n  <span class=\"highlight\">fabric forwarding mode anycast-gateway</span></pre></li><li class=\"step\">Verify your VNI is in an up state under the NVE on each of the leafs.<pre>VXLAN-L11# <strong>show nve vni</strong>\nCodes: CP - Control Plane        DP - Data Plane\n       UC - Unconfigured         SA - Suppress ARP\n\nInterface VNI      Multicast-group   State Mode Type [BD/VRF]      Flags\n--------- -------- ----------------- ----- ---- ------------------ -----\nnve1      <span class=\"highlight\">4{{spod}}00</span>     n/a               <span class=\"highlight\">Up</span>    CP   L3 [POD{{spod}}]\nnve1      <span class=\"highlight\">42{{spod}}51</span>    Unicast BGP       <span class=\"highlight\">Up</span>    CP   L2 [{{spod}}51]           SA</pre><pre>VXLAN-L12# <strong>show nve vni</strong>\nCodes: CP - Control Plane        DP - Data Plane\n       UC - Unconfigured         SA - Suppress ARP\n\nInterface VNI      Multicast-group   State Mode Type [BD/VRF]      Flags\n--------- -------- ----------------- ----- ---- ------------------ -----\nnve1      <span class=\"highlight\">4{{spod}}00</span>     n/a               <span class=\"highlight\">Up</span>    CP   L3 [POD{{spod}}]\nnve1      <span class=\"highlight\">42{{spod}}51</span>    Unicast BGP       <span class=\"highlight\">Up</span>    CP   L2 [{{spod}}51]           SA</pre><pre>VXLAN-L13# <strong>sh nve vni</strong>\nCodes: CP - Control Plane        DP - Data Plane\n       UC - Unconfigured         SA - Suppress ARP\n\nInterface VNI      Multicast-group   State Mode Type [BD/VRF]      Flags\n--------- -------- ----------------- ----- ---- ------------------ -----\nnve1      <span class=\"highlight\">4{{spod}}00</span>    n/a               <span class=\"highlight\">Up</span>    CP   L3 [POD{{spod}}]\nnve1      <span class=\"highlight\">42{{spod}}51</span>   UnicastBGP        <span class=\"highlight\">Up</span>    CP   L2 [{{spod}}51]            SA\nnve1      <span class=\"highlight\">42{{spod}}52</span>   UnicastBGP        <span class=\"highlight\">Up</span>    CP   L2 [{{spod}}52]            SA</pre></li><li class=\"step\">Use ping to test connectivity between your POD VMs (V{{spod}} and D).<pre>VXLAN\\POD{{spod}}user@ubuntu-v{{spod}}:~$ <strong>ping 10.{{spod}}.51.12</strong>\nPING 10.{{spod}}.51.12 (10.{{spod}}.51.12) 56(84) bytes of data.\n64 bytes from 10.{{spod}}.51.12: icmp_req=1 ttl=64 time=0.410 ms\n64 bytes from 10.{{spod}}.51.12: icmp_req=2 ttl=64 time=0.352 ms\n64 bytes from 10.{{spod}}.51.12: icmp_req=3 ttl=64 time=0.379 ms\n64 bytes from 10.{{spod}}.51.12: icmp_req=4 ttl=64 time=0.300 ms\n^C\n--- 10.{{spod}}.51.12 ping statistics ---\n4 packets transmitted, 4 received, <span class=\"highlight\">0% packet loss</span>, time 3000ms</pre></li><li class=\"step\">Use ping to test connectivity between your POD VMs (V{{spod}} and R). Note that this ping is being routed between VXLANs.<pre>VXLAN\\POD{{spod}}user@ubuntu-v{{spod}}:~$ <strong>ping 10.{{spod}}.52.11</strong>\nPING 10.{{spod}}.52.11 (10.{{spod}}.52.11) 56(84) bytes of data.\n64 bytes from 10.{{spod}}.52.11: icmp_req=1 ttl=62 time=2.46 ms\n64 bytes from 10.{{spod}}.52.11: icmp_req=2 ttl=62 time=0.424 ms\n64 bytes from 10.{{spod}}.52.11: icmp_req=3 ttl=62 time=0.471 ms\n64 bytes from 10.{{spod}}.52.11: icmp_req=4 ttl=62 time=0.513 ms\n^C\n--- 10.{{spod}}.52.11 ping statistics ---\n4 packets transmitted, 4 received, <span class=\"highlight\">0% packet loss</span>, time 3001ms</pre></li><li class=\"step\">Check the MAC address for the Ubuntu-V{{spod}} host.<div class=\"note\">In the following steps, the MAC addresses shown are for reference only! They may differ for your pod.</div><pre>VXLAN\\POD{{spod}}user@ubuntu-v{{spod}}:~$ <strong>ifconfig eth1</strong>\neth1      Link encap:Ethernet  HWaddr <span class=\"highlight\">00:50:56:82:ad:66</span>\n          inet addr:10.{{spod}}.51.11  Bcast:10.{{spod}}.51.255  Mask:255.255.255.0\n          inet6 addr: fe80::250:56ff:fe82:ad66/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:3441 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:610049 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:1000\n          RX bytes:345064 (345.0 KB)  TX bytes:26742917 (26.7 MB)</pre></li><li class=\"step\">Check the MAC address for the Ubuntu-D host.<pre>VXLAN\\POD{{spod}}user@ubuntu-d:~$ <strong>ifconfig eth1.{{spod}}51</strong>\neth1.251  Link encap:Ethernet  HWaddr <span class=\"highlight\">00:50:56:82:cf:76</span>\n          inet addr:10.{{spod}}.51.12  Bcast:10.{{spod}}.51.255  Mask:255.255.255.0\n          inet6 addr: fe80::250:56ff:fe82:cf76/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:1723 errors:0 dropped:15 overruns:0 frame:0\n          TX packets:3777 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:166252 (166.2 KB)  TX bytes:751986 (751.9 KB)</pre></li><li class=\"step\">Check the MAC address for the Ubuntu-R host.<pre>VXLAN\\POD{{spod}}user@ubuntu-r:~$ <strong>ifconfig eth1.{{spod}}52</strong>\neth1.252  Link encap:Ethernet  HWaddr <span class=\"highlight\">00:50:56:82:c4:fc</span>\n          inet addr:10.{{spod}}.52.11  Bcast:10.{{spod}}.52.255  Mask:255.255.255.0\n          inet6 addr: fe80::250:56ff:fe82:c4fc/64 Scope:Link\n          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1\n          RX packets:1287 errors:0 dropped:0 overruns:0 frame:0\n          TX packets:4155 errors:0 dropped:0 overruns:0 carrier:0\n          collisions:0 txqueuelen:0\n          RX bytes:94390 (94.3 KB)  TX bytes:826697 (826.6 KB)</pre></li><li class=\"step\">Check the MAC address table on Leaf L11 and L12<div class=\"note\">The MAC address-table on each N9K switch should show entries for your hosts. One entry will be learned via the L2 trunk port, from the host connected to this switch, and the other entry will be via the NVE interface, from hosts reached over the VTEP.</div><pre>VXLAN-L11# <strong>show mac address-table vlan {{spod}}51</strong>\nLegend:\n        * - primary entry, G - Gateway MAC, (R) - Routed MAC, O - Overlay MAC\n        age - seconds since last seen,+ - primary entry using vPC Peer-Link,\n        (T) - True, (F) - False, C - ControlPlane MAC\n   VLAN     MAC Address      Type      age     Secure NTFY Ports\n---------+-----------------+--------+---------+------+----+------------------\n+  {{spod}}51     <span class=\"highlight\">0050.5682.ad66</span>   dynamic  0         F      F    Po11 <span class=\"arrow\">&larr; V{{spod}} host learned via VPC</span>\nC  {{spod}}51     <span class=\"highlight\">0050.5682.cf76</span>   dynamic  0         F      F    nve1(103.1.1.1) <span class=\"arrow\">&larr; D host learned</span>\nG  {{spod}}51     f8c2.8887.d36f   static   -         F      F    vPC Peer-Link(R)   <span class=\"arrow\">over VXLAN </span>\nG  {{spod}}51     f8c2.8887.d3df   static   -         F      F    sup-eth1(R)</pre><pre>VXLAN-L12# <strong>show mac address-table vlan {{spod}}51</strong>\nLegend:\n        * - primary entry, G - Gateway MAC, (R) - Routed MAC, O - Overlay MAC\n        age - seconds since last seen,+ - primary entry using vPC Peer-Link,\n        (T) - True, (F) - False, C - ControlPlane MAC\n   VLAN     MAC Address      Type      age     Secure NTFY Ports\n---------+-----------------+--------+---------+------+----+------------------\n+  {{spod}}51     <span class=\"highlight\">0050.5682.ad66</span>   dynamic  0         F      F    Po11 <span class=\"arrow\">&larr; V{{spod}} host on the VPC</span>\nC  {{spod}}51     <span class=\"highlight\">0050.5682.cf76</span>   dynamic  0         F      F    nve1(103.1.1.1) <span class=\"arrow\">&larr; D host learned</span>\nG  {{spod}}51     f8c2.8887.d36f   static   -         F      F    sup-eth1(R)        <span class=\"arrow\">over VXLAN</span>\nG  {{spod}}51     f8c2.8887.d3df   static   -         F      F    vPC Peer-Link(R)</pre></li><li class=\"step\">Check the MAC address table on Leaf L13<pre>VLAN-L13# <strong>show mac address-table vlan {{spod}}51</strong>\nLegend:\n        * - primary entry, G - Gateway MAC, (R) - Routed MAC, O - Overlay MAC\n        age - seconds since last seen,+ - primary entry using vPC Peer-Link,\n        (T) - True, (F) - False, C - ControlPlane MAC\n   VLAN     MAC Address      Type      age     Secure NTFY Ports\n---------+-----------------+--------+---------+------+----+------------------\n*  {{spod}}51     <span class=\"highlight\">0050.5682.cf76</span>   dynamic  0         F      F    Eth1/13 <span class=\"arrow\">&larr; D host on local switch</span>\nC  {{spod}}51     <span class=\"highlight\">0050.5682.ad66</span>   dynamic  0         F      F    nve1(101.1.1.10)<span class=\"arrow\">&larr; V{{spod}} host learned</span>\nG  {{spod}}51     58f3.9ca3.4603   static   -         F      F    sup-eth1(R)        <span class=\"arrow\">over VXLAN</span>\n\nVLAN-L13# <strong>show mac address-table vlan {{spod}}52</strong>\nLegend:\n        * - primary entry, G - Gateway MAC, (R) - Routed MAC, O - Overlay MAC\n        age - seconds since last seen,+ - primary entry using vPC Peer-Link,\n        (T) - True, (F) - False, C - ControlPlane MAC\n   VLAN     MAC Address      Type      age     Secure NTFY Ports\n---------+-----------------+--------+---------+------+----+------------------\n*  {{spod}}52     <span class=\"highlight\">0050.5682.c4fc</span>   dynamic  0         F      F    Eth1/1 <span class=\"arrow\">&larr; R host on local switch</span>\nG  {{spod}}52     58f3.9ca3.4603   static   -         F      F    sup-eth1(R)</pre></li><li class=\"step\">Verify the L2 routing for the EVPN routes for your POD VNIs.<pre>VXLAN-L11# <strong>show l2route evpn mac-ip all</strong>\nTopology ID Mac Address    Prod Host IP                                 Next Hop (s)\n----------- -------------- ---- --------------------------------------- ---------------\n{{spod}}51         0050.5682.ad66 HMM  10.{{spod}}.51.11                              N/A\n{{spod}}51         0050.5682.cf76 <span class=\"highlight\">BGP</span>  10.{{spod}}.51.12                              <span class=\"highlight\">103.1.1.1</span> <span class=\"arrow\">&larr; VTEP of L13(NVE loopback IP)</span></pre><pre>VXLAN-L12# <strong>show l2route evpn mac-ip all</strong>\nTopology ID Mac Address    Prod Host IP                                 Next Hop (s)\n----------- -------------- ---- --------------------------------------- ---------------\n{{spod}}51         0050.5682.ad66 HMM  10.{{spod}}.51.11                              N/A\n{{spod}}51         0050.5682.cf76 <span class=\"highlight\">BGP</span>  10.{{spod}}.51.12                              <span class=\"highlight\">103.1.1.1</span> <span class=\"arrow\">&larr; VTEP of L13(NVE loopback IP)</span></pre><pre>VLAN-L13# <strong>show l2route evpn mac-ip all</strong>\nTopology ID Mac Address    Prod Host IP                                 Next Hop (s)\n----------- -------------- ---- --------------------------------------- ---------------\n{{spod}}51         0050.5682.cf76 HMM  10.{{spod}}.51.12                              N/A\n{{spod}}52         0050.5682.c4fc HMM  10.{{spod}}.52.11                              N/A\n{{spod}}51         0050.5682.ad66 <span class=\"highlight\">BGP</span>  10.{{spod}}.51.11                              <span class=\"highlight\">101.1.1.10</span> <span class=\"arrow\">&larr; VTEP of L11/L12 VPC(NVE </span>\n                                                                                      <span class=\"arrow\">loopback secondary IP)</span></pre></li></ol>",
//                         "path": "use-case-1-nexus-9300-vxlan-configuration"
//                     },
//                     {
//                         "name": "Boarder Leaf Configuration",
//                         "id": "624924415684",
//                         "data": "<style type=\"text/css\">ol.step {\n    counter-reset: step;\n    margin-left: 3em;\n}\n\nli.step {\n    display: block;\n}\n\nli.step::before {\n    display: inline-block;\n    content: \"Step \"counter(step) \":\";\n    counter-increment: step;\n    width: 4.3em;\n    margin-left: -4.3em;\n    font-weight: bold;\n}\n\npre.configsample {\n    background-color: rgba(255, 255, 255, 0.0);\n    color: #000;\n}\n\npre>strong {\n    color: rgba(0, 188, 235, 0.8);\n}\n\nspan.snip {\n    background-color: rgba(240, 76, 55, 0.7);\n}\n\nspan.highlight {\n    background-color: rgba(110, 190, 74, 0.4);\n}\n\nspan.arrow {\n    color: rgba(251, 171, 24, 1);\n    font-weight: bold;\n}</style><h1>Use Case 1</h1><h2>Border Leaf Configuration &ndash; External Network Communication</h2><p>This module is based off of the topology shown below. It demonstrates the VXLAN host&rsquo;s connectivity with external networks through the Border Leaf / Edge Switches, E11 and E12.</p><p><img src=\"/uploads/1fc3c588-bd2c-1597-efe9-f25774563026.png\" /></p><p>One host (Ubuntu-V{{spod}}) is connected to a VLAN on the L11/L12 VPC pair and the external &ldquo;internet&rdquo; host (Ubuntu-I) is connected to Internet core router C3. To facilitate this communication, the Border Leaf switches (referred to from here on as edge switches), E11 and E12 need to be configured with VTEPs. The VXLAN traffic will terminate at E11 and E12 and then regular (non-VXLAN) traffic for each of the PODs will be sent through core C1 on the respective customer VRFs and then eventually routed to C3 through BGP.&nbsp;</p><ol start=\"50\" class=\"step\"><li class=\"step\">Open putty sessions to your POD VMs and verify you are unable to ping from Ubuntu V{{spod}} to Ubuntu I<p><strong>Ubuntu-V{{spod}}</strong></p><pre>VXLAN\\POD{{spod}}user@ubuntu-v{{spod}}:~$ <strong>ping 75.162.84.11</strong> <span class=\"arrow\">&larr; ping external host Ubuntu-I</span>\nPING 75.162.84.11 (75.162.84.11) 56(84) bytes of data.\n^C\n--- 75.162.84.11 ping statistics ---\n6 packets transmitted, 0 received, <span class=\"highlight\">100% packet loss</span>, time 5040ms</pre></li><li class=\"step\">Verify there is no route from each Leaf to the &ldquo;Internet&rdquo; VM in your POD&rsquo;s VRF.<pre>VXLAN-L11# <strong>show ip route 75.162.84.11 vrf POD{{spod}}</strong>\n<span class=\"highlight\">IP Route Table for VRF POD{{spod}}&quot;</span>\n&#39;*&#39; denotes best ucast next-hop\n&#39;**&#39; denotes best mcast next-hop\n&#39;[x/y]&#39; denotes [preference/metric]\n&#39;%&lt;string&gt;&#39; in via output denotes VRF &lt;string&gt;<string><string>\n\n<span class=\"highlight\">Route not found</span></string></string></pre></li><li class=\"step\">Add VLAN to VNID mapping for the L3 VNI on E11. The VLAN number will be {{spod}}00 and will map to VXLAN VNI 4{{spod}}00.<div class=\"note\">There are two edge switches (E11 and E12). To save time, you will only issue the below commands on E11. Then, you will copy paste the entire set of commands for E12 on to E12 using the provided configuration file (this file is located on your desktop).</div><pre>VXLAN-E11(config)# <strong>vlan {{spod}}00</strong>\nVXLAN-E11(config-vlan)# <strong>vn-segment 4{{spod}}00</strong>\nVXLAN-E11(config-vlan)# <strong>exit</strong>\n\nVXLAN-E11(config)# <strong>show run vlan {{spod}}00</strong>\n\n!Command: show running-config vlan {{spod}}00\n!Time: Fri May  8 19:19:42 2015\n\nversion 7.0(3)I1(3)\nvlan {{spod}}00\nvlan {{spod}}00\n  <span class=\"highlight\">vn-segment 4{{spod}}00</span></pre></li><li class=\"step\">On the NVE configuration for E11, associate the POD VRF to the the Layer 3 VNID used for control plane traffic ({{spod}}00).<pre>VXLAN-E11(config)# <strong>interface nve1</strong>\nVXLAN-E11(config-if-nve)# <strong>member vni 4{{spod}}00 associate-vrf</strong>\nVXLAN-E11(config-if-nve)# <strong>show run interface nve1</strong>\n\n!Command: show running-config interface nve1\n!Time: Fri May  8 19:26:12 2015\n\nversion 7.0(3)I1(3)\n\ninterface nve1\n  mtu 9216\n  no shutdown\n  source-interface loopback0\n  host-reachability protocol bgp\n  <span class=\"highlight\">member vni 4{{spod}}00 associate-vrf</span></pre></li><li class=\"step\">Create the VRF for the POD, associate the control plane VLAN {{spod}}00 VNID to the VRF and specify the EVPN session used (auto selection).<pre>VXLAN-E11(config)# <strong>vrf context POD{{spod}}</strong>\nVXLAN-E11(config-vrf)# <strong>vni 4{{spod}}00</strong>\nVXLAN-E11(config-vrf)# <strong>rd auto</strong>\nVXLAN-E11(config-vrf)# <strong>address-family ipv4 unicast</strong>\nVXLAN-E11(config-vrf-af-ipv4)# <strong>route-target import 65000:{{spod}}</strong>\nVXLAN-E11(config-vrf-af-ipv4)# <strong>route-target import 65000:{{spod}} evpn</strong>\nVXLAN-E11(config-vrf-af-ipv4)# <strong>route-target export 65000:{{spod}}</strong>\nVXLAN-E11(config-vrf-af-ipv4)# <strong>route-target export 65000:{{spod}} evpn</strong>\nVXLAN-E11(config-vrf-af-ipv4)# <strong>show run vrf POD{{spod}}</strong>\n!Command: show running-config vrf POD{{spod}}\n!Time: Fri May  8 19:29:04 2015\n\nversion 7.0(3)I1(3)\n<span class=\"highlight\">vrf context POD{{spod}}</span>\n   <span class=\"highlight\">vni 4{{spod}}00</span>\n   rd auto\n   address-family ipv4 unicast\n     <span class=\"highlight\">route-target import 65000:{{spod}}</span>\n     <span class=\"highlight\">route-target import 65000:{{spod}} evpn</span>\n     <span class=\"highlight\">route-target export 65000:{{spod}}</span>\n     <span class=\"highlight\">route-target export 65000:{{spod}} evpn</span></pre><div class=\"note\">Since no compute servers/hosts are attached to the edge routers, there is no need to have any other VXLANs defined on E11/E12 (for example, VXLAN {{spod}}51 and {{spod}}52). All the host&rsquo;s information can be carried by the L3VNI VXLAN/VLAN that is associated with the VRF.</div></li><li class=\"step\">Configure BGP to include your POD&rsquo;s VRF so that any MACs learned on the local switch will be propagated to the other VTEPs and their respective switches.<pre>VXLAN-E11(config)# <strong>router bgp 100</strong>\nVXLAN-E11(config-router)# <strong>vrf POD{{spod}}</strong>\nVXLAN-E11(config-router-vrf)# <strong>address-family ipv4 unicast</strong>\nVXLAN-E11(config-router-vrf-af)# <strong>advertise l2vpn evpn</strong>\n\nVXLAN-E11# <strong>show run bgp </strong>\n!Command: show running-config bgp\n!Time: Fri May  8 19:59:55 2015\n\nversion 7.0(3)I1(3)\nfeature bgp\n\nrouter bgp 100\n  address-family ipv4 unicast\n<span class=\"snip\">&lt;SNIP&gt;</span>\n  <span class=\"highlight\">vrf POD{{spod}}</span>\n    address-family ipv4 unicast\n      <span class=\"highlight\">advertise l2vpn evpn</span>\n<span class=\"snip\">&lt;SNIP&gt;</span></pre></li><li class=\"step\">Configure the interface VLAN (SVI) for the control VLAN on the POD{{spod}} VRF.<pre>VXLAN-E11(config)# <strong>interface vlan {{spod}}00</strong>\nVXLAN-E11(config-if)# <strong>vrf member POD{{spod}}</strong>\nVXLAN-E11(config-if)# <strong>ip forward</strong>\nVXLAN-E11(config-if)# <strong>no shutdown</strong>\nVXLAN-E11(config)# <strong>show run int vlan{{spod}}00</strong>\n\n!Command: show running-config interface Vlan{{spod}}00\n!Time: Fri May  8 20:07:57 2015\n\nversion 7.0(3)I1(3)\n\ninterface Vlan{{spod}}00\n  no shutdown\n  <span class=\"highlight\">vrf member POD{{spod}}</span>\n  <span class=\"highlight\">ip forward</span></pre></li><li class=\"step\">Verify your control VNI (L3 VNI) is in an UP state under the NVE<pre>VXLAN-E11(config)# <strong>show nve vni</strong>\nCodes: CP - Control Plane        DP - Data Plane\n       UC - Unconfigured         SA - Suppress ARP\n\nInterface VNI      Multicast-group   State Mode Type [BD/VRF]      Flags\n--------- -------- ----------------- ----- ---- ------------------ -----\nnve1      <span class=\"highlight\">4{{spod}}00</span>     n/a               <span class=\"highlight\">Up</span>    CP   L3 [POD{{spod}}]</pre></li><li class=\"step\">Configure sub-interfaces on E11 in the POD{{spod}} VRF on the links between E11 and Core C1.<pre>VXLAN-E11(config)# <strong>interface ethernet 1/10.{{spod}}</strong>\nVXLAN-E11(config-subif)# <strong>encapsulation dot1Q 10{{spod}}</strong>\nVXLAN-E11(config-subif)# <strong>vrf member POD{{spod}}</strong>\nVXLAN-E11(config-subif)# <strong>ip address 172.11.{{spod}}.1/30</strong>\nVXLAN-E11(config-subif)# <strong>no shutdown</strong>\nVXLAN-E11(config-subif)# <strong>show run interface ethernet 1/10.{{spod}}</strong>\n\n!Command: show running-config interface Ethernet1/10.{{spod}}\n!Time: Fri May  8 19:43:48 2015\n\nversion 7.0(3)I1(3)\n\n<span class=\"highlight\">interface Ethernet1/10.{{spod}}</span>\n  encapsulation dot1q 10{{spod}}\n  <span class=\"highlight\">vrf member POD{{spod}}</span>\n  ip address 172.11.{{spod}}.1/30\n  no shutdown</pre></li><li class=\"step\">Configure sub-interfaces on C1 in the default VRF on the links between C1 and Edge E11 and E12.<pre>VXLAN-C1(config)# <strong>interface ethernet 1/10.{{spod}}</strong>\nVXLAN-C1(config-subif)# <strong>encapsulation dot1Q 10{{spod}}</strong>\nVXLAN-C1(config-subif)# <strong>ip address 172.11.{{spod}}.2/30</strong>\nVXLAN-C1(config-subif)# <strong>interface ethernet 1/15.{{spod}}</strong>\nVXLAN-C1(config-subif)# <strong>encapsulation dot1Q 15{{spod}}</strong>\nVXLAN-C1(config-subif)# <strong>ip address 172.12.{{spod}}.2/30</strong>\nVXLAN-C1(config-subif)# <strong>show run interface ethernet 1/10.{{spod}}, ethernet 1/15.{{spod}}</strong>\n\n!Command: show running-config interface Ethernet1/10.{{spod}}, Ethernet1/15.{{spod}}\n!Time: Fri May  8 20:30:25 2015\n\nversion 7.0(2)U3(7)\n\ninterface Ethernet1/10.{{spod}}\n  encapsulation dot1q 10{{spod}}\n  ip address 172.11.{{spod}}.2/30\n\ninterface Ethernet1/15.{{spod}}\n  encapsulation dot1q 15{{spod}}\n  ip address 172.12.{{spod}}.2/30</pre></li><li class=\"step\">On E11, define BGP peering towards C1 to connect the tenants to the outside world.<pre>VXLAN-E11(config)# <strong>router bgp 100</strong>\nVXLAN-E11(config-router)# <strong>vrf POD{{spod}}</strong>\nVXLAN-E11(config-router-vrf)# <strong>address-family ipv4 unicast</strong>\nVXLAN-E11(config-router-vrf-af)# <strong>advertise l2vpn evpn</strong>\nVXLAN-E11(config-router-vrf-neighbor-af)# <strong>neighbor 172.11.{{spod}}.2 remote-as 64437</strong>\nVXLAN-E11(config-router-vrf-neighbor)# <strong>address-family ipv4 unicast</strong>\nVXLAN-E11(config-router-vrf-neighbor-af)# <strong>show run bgp</strong>\n<span class=\"snip\">&lt;SNIP&gt;</span>\n!Command: show running-config bgp\n\n!Time: Fri May  8 20:52:40 2015\n\nversion 7.0(3)I1(3)\nfeature bgp\n\nrouter bgp 100\n<span class=\"highlight\">vrf POD{{spod}}</span>\n    address-family ipv4 unicast\n      advertise l2vpn evpn\n    <span class=\"highlight\">neighbor 172.11.{{spod}}.2 remote-as 64437</span>\n      address-family ipv4 unicast\n<span class=\"snip\">&lt;SNIP&gt;</span></pre></li><li class=\"step\">Copy paste the provided file on your desktop in the &ldquo;POD{{spod}}_Configs&ldquo; to E12. This file is titled &ldquo;E12_pod{{spod}}&rdquo;. The only difference in the configuration are the following sections:<ul><li>IP address and description for VRF subinterface to core C1</li><li>BGP neighbor statement</li></ul><div class=\"important-note\">It is vital that you do not skip this step!</div></li><li class=\"step\">Verify that the BGP sessions for POD{{spod}} VRF are not yet in the &ldquo;established&rdquo; state on E11.<pre>VXLAN-E11# <strong>show bgp sessions vrf POD{{spod}}</strong>\nTotal peers 6, established peers 4\nASN 100\n<span class=\"highlight\">VRF POD{{spod}}</span>, local ASN 100\npeers 2, <span class=\"highlight\">established peers 0</span>, local router-id 172.10.2.1\nState: I-Idle, A-Active, O-Open, E-Established, C-Closing, S-Shutdown\n\n<span class=\"highlight\">Neighbor</span>        ASN    Flaps LastUpDn|LastRead|LastWrit St Port(L/R)  Notif(S/R)\n172.11.{{spod}}.2      64437  0     00:11:07|never   |never    <span class=\"highlight\">I</span>   0/0          0/0</pre></li><li class=\"step\">On C1, define BGP peering towards E11 and E12. As we are leaking all the routes to the default VRF on C1, we need to make sure we configure a route map on C1 to make it only advertise the internet subnet and stop it from leaking all host routes from the default VRF into other VRFs. This is accomplished via an ip prefix list.<div class=\"note\">After completing this step, the POD Ubuntu-V{{spod}} VM (VXLAN domain) should be able to reach the external VM (non VXLAN domain) as one of the redundant paths to the C3 core (E11&lt;&gt;C1&lt;&gt;C3) will have been established.</div><pre>VXLAN-C1(config)# <strong>router bgp 64437</strong>\nVXLAN-C1(config-router)# <strong>neighbor 172.11.{{spod}}.1 remote-as 100</strong>\nVXLAN-C1(config-router-neighbor)# <strong>address-family ipv4 unicast</strong>\nVXLAN-C1(config-router-vrf-neighbor-af)# <strong>route-map PermitIRoute out</strong>\nVXLAN-C1(config-router-vrf-neighbor-af)# <strong>neighbor 172.12.{{spod}}.1 remote-as 100</strong>\nVXLAN-C1(config-router-vrf-neighbor)# <strong>address-family ipv4 unicast</strong>\nVXLAN-C1(config-router-vrf-neighbor-af)# <strong>route-map PermitIRoute out</strong>\nVXLAN-C1(config-router-vrf-neighbor-af)# <strong>show run bgp</strong>\n<span class=\"snip\">&lt;SNIP&gt;</span>\n!Command: show running-config bgp\n!Time: Fri May  8 21:08:29 2015\n\nversion 6.0(2)U3(7)\nfeature bgp\n\nrouter bgp 64437\n<span class=\"highlight\">neighbor 172.11.{{spod}}.1 remote-as 100</span>\n     address-family ipv4 unicast\n       <span class=\"highlight\">route-map PermitIRoute out</span>\n<span class=\"highlight\">neighbor 172.12.{{spod}}.1 remote-as 100</span>\n     address-family ipv4 unicast\n       <span class=\"highlight\">route-map PermitIRoute out</span>\nneighbor 192.168.6.14 remote-as 64438\n     address-family ipv4 unicast\n       route-map Route_Filtering_to_C3 out\n \n<span class=\"snip\">&lt;SNIP&gt;</span>\nVXLAN-C1(config-router-vrf-neighbor-af)# <strong>show route-map PermitIRoute</strong>\nroute-map PermitIRoute, permit, sequence 10\n  Match clauses:\n    ip address prefix-lists: <span class=\"highlight\">PermitIRoute</span>\n  Set clauses:\nVXLAN-C1(config-router-vrf-neighbor-af)# <strong>show ip prefix-list PermitIRoute</strong>\nip prefix-list FilterOverlay: 2 entries\n   seq 10 deny 10.0.0.0/8 le 32 <span class=\"arrow\">&larr; POD routes</span>\n   seq 50 permit 0.0.0.0/0 le 32\nip prefix-list Filter_C1Routes_ExceptLo3_To_C3: 19 entries\n   seq 1 deny 101.1.1.1/32 <span class=\"arrow\">&larr; Underlay routes</span>\n   seq 2 deny 102.1.1.1/32\n<span class=\"snip\">&lt;SNIP&gt;</span>\n   seq 50 permit 0.0.0.0/0 le 32\nip prefix-list PermitIRoute: 1 entries\n   seq 10 permit 75.162.84.0/24 <span class=\"arrow\">&larr; Internet routes</span></pre></li><li class=\"step\">Verify that there is now a route to the &ldquo;internet&rdquo; VM on Leaf L11 to which the Ubuntu-VX is connected.<pre>VXLAN-L11# <strong>show ip route 75.162.84.11 vrf POD{{spod}}</strong>\n<span class=\"highlight\">IP Route Table for VRF POD{{spod}}&quot;</span>\n&#39;*&#39; denotes best ucast next-hop\n&#39;**&#39; denotes best mcast next-hop\n&#39;[x/y]&#39; denotes [preference/metric]\n&#39;%&lt;string&gt;&#39; in via output denotes VRF &lt;string&gt;\n\n75.162.84.0/24, ubest/mbest: 1/0\n    <span class=\"highlight\">*via 104.1.1.1</span>%default, [200/0], 00:01:51, <span class=\"highlight\">bgp-100</span>, internal, tag 100 <span class=\"highlight\">(evpn)segid: 4{{spod}}00</span> tunnelid: 0x68010101 encap: 1\n     &uarr; Route to Ubuntu I is learned via VTEP of E11</pre></li><li class=\"step\">Use ping to test connectivity between POD VM and external VM (V{{spod}} and I).<pre>VXLAN\\POD{{spod}}user@ubuntu-v{{spod}}:~$ <strong>ping 75.162.84.11</strong> <span class=\"arrow\">&larr; ping external host Ubuntu-I</span>\nPING 75.162.84.11 (75.162.84.11) 56(84) bytes of data.\n64 bytes from 75.162.84.11: icmp_req=1 ttl=60 time=0.367 ms\n64 bytes from 75.162.84.11: icmp_req=2 ttl=60 time=0.409 ms\n64 bytes from 75.162.84.11: icmp_req=3 ttl=60 time=0.436 ms\n64 bytes from 75.162.84.11: icmp_req=4 ttl=60 time=0.445 ms\n^C\n--- 75.162.84.11 ping statistics ---\n4 packets transmitted, 4 received, <span class=\"highlight\">0% packet loss</span>, time 3000ms</pre></li><li class=\"step\">Verify that all BGP sessions for your POD are &lsquo;Established&rsquo;<pre>VXLAN-E11# <strong>show bgp sessions vrf POD{{spod}}</strong>\nTotal peers 37, established peers 37\n ASN 100\n VRF POD{{spod}}, local ASN 100\n peers 1, established peers 1, local router-id 172.11.2.1\n State: I-Idle, A-Active, O-Open, E-Established, C-Closing, S-Shutdown\n \n Neighbor        ASN    Flaps LastUpDn|LastRead|LastWrit St Port(L/R)  Notif(S/R)\n <span class=\"highlight\">172.11.{{spod}}.2      64437 0     2d02h   |00:00:57|00:00:24 E   179/46043      0/0</span></pre><pre>VXLAN-E12# <strong>show bgp sessions vrf POD{{spod}}</strong>\nTotal peers 37, established peers 37\n ASN 100\n VRF POD{{spod}}, local ASN 100\n peers 1, established peers 1, local router-id 172.12.2.1\n State: I-Idle, A-Active, O-Open, E-Established, C-Closing, S-Shutdown\n \n Neighbor        ASN    Flaps LastUpDn|LastRead|LastWrit St Port(L/R)  Notif(S/R)\n <span class=\"highlight\">172.12.{{spod}}.2      64437 0     2d02h   |00:00:34|00:00:03 E   179/46345      0/0</span></pre></li></ol>",
//                         "path": "use-case-1-boarder-leaf-configuration"
//                     }
//                 ]
//             },
//             {
//                 "name": "Use Case 2",
//                 "id": "529782406382",
//                 "data": "",
//                 "path": "use-case-2-instructions",
//                 "is_open": "false",
//                 "pages": [
//                     {
//                         "name": "Introduction",
//                         "id": "221521399937",
//                         "data": "<h1>Use Case 2</h1><h2>VXLAN Boarder Leaf Configuration - External Network Communication Through A Firewall</h2><p>This module is based off of the topology shown in the figure below. It demonstrates the VXLAN host&rsquo;s connectivity with external networks through the border leaf/edge switch E11, through a firewall.</p><p><img src=\"/uploads/1fc3c588-bd2c-1597-efe9-f25774563026.png\" /></p><p>One host (Ubuntu-FW{{spod}}) is connected to a VLAN ({{spod}}53) on L13 and the external &ldquo;internet&rdquo; host (Ubuntu-I) is connected to Internet core router C3. The firewall is hanging off of E11 and is in transparent mode. To facilitate this communication, the border leaf switch (referred to from here on as edge switch), E11 needs to be configured with a VTEP. The VXLAN traffic will terminate at E11 and then regular (non-VXLAN) traffic for each of the PODs will be sent through the firewall, be switched onto another VLAN ({{spod}}54), where an SVI is present, and then proceed to core C1 and C2 on the respective customer VRFs and then eventually routed to C3 through BGP. &nbsp;In our use case, we are using E11 as an edge and service leaf.<br />&nbsp;</p>",
//                         "path": "use-case-2-introduction"
//                     },
//                     {
//                         "name": "Nexus 9300 VXLAN Configuration",
//                         "id": "962990301079",
//                         "data": "<style type=\"text/css\">ol.step {\n    counter-reset: step;\n    margin-left: 3em;\n}\n\nli.step {\n    display: block;\n}\n\nli.step::before {\n    display: inline-block;\n    content: \"Step \"counter(step) \":\";\n    counter-increment: step;\n    width: 4.3em;\n    margin-left: -4.3em;\n    font-weight: bold;\n}\n\npre.configsample {\n    background-color: rgba(255, 255, 255, 0.0);\n    color: #000;\n}\n\npre>strong {\n    color: rgba(0, 188, 235, 0.8);\n}\n\nspan.snip {\n    background-color: rgba(240, 76, 55, 0.7);\n}\n\nspan.highlight {\n    background-color: rgba(110, 190, 74, 0.4);\n}\n\nspan.arrow {\n    color: rgba(251, 171, 24, 1);\n    font-weight: bold;\n}</style><h1>Use Case 2</h1><h2>Nexus 9300 VXLAN Configuration</h2><div class=\"note\">All of the routing needed for this section was already configured in the previous section, so it will not be covered in this section. The L3 VNI was configured in the previous section as well.</div><ol class=\"step\"><li class=\"step\">Open putty sessions to your POD VMs and verify you are unable to ping from Ubuntu FW{{spod}} to Ubuntu I<p><strong>Ubuntu-FW{{spod}}</strong></p><pre>VXLAN\\POD{{spod}}user@ubuntu-FW{{spod}}:~$ <strong>ping 75.162.84.11</strong> <span class=\"arrow\">&larr; ping external host Ubuntu-I</span>\nPING 75.162.84.11 (75.162.84.11) 56(84) bytes of data.\n^C\n--- 75.162.84.11 ping statistics ---\n6 packets transmitted, 0 received, <span class=\"highlight\">100% packet loss</span>, time 5040ms</pre></li><li class=\"step\">Configure edge E11 with VLAN {{spod}}53 / VXLAN VNI 42{{spod}}53.<pre>VXLAN-E11(config)# <strong>vlan {{spod}}53</strong>\nVXLAN-E11(config-vlan)# <strong>vn-segment 42{{spod}}53</strong>\nVXLAN-E11(config-vlan)# <strong>exit</strong>\n\nVXLAN-E11(config)# <strong>show run vlan {{spod}}53</strong>\n\n!Command: show running-config vlan {{spod}}53\n!Time: Fri May  8 19:19:42 2015\n\nversion 7.0(3)I1(3)\nvlan {{spod}}53\nvlan {{spod}}53\n  <span class=\"highlight\">vn-segment 42{{spod}}53</span></pre></li><li class=\"step\">Configure leaf L13 with VLAN {{spod}}53 / VXLAN VNI 42{{spod}}53.<pre>VXLAN-L13(config)# <strong>vlan {{spod}}53</strong>\nVXLAN-L13(config-vlan)# <strong>vn-segment 42{{spod}}53</strong>\nVXLAN-L13(config-vlan)# <strong>exit</strong>\n\nVXLAN-L13(config)# <strong>show run vlan {{spod}}53</strong>\n\n!Command: show running-config vlan {{spod}}53\n!Time: Fri May  8 19:19:42 2015\n\nversion 7.0(3)I1(3)\nvlan {{spod}}53\nvlan {{spod}}53\n  <span class=\"highlight\">vn-segment 42{{spod}}53</span></pre></li><li class=\"step\">Configure the interface VLAN (SVI) for the gateway of Ubuntu-FW{{spod}} on edge E11.<div class=\"note\">Traffic from Ubuntu-FW{{spod}} will be placed on VLAN {{spod}}53 on L13. From there, it will traverse VXLAN 42{{spod}}53 which terminates on E11 as VLAN {{spod}}53. The &ldquo;inside&rdquo; interface of the firewall is a member of VLAN {{spod}}53. The traffic will proceed to the firewall where it will be switched to the &ldquo;outside&rdquo; interface (via an allow any any statement), which is a member of VLAN {{spod}}54. This step configures the SVI for VLAN {{spod}}54, which is the SVI which will respond to Ubuntu-FW{{spod}} when it ARPs.</div><pre>VXLAN-E11(config)# <strong>vlan {{spod}}54</strong>\nVXLAN-E11(config-vlan)# <strong>interface vlan {{spod}}54</strong>\nVXLAN-E11(config-if)# <strong>vrf member POD{{spod}}</strong>\nVXLAN-E11(config-if)# <strong>ip address 10.{{spod}}.53.1/24</strong>\nVXLAN-E11(config-if)# <strong>no shutdown</strong>\nVXLAN-E11(config)# <strong>show run int vlan{{spod}}54</strong>\n\n!Command: show running-config interface Vlan{{spod}}54\n!Time: Fri May  8 20:07:57 2015\n\nversion 7.0(3)I1(3)\n\ninterface Vlan{{spod}}54\n  no shutdown\n  <span class=\"highlight\">vrf member POD{{spod}}</span>\n  <span class=\"highlight\">ip address 10.{{spod}}.53.1/24</span></pre></li><li class=\"step\">On the NVE configuration for E11, configure the Layer 3 VNID to use ingress replication.<pre>VXLAN-E11(config)# <strong>interface nve1</strong>\nVXLAN-E11(config-if-nve)# <strong>member vni 42{{spod}}53</strong>\nVXLAN-E11(config-if-nve-vni)# <strong>ingress-replication protocol bgp</strong>\nVXLAN-E11(config-if-nve)# <strong>show run interface nve1</strong>\n\n!Command: show running-config interface nve1\n!Time: Fri May  8 19:26:12 2015\n\nversion 7.0(3)I1(3)\n\ninterface nve1\n  no shutdown\n  source-interface loopback0\n  host-reachability protocol bgp\n  member vni 4{{spod}}00 associate-vrf\n  <span class=\"highlight\">member vni 42{{spod}}53</span>\n    <span class=\"highlight\">ingress-replication protocol bgp</span></pre></li><li class=\"step\">On the NVE configuration for L13, configure the layer 3 VNID to use ingress replication.<pre>VXLAN-L13(config)# <strong>interface nve1</strong>\nVXLAN-L13(config-if-nve)# <strong>member vni 42{{spod}}53</strong>\nVXLAN-L13(config-if-nve-vni)# <strong>ingress-replication protocol bgp</strong>\nVXLAN-L13(config-if-nve)# <strong>show run interface nve1</strong>\n\n!Command: show running-config interface nve1\n!Time: Fri May  8 19:26:12 2015\n\nversion 7.0(3)I1(3)\n\ninterface nve1\n  no shutdown\n  source-interface loopback0\n  host-reachability protocol bgp\n  member vni 4{{spod}}00 associate-vrf\n  <span class=\"highlight\">member vni 42{{spod}}53</span>\n    <span class=\"highlight\">ingress-replication protocol bgp</span></pre></li><li class=\"step\">Import/export the data VLAN VNIDs (VLAN {{spod}}53) into/out of EVPN for host MAC learning on E11.<pre>VXLAN-E11(config)# <strong>evpn</strong>\nVXLAN-E11(config-evpn)# <strong>vni 42{{spod}}53 l2</strong>\nVXLAN-E11(config-evpn-evi)# <strong>rd auto</strong>\nVXLAN-E11(config-evpn-evi)# <strong>route-target both auto</strong></pre></li><li class=\"step\">Configure BGP to include your POD&rsquo;s VLAN {{spod}}54 subnet so downstream devices know how to route traffic back to devices in your POD.<pre>VXLAN-E11(config)# <strong>router bgp 100</strong>\nVXLAN-E11(config-router)# <strong>vrf POD{{spod}}</strong>\nVXLAN-E11(config-router-vrf)# <strong>address-family ipv4 unicast</strong>\nVXLAN-E11(config-router-vrf-af)# <strong>network 10.{{spod}}.53.0/24</strong>\nVXLAN-E11(config-router-vrf-af)# <strong>show run bgp</strong>\n\n!Command: show running-config bgp\n!Time: Fri May  8 17:08:14 2015\n\nversion 7.0(3)I1(3)\nfeature bgp\n\nrouter bgp 100\n  address-family ipv4 unicast\n    network 101.1.1.1/32\n  neighbor 200.200.200.2 remote-as 100\n    update-source loopback3\n    address-family ipv4 unicast\n      send-community both\n    address-family l2vpn evpn\n      send-community both\n  neighbor 200.200.200.3 remote-as 100\n    update-source loopback3\n    address-family ipv4 unicast\n      send-community both\n    address-family l2vpn evpn\n      send-community both\n  <span class=\"highlight\">vrf POD{{spod}}</span>\n    address-family ipv4 unicast\n      advertise l2vpn evpn\n      <span class=\"highlight\">network 10.{{spod}}.53.0/24</span>\n<span class=\"snip\">&lt;SNIP&gt;</span>\nevpn\n  vni 42{{spod}}53 l2\n    rd auto\n    route-target import auto\n    route-target export auto\n<span class=\"snip\">&lt;SNIP&gt;</span></pre></li><li class=\"step\">Import/export the data VLAN VNIDs (VLAN {{spod}}53) into/out of EVPN for host MAC learning on L13.<pre>VXLAN-L13(config)# <strong>evpn</strong>\nVXLAN-L13(config-evpn)# <strong>vni 42{{spod}}53 l2</strong>\nVXLAN-L13(config-evpn-evi)# <strong>rd auto</strong>\nVXLAN-L13(config-evpn-evi)# <strong>route-target both auto</strong>\nVXLAN-L13(config-evpn-evi)# <strong>show run bgp</strong>\n\n!Command: show running-config bgp\n!Time: Fri May  8 17:08:14 2015\n\nversion 7.0(3)I1(3)\nfeature bgp\n\n<span class=\"snip\">&lt;SNIP&gt;</span>\nevpn\n  vni 42{{spod}}53 l2\n    rd auto\n    route-target import auto\n    route-target export auto\n<span class=\"snip\">&lt;SNIP&gt;</span></pre></li></ol>",
//                         "path": "use-case-2-nexus-9300-vxlan-configuration"
//                     },
//                     {
//                         "name": "Traffic Flow Verification",
//                         "id": "801988713485",
//                         "data": "<style type=\"text/css\">ol.step {\n    counter-reset: step;\n    margin-left: 3em;\n}\n\nli.step {\n    display: block;\n}\n\nli.step::before {\n    display: inline-block;\n    content: \"Step \"counter(step) \":\";\n    counter-increment: step;\n    width: 4.3em;\n    margin-left: -4.3em;\n    font-weight: bold;\n}\n\npre.configsample {\n    background-color: rgba(255, 255, 255, 0.0);\n    color: #000;\n}\n\npre>strong {\n    color: rgba(0, 188, 235, 0.8);\n}\n\nspan.snip {\n    background-color: rgba(240, 76, 55, 0.7);\n}\n\nspan.highlight {\n    background-color: rgba(110, 190, 74, 0.4);\n}\n\nspan.arrow {\n    color: rgba(251, 171, 24, 1);\n    font-weight: bold;\n}</style><h1>Use Case 2</h1><h2>Traffic Flow Verification</h2><ol class=\"step\"><li class=\"step\">Use ping to test connectivity between POD VM and external VM (FW{{spod}} and I).<pre>VXLAN\\POD{{spod}}user@ubuntu-FW{{spod}}:~$ <strong>ping 75.162.84.11</strong> <span class=\"arrow\">&larr; ping external host Ubuntu-I</span>\nPING 75.162.84.11 (75.162.84.11) 56(84) bytes of data.\n64 bytes from 75.162.84.11: icmp_req=1 ttl=60 time=0.367 ms\n64 bytes from 75.162.84.11: icmp_req=2 ttl=60 time=0.409 ms\n64 bytes from 75.162.84.11: icmp_req=3 ttl=60 time=0.436 ms\n64 bytes from 75.162.84.11: icmp_req=4 ttl=60 time=0.445 ms\n^C\n--- 75.162.84.11 ping statistics ---\n4 packets transmitted, 4 received, <span class=\"highlight\">0% packet loss</span>, time 3000ms</pre></li></ol><p>In summary, traffic is now flowing from VM Ubuntu-FW{{spod}} to the internet IP address via the firewall. Please refer to the below figure for a representation of the traffic flow:</p><p><img src=\"/uploads/e60b453c-0c85-e8a1-2031-53e1673d817b.png\" /></p><ol><li>Traffic is placed on VLAN {{spod}}53 by Ubuntu-FW{{spod}}. It is encapsulated in VXLAN 42{{spod}}53 and sent onwards to the spines.</li><li>Traffic is switched on the spines and sent towards E11 where it is decapsulated from VXLAN 42{{spod}}53 and placed on VLAN {{spod}}53.</li><li>Traffic travels from E11 to the firewall&rsquo;s inside interface. Once at the firewall, traffic matches the &ldquo;allow any any&rdquo; statement and is placed onto the firewall&rsquo;s outside interface, which is a member of VLAN {{spod}}54.</li><li>Traffic travels from the firewall&rsquo;s outside interface to interface VLAN {{spod}}54 (10.{{spod}}.53.1) on E11.</li><li>Traffic is routed from interface VLAN {{spod}}54 to the core switches.</li><li>Traffic is routed from the core switches to the internet.</li></ol><h3>Use Case 1 and Use Case 2 Summary</h3><p>This module demonstrated using VXLAN between a hardware VTEP (N9000) and another hardware VTEP (N9000) using the EVPN BGP control plane method. The VXLAN gateway extended the layer 2 network over a layer 3 transport network. Connectivity across the VXLAN overlay was tested from hosts connected to Layer 2 VLAN segments configured on different switches that were separated by a layer 3 boundary. Connectivity was tested for hosts on the same VXLANs (VXLAN bridging), on different VXLANs (VXLAN routing) and on hosts outside of the datacenter (external VXLAN), both with and without a firewall.</p>",
//                         "path": "use-case-2-traffic-flow-verification"
//                     }
//                 ]
//             },
//             {
//                 "name": "Use Case 3",
//                 "id": "634049595691",
//                 "data": "",
//                 "path": "use-case-3-instructions",
//                 "pages": [
//                     {
//                         "name": "Introduction",
//                         "id": "73774404737",
//                         "data": "<h1>Use Case 3</h1><h2>Multipod Fabric - VXLAN Across Two Data Centers</h2><p>This module is based off of the topology shown in the figure below. In this scenario we will be making the VXLAN fabric look like one big fabric so that the VLANs/Layer 2 domains that are present in DC1 will be Multipod to DC2.</p><p><img src=\"/uploads/cd5ecab9-c710-44ef-42aa-99ab7bee5385.png\" /></p><p>As was discussed earlier, DC 1 is using OSPF for the underlay and IBGP for the overlay. DC 2, however, will be using EBGP for both the underlay and overlay to demonstrate another way to configure VXLAN.</p><p>The POD configurations are the same, regardless of underlay technology, so deploying tenants in either data center is seamless.</p><p>A VM called Ubuntu-S{{spod}} is connected to leaf L21. It will be able to ping hosts Ubuntu-V{{spod}}, Ubuntu-D and Ubuntu-R to show that it can not only reach bridged networks, but also routed networks in DC 1. In addition, the Ubuntu- S{{spod}} host will be able to access the external Internet Ubuntu-I host.</p>",
//                         "path": "use-case-3-introduction"
//                     },
//                     {
//                         "name": "Underlay Configuration Verification",
//                         "id": "183991220568",
//                         "data": "<style type=\"text/css\">ol.step {\n    counter-reset: step;\n    margin-left: 3em;\n}\n\nli.step {\n    display: block;\n}\n\nli.step::before {\n    display: inline-block;\n    content: \"Step \"counter(step) \":\";\n    counter-increment: step;\n    width: 4.3em;\n    margin-left: -4.3em;\n    font-weight: bold;\n}\n\npre.configsample {\n    background-color: rgba(255, 255, 255, 0.0);\n    color: #000;\n}\n\npre>strong {\n    color: rgba(0, 188, 235, 0.8);\n}\n\nspan.snip {\n    background-color: rgba(240, 76, 55, 0.7);\n}\n\nspan.highlight {\n    background-color: rgba(110, 190, 74, 0.4);\n}\n\nspan.arrow {\n    color: rgba(251, 171, 24, 1);\n    font-weight: bold;\n}</style><h1>Use Case 3</h1><h2>Underlay Configuration Verification</h2><p>As mentioned earlier, DC2 is running EBGP for both the underlay and the overlay. The following section will highlight the relevant configurations.</p><div class=\"note\">Since all PODs are sharing hardware, the underlay configuration is already pre-configured, just like in DC1.</div><div class=\"important-note\">Only execute commands shown in the boxes, below. Any commands shown under &ldquo;Configuration Sample&rdquo; are just an example. They are not meant to be executed.</div><ol class=\"step\"><li class=\"step\">Place an IP address on each interface that is connecting to a leaf switch. Since we have only one spine (S21) in this part of the DC, there are only three interfaces which are connected to L21, E21 and E22.<p><strong>Configuration sample:</strong></p><pre class=\"configsample\">VXLAN-S21(config)# interface ethernet 2/1 \nVXLAN-S21(config-if)# no switchport\nVXLAN-S21(config-if)# ip address 192.168.3.5/30\nVXLAN-S21(config-if)# no shutdown\n\nVXLAN-S21(config)# interface ethernet 2/2 \nVXLAN-S21(config-if)# no switchport\nVXLAN-S21(config-if)# ip address 192.168.3.9/30\nVXLAN-S21(config-if)# no shutdown\n\nVXLAN-S21(config)# interface ethernet 2/3\nVXLAN-S21(config-if)# no switchport\nVXLAN-S21(config-if)# ip address 192.168.3.1/30\nVXLAN-S21(config-if)# no shutdown</pre></li><li class=\"step\">Configure the EBGP session on spine S21 to each leaf and enable EVPN. In addition, disable AS peer checks to each neighbor tag. Make sure &ldquo;NextHopUnchanged&rdquo; is configured so that the routes leaving the spine won&rsquo;t change the VTEPs address. In addition, we need to flag the neighbors to disable the peer AS checks because all of the leafs are in the same AS.<p><strong>Configuration sample:</strong></p><pre class=\"configsample\">VXLAN-S21(config)# route-map NextHopUnchanged permit 10\nVXLAN-S21(config-route-map)# set ip next-hop unchanged\nVXLAN-S21(config)# router bgp 65200\nVXLAN-S21(config-router)# address-family l2vpn evpn\nVXLAN-S21(config-router-af)# <span class=\"highlight\">nexthop route-map NextHopUnchanged</span>\nVXLAN-S21(config-router-af)# retain route-target all\nVXLAN-S21(config-router-af)# neighbor 192.168.3.2 remote-as 65201\nVXLAN-S21(config-router-neighbor)# address-family ipv4 unicast\nVXLAN-S21(config-router-neighbor-af)# <span class=\"highlight\">disable-peer-as-check</span>\nVXLAN-S21(config-router-neighbor-af)# send-community\nVXLAN-S21(config-router-neighbor-af)# exit\nVXLAN-S21(config-router-neighbor)# address-family ipv4 unicast\nVXLAN-S21(config-router-neighbor-af)# disable-peer-as-check\nVXLAN-S21(config-router-neighbor-af)# send-community both\nVXLAN-S21(config-router-neighbor-af)# address-family l2vpn evpn\nVXLAN-S21(config-router-neighbor-af)# disable-peer-as-check\nVXLAN-S21(config-router-neighbor-af)# send-community extended\nVXLAN-S21(config-router-neighbor-af)# <span class=\"highlight\">route-map NextHopUnchanged out</span></pre><div class=\"note\">The spine is in one AS and the leafs are in another. EBGP is running between the leafs and the spines.</div></li><li class=\"step\">On each leaf and edge switch (L21, E21 and E22), configure each EBGP session to the spine. Configure the &ldquo;AllowAS In&rdquo; tag to make sure that the routes with the same AS numbers are allowed to be programmed from the spines.<p><strong>Configuration sample:</strong></p><pre class=\"configsample\">VXLAN-L21(config-router-af)# neighbor 192.168.3.1 remote-as 65200\nVXLAN-L21(config-router-neighbor)# address-family ipv4 unicast\nVXLAN-L21(config-router-neighbor-af)# <span class=\"highlight\">allowas-in</span>\nVXLAN-L21(config-router-neighbor-af)# send-community both\nVXLAN-L21(config-router-neighbor-af)# address-family l2vpn evpn\nVXLAN-L21(config-router-neighbor-af)# allowas-in\nVXLAN-L21(config-router-neighbor-af)# send-community both</pre></li><li class=\"step\">Verify BGP configuration on L21 and ensure BGP is up and routes are learned on L21<pre>VXLAN-L21# <strong>sh run bgp</strong>\n \n !Command: show running-config bgp\n !Time: Sun Jan 24 01:39:39 2016\n \n version 7.0(3)I1(3)\n <span class=\"highlight\">feature bgp</span>\n \n <span class=\"highlight\">router bgp 65201</span>\n   address-family ipv4 unicast\n     network 111.1.1.1/32\n     network 111.1.1.2/32\n     network 111.1.1.3/32\n   <span class=\"highlight\">neighbor 192.168.3.1 remote-as 65200</span>\n     address-family ipv4 unicast\n       allowas-in\n       send-community both\n     address-family l2vpn evpn\n       allowas-in\n       send-community both\n \nVXLAN-L21# <strong>sh ip route bgp</strong>\n IP Route Table for VRF &quot;default&quot;\n &#39;*&#39; denotes best ucast next-hop\n &#39;**&#39; denotes best mcast next-hop\n &#39;[x/y]&#39; denotes [preference/metric]\n &#39;%&lt;string&gt;&#39; in via output denotes VRF &lt;string&gt;\n \n 75.162.84.0/24, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 101.1.1.1/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 101.1.1.10/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 102.1.1.1/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 103.1.1.1/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 104.1.1.1/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 104.1.1.2/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 104.1.1.3/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 105.1.1.1/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 105.1.1.2/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 105.1.1.3/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 106.1.1.3/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 107.1.1.3/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 108.1.1.3/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 109.1.1.1/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 109.1.1.2/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 109.1.1.3/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 110.1.1.1/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 110.1.1.2/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 110.1.1.3/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200\n 200.200.200.5/32, ubest/mbest: 1/0\n     *via 192.168.3.1, [20/0], 2d03h, bgp-65201, external, tag 65200</pre></li><li class=\"step\">On the edge router E21 and E22, configure the EBGP session to connect the underlay to the external router. This router also provides external connectivity to the internet as well as routes to connect the DC edges together.<div class=\"note\">In the configuration sample below, only E21 is shown. However, E21 and E22 are configured the same way.</div><p><strong>Configuration sample:</strong></p><pre class=\"configsample\">VXLAN-E21(config)# router bgp 65201\nVXLAN-E21(config-router)# neighbor 192.168.3.5 remote-as 65200\nVXLAN-E21(config-router-neighbor)# address-family ipv4 unicast \nVXLAN-E21(config-router-neighbor-af)# allow as-in\nVXLAN-E21(config-router-neighbor-af)# send-community both\nVXLAN-E21(config-router-neighbor-af)# address-family l2vpn evpn\nVXLAN-E21(config-router-neighbor-af)# <span class=\"highlight\">allowas-in</span>\nVXLAN-E21(config-router-neighbor-af)# send-community both\nVXLAN-E21(config-router-neighbor-af)# <span class=\"highlight\">route-map NextHopUnchanged out</span>\nVXLAN-E21(config-router-neighbor-af)# neighbor 192.168.150.6 remote-as 64439\nVXLAN-E21(config-router-neighbor)# address-family ipv4 unicast\nVXLAN-E21(config-router-neighbor-af)# route-map Route_Filtering_to_C1-C2 out</pre></li><li class=\"step\">On edge switches E21, E22, E11, and E12 configure EBGP multihop neighbor commands. This will advertise all the routes from DC1 (including hosts and underlay routes) to DC2.<div class=\"note\">In the configuration sample below, only E21 is shown. However, E21, E22, E11, and E12 are configured the same way.</div><div class=\"note\">To stretch the fabric across two Datacenters, we need to use EGP multihop between the spines and between the edge switches. This will create one big Multipod fabric.</div><p><strong>Configuration sample:</strong></p><pre class=\"configsample\">VXLAN-E21(config)# router bgp 65201\nVXLAN-E21(config-router)# address-family ipv4 unicast\nVXLAN-E21(config-router-af)# network 109.1.1.1/32\nVXLAN-E21(config-router-af)# network 109.1.1.2/32\nVXLAN-E21(config-router-af)# network 109.1.1.3/32\nVXLAN-E21(config-router-af)# maximum-paths 6\nVXLAN-E21(config-router-af)# address-family l2vpn evpn\nVXLAN-E21(config-router-af)# <span class=\"highlight\">nexthop route-map NextHopUnchanged</span>\nVXLAN-E21(config-router-af)# retain route-target all\nVXLAN-E21(config-router-af)# <span class=\"highlight\">neighbor 104.1.1.3 remote-as 100</span>\nVXLAN-E21(config-router-neighbor)# update-source loopback3\nVXLAN-E21(config-router-neighbor)# <span class=\"highlight\">ebgp-multihop 5</span>\nVXLAN-E21(config-router-neighbor)# address-family ipv4 unicast\nVXLAN-E21(config-router-neighbor-af)# send-community both\nVXLAN-E21(config-router-neighbor-af)# <span class=\"highlight\">route-map Lo3Filter_to_PeerDC_EdgeRouters out</span>\nVXLAN-E21(config-router-neighbor-af)# soft-reconfiguration inbound always\nVXLAN-E21(config-router-neighbor-af)# address-family l2vpn evpn\nVXLAN-E21(config-router-neighbor-af)# send-community both\nVXLAN-E21(config-router-neighbor-af)# <span class=\"highlight\">route-map NextHopUnchanged out</span>\nVXLAN-E21(config-router-neighbor-af)# <span class=\"highlight\">neighbor 105.1.1.3 remote-as 100</span>\nVXLAN-E21(config-router-neighbor)# update-source loopback3\nVXLAN-E21(config-router-neighbor)# <span class=\"highlight\">ebgp-multihop 5</span>\nVXLAN-E21(config-router-neighbor)# address-family ipv4 unicast\nVXLAN-E21(config-router-neighbor-af)# send-community both\nVXLAN-E21(config-router-neighbor-af)# <span class=\"highlight\">route-map Lo3Filter_to_PeerDC_EdgeRouters out</span>\nVXLAN-E21(config-router-neighbor-af)# soft-reconfiguration inbound always\nVXLAN-E21(config-router-neighbor-af)# address-family l2vpn evpn\nVXLAN-E21(config-router-neighbor-af)# send-community both\nVXLAN-E21(config-router-neighbor-af)# <span class=\"highlight\">route-map NextHopUnchanged out</span></pre></li><li class=\"step\">Verify BGP multihop configuration on E11, E12, E21, and E22.<div class=\"note\">As is shown below, all edge switches should be configured to retain route targets and &ldquo;NextHop Unchanged&rdquo; should be configured to make sure all the EVPN routes are advertised with the right VTEP addresses.</div><div class=\"note\">A template could easily be used in the configuration below to allow for easier configuration of a large number of neighbors.</div><pre>VXLAN-E11# <strong>show run bgp</strong>\n !Command: show running-config bgp\n !Time: Sun Jan 24 02:05:53 2016\n \n version 7.0(3)I1(3)\n feature bgp\n \n <span class=\"highlight\">router bgp 100</span>\n   <span class=\"highlight\">address-family l2vpn evpn</span>\n     <span class=\"highlight\">nexthop route-map NextHopUnchanged</span>\n     <span class=\"highlight\">retain route-target all</span>\n   neighbor 109.1.1.3 remote-as 65201\n     update-source loopback3\n     <span class=\"highlight\">ebgp-multihop 5</span>\n     address-family ipv4 unicast\n       send-community both\n       route-map Lo3Filter_to_PeerDC_EdgeRouters out\n       soft-reconfiguration inbound always\n     <span class=\"highlight\">address-family l2vpn evpn</span>\n       send-community both\n       <span class=\"highlight\">route-map NextHopUnchanged out</span>\n   neighbor 110.1.1.3 remote-as 65201\n     update-source loopback3\n     <span class=\"highlight\">ebgp-multihop 5</span>\n     address-family ipv4 unicast\n       send-community both\n       route-map Lo3Filter_to_PeerDC_EdgeRouters out\n       soft-reconfiguration inbound always\n     <span class=\"highlight\">address-family l2vpn evpn</span>\n       send-community both\n       <span class=\"highlight\">route-map NextHopUnchanged out</span>\n<span class=\"snip\">&lt;SNIP&gt;</span></pre><pre>VXLAN-E12# <strong>show run bgp</strong>\n!Command: show running-config bgp\n !Time: Sun Jan 24 02:04:02 2016\n \n version 7.0(3)I1(3)\n feature bgp\n \n <span class=\"highlight\">router bgp 100</span>\n   <span class=\"highlight\">address-family l2vpn evpn</span>\n     <span class=\"highlight\">nexthop route-map NextHopUnchanged</span>\n     <span class=\"highlight\">retain route-target all</span>\n   neighbor 109.1.1.3 remote-as 65201\n     update-source loopback3\n     <span class=\"highlight\">ebgp-multihop 5</span>\n     address-family ipv4 unicast\n       send-community both\n       route-map Lo3Filter_to_PeerDC_EdgeRouters out\n       soft-reconfiguration inbound always\n     <span class=\"highlight\">address-family l2vpn evpn</span>\n       send-community both\n       <span class=\"highlight\">route-map NextHopUnchanged out</span>\n   neighbor 110.1.1.3 remote-as 65201\n     update-source loopback3\n     <span class=\"highlight\">ebgp-multihop 5</span>\n     address-family ipv4 unicast\n       send-community both\n       route-map Lo3Filter_to_PeerDC_EdgeRouters out\n       soft-reconfiguration inbound always\n     <span class=\"highlight\">address-family l2vpn evpn</span>\n       send-community both\n       <span class=\"highlight\">route-map NextHopUnchanged out</span>\n  <span class=\"snip\">&lt;SNIP&gt;</span></pre><pre>VXLAN-E21# <strong>show run bgp</strong>\n !Command: show running-config bgp\n !Time: Sun Jan 24 02:11:33 2016\n \n version 7.0(3)I1(3)\n feature bgp\n \n <span class=\"highlight\">router bgp 65201</span>\n   <span class=\"highlight\">address-family l2vpn evpn</span>\n     <span class=\"highlight\">nexthop route-map NextHopUnchanged</span>\n     <span class=\"highlight\">retain route-target all</span>\n   neighbor 104.1.1.3 remote-as 100\n     update-source loopback3\n     <span class=\"highlight\">ebgp-multihop 5</span>\n     address-family ipv4 unicast\n       send-community both\n       route-map Lo3Filter_to_PeerDC_EdgeRouters out\n       soft-reconfiguration inbound always\n     <span class=\"highlight\">address-family l2vpn evpn</span>\n       send-community both\n       <span class=\"highlight\">route-map NextHopUnchanged out</span>\n   neighbor 105.1.1.3 remote-as 100\n     update-source loopback3\n     <span class=\"highlight\">ebgp-multihop 5</span>\n     address-family ipv4 unicast\n       send-community both\n       route-map Lo3Filter_to_PeerDC_EdgeRouters out\n       soft-reconfiguration inbound always\n     <span class=\"highlight\">address-family l2vpn evpn</span>\n       send-community both\n       <span class=\"highlight\">route-map NextHopUnchanged out</span>\n  <span class=\"snip\">&lt;SNIP&gt;</span></pre><pre>VXLAN-E22# <strong>show run bgp</strong>\n !Command: show running-config bgp\n !Time: Sun Jan 24 02:25:02 2016\n \n version 7.0(3)I1(3)\n feature bgp\n \n <span class=\"highlight\">router bgp 65201</span>\n   <span class=\"highlight\">address-family l2vpn evpn</span>\n     <span class=\"highlight\">nexthop route-map NextHopUnchanged</span>\n     <span class=\"highlight\">retain route-target all</span>\n   neighbor 104.1.1.3 remote-as 100\n     update-source loopback3\n     <span class=\"highlight\">ebgp-multihop 5</span>\n     address-family ipv4 unicast\n       send-community both\n       route-map Lo3Filter_to_PeerDC_EdgeRouters out\n       soft-reconfiguration inbound always\n     <span class=\"highlight\">address-family l2vpn evpn</span>\n       send-community both\n       <span class=\"highlight\">route-map NextHopUnchanged out</span>\n   neighbor 105.1.1.3 remote-as 100\n     update-source loopback3\n     ebgp-multihop 5\n     address-family ipv4 unicast\n       send-community both\n       route-map Lo3Filter_to_PeerDC_EdgeRouters out\n       soft-reconfiguration inbound always\n     <span class=\"highlight\">address-family l2vpn evpn</span>\n       send-community both\n       <span class=\"highlight\">route-map NextHopUnchanged out</span>\n<span class=\"snip\">&lt;SNIP&gt;</span></pre></li><li class=\"step\">Verify BGP multihop neighbors on E11, E12, E21, and E22.<div class=\"note\">Each edge switch will only have 2 multihop neighbors. Only neighbors in the remote datacenter will be multihop. Devices in the local datacenter will peer through the local spine switches.</div><pre>VXLAN-E11# <strong>show ip bgp neighbors</strong>\n<span class=\"snip\">&lt;SNIP&gt;</span>\n <span class=\"highlight\">BGP neighbor is 109.1.1.3,  remote AS 65201</span>, ebgp link,  Peer index 1\n   BGP version 4, remote router ID 109.1.1.1\n   BGP state = Established, up for 2d08h\n   Using loopback3 as update source for this peer\n   <span class=\"highlight\">External BGP peer might be upto 5 hops away</span>\n   Last read 00:00:44, hold time = 180, keepalive interval is 60 seconds\n   Last written 00:00:34, keepalive timer expiry due 00:00:25\n   Received 6136 messages, 0 notifications, 0 bytes in queue\n   Sent 4084 messages, 0 notifications, 0 bytes in queue\n   Connections established 1, dropped 0\n   Last reset by us never, due to No error\n   Last reset by peer never, due to No error\n \n <span class=\"highlight\">BGP neighbor is 110.1.1.3,  remote AS 65201</span>, ebgp link,  Peer index 2\n   BGP version 4, remote router ID 110.1.1.1\n   BGP state = Established, up for 2d08h\n   Using loopback3 as update source for this peer\n   <span class=\"highlight\">External BGP peer might be upto 5 hops away</span>\n   Last read 00:00:45, hold time = 180, keepalive interval is 60 seconds\n   Last written 00:00:34, keepalive timer expiry due 00:00:25\n   Received 6060 messages, 0 notifications, 0 bytes in queue\n   Sent 4087 messages, 0 notifications, 0 bytes in queue\n   Connections established 1, dropped 0\n   Last reset by us never, due to No error\n   Last reset by peer never, due to No error\n<span class=\"snip\">&lt;SNIP&gt;</span></pre><pre>VXLAN-E12# <strong>show ip bgp neighbors</strong>\n<span class=\"snip\">&lt;SNIP&gt;</span>\n <span class=\"highlight\">BGP neighbor is 109.1.1.3,  remote AS 65201</span>, ebgp link,  Peer index 1\n   BGP version 4, remote router ID 109.1.1.1\n   BGP state = Established, up for 2d08h\n   Using loopback3 as update source for this peer\n   <span class=\"highlight\">External BGP peer might be upto 5 hops away</span>\n   Last read 00:00:46, hold time = 180, keepalive interval is 60 seconds\n   Last written 00:00:35, keepalive timer expiry due 00:00:24\n   Received 3654 messages, 0 notifications, 0 bytes in queue\n   Sent 3983 messages, 0 notifications, 0 bytes in queue\n   Connections established 1, dropped 0\n   Last reset by us never, due to No error\n   Last reset by peer never, due to No error\n \n <span class=\"highlight\">BGP neighbor is 110.1.1.3,  remote AS 65201</span>, ebgp link,  Peer index 2\n   BGP version 4, remote router ID 110.1.1.1\n   BGP state = Established, up for 2d08h\n   Using loopback3 as update source for this peer\n   <span class=\"highlight\">External BGP peer might be upto 5 hops away</span>\n   Last read 00:00:47, hold time = 180, keepalive interval is 60 seconds\n   Last written 00:00:35, keepalive timer expiry due 00:00:24\n   Received 3573 messages, 0 notifications, 0 bytes in queue\n   Sent 3983 messages, 0 notifications, 0 bytes in queue\n   Connections established 1, dropped 0\n   Last reset by us never, due to No error\n   Last reset by peer never, due to No error\n<span class=\"snip\">&lt;SNIP&gt;</span></pre><pre>VXLAN-E21# <strong>show ip bgp neighbors</strong>\n<span class=\"snip\">&lt;SNIP&gt;</span>\n <span class=\"highlight\">BGP neighbor is 104.1.1.3,  remote AS 100</span>, ebgp link,  Peer index 1\n   BGP version 4, remote router ID 104.1.1.1\n   BGP state = Established, up for 2d09h\n   Using loopback3 as update source for this peer\n   <span class=\"highlight\">External BGP peer might be upto 5 hops away</span>\n   Last read 00:00:40, hold time = 180, keepalive interval is 60 seconds\n   Last written 00:00:50, keepalive timer expiry due 00:00:09\n   Received 4108 messages, 0 notifications, 0 bytes in queue\n   Sent 6160 messages, 0 notifications, 0 bytes in queue\n   Connections established 1, dropped 0\n   Last reset by us never, due to No error\n   Last reset by peer never, due to No error\n \n<span class=\"highlight\">BGP neighbor is 105.1.1.3,  remote AS 100</span>, ebgp link,  Peer index 2\n   BGP version 4, remote router ID 105.1.1.1\n   BGP state = Established, up for 2d09h\n   Using loopback3 as update source for this peer\n   <span class=\"highlight\">External BGP peer might be upto 5 hops away</span>\n   Last read 00:00:40, hold time = 180, keepalive interval is 60 seconds\n   Last written 00:00:50, keepalive timer expiry due 00:00:09\n   Received 3986 messages, 0 notifications, 0 bytes in queue\n   Sent 3657 messages, 0 notifications, 0 bytes in queue\n   Connections established 1, dropped 0\n   Last reset by us never, due to No error\n   Last reset by peer never, due to No error\n<span class=\"snip\">&lt;SNIP&gt;</span></pre><pre>VXLAN-E22# <strong>show ip bgp neighbors</strong>\n<span class=\"snip\">&lt;SNIP&gt;</span>\n <span class=\"highlight\">BGP neighbor is 104.1.1.3,  remote AS 100</span>, ebgp link,  Peer index 1\n   BGP version 4, remote router ID 104.1.1.1\n   BGP state = Established, up for 2d09h\n   Using loopback3 as update source for this peer\n   <span class=\"highlight\">External BGP peer might be upto 5 hops away</span>\n   Last read 00:00:29, hold time = 180, keepalive interval is 60 seconds\n   Last written 00:00:39, keepalive timer expiry due 00:00:20\n   Received 4113 messages, 0 notifications, 0 bytes in queue\n   Sent 6086 messages, 0 notifications, 0 bytes in queue\n   Connections established 1, dropped 0\n   Last reset by us never, due to No error\n   Last reset by peer never, due to No error\n\n<span class=\"highlight\">BGP neighbor is 105.1.1.3,  remote AS 100</span>, ebgp link,  Peer index 2\n   BGP version 4, remote router ID 105.1.1.1\n   BGP state = Established, up for 2d09h\n   Using loopback3 as update source for this peer\n   <span class=\"highlight\">External BGP peer might be upto 5 hops away</span>\n   Last read 00:00:28, hold time = 180, keepalive interval is 60 seconds\n   Last written 00:00:39, keepalive timer expiry due 00:00:20\n   Received 3988 messages, 0 notifications, 0 bytes in queue\n   Sent 3578 messages, 0 notifications, 0 bytes in queue\n   Connections established 1, dropped 0\n   Last reset by us never, due to No error\n   Last reset by peer never, due to No error\n<span class=\"snip\">&lt;SNIP&gt;</span></pre></li></ol>",
//                         "path": "use-case-3-underlay-configuration-verification"
//                     },
//                     {
//                         "name": "Pod and Overlay Configuration",
//                         "id": "815607222947",
//                         "data": "<style type=\"text/css\">ol.step {\n    counter-reset: step;\n    margin-left: 3em;\n}\n\nli.step {\n    display: block;\n}\n\nli.step::before {\n    display: inline-block;\n    content: \"Step \"counter(step) \":\";\n    counter-increment: step;\n    width: 4.3em;\n    margin-left: -4.3em;\n    font-weight: bold;\n}\n\npre.configsample {\n    background-color: rgba(255, 255, 255, 0.0);\n    color: #000;\n}\n\npre>strong {\n    color: rgba(0, 188, 235, 0.8);\n}\n\nspan.snip {\n    background-color: rgba(240, 76, 55, 0.7);\n}\n\nspan.highlight {\n    background-color: rgba(110, 190, 74, 0.4);\n}\n\nspan.arrow {\n    color: rgba(251, 171, 24, 1);\n    font-weight: bold;\n}</style><h1>Use Case 3</h1><h2>Pod and Overlay Configuration</h2><p>In this section, each POD user will configure their PODs as if they are deploying a tenant. This is similar to what we did earlier in DC 1.</p><ol class=\"step\"><li class=\"step\">Open putty sessions to your POD VMs and verify you are unable to ping from Ubuntu-S{{spod}} to the Ubuntu-I or Ubuntu-V{{spod}} VMs.<p><strong>Ubuntu-S{{spod}} VM</strong></p><pre>VXLAN\\POD{{spod}}user@ubuntu-S{{spod}}:~$ <strong>ping 75.162.84.11</strong> <span class=\"arrow\">&larr; ping external host Ubuntu-I</span>\nPING 75.162.84.11 (75.162.84.11) 56(84) bytes of data.\n^C\n--- 75.162.84.11 ping statistics ---\n6 packets transmitted, 0 received, <span class=\"highlight\">100% packet loss</span>, time 5040ms\nVXLAN\\POD{{spod}}user@ubuntu-S{{spod}}:~$ <strong>ping 10.{{spod}}.51.11</strong> <span class=\"arrow\">&larr; ping host ubuntu-V{{spod}}</span>\nPING 10.{{spod}}.51.11 (10.{{spod}}.51.11) 56(84) bytes of data.\n^C\n--- 10.{{spod}}.51.11 ping statistics ---\n6 packets transmitted, 0 received, <span class=\"highlight\">100% packet loss</span>, time 5040ms</pre></li><li class=\"step\">Add VLAN to VNID mapping for the L3 VNI on E21. The VLAN number will be {{spod}}00 and will map to VXLAN VNI 4{{spod}}00. Remember: we don&rsquo;t need to define VXLAN {{spod}}51 and {{spod}}52 on the edge routers, as VLAN {{spod}}00 will be carrying all the host routes for all the VLANs in the tenant.<div class=\"note\">There are two edge switches (E21 and E22). To save time, you will only issue the below commands on E21. Then, you will copy paste the entire set of commands for E22 on to E22 using the provided configuration file (this file is located on your desktop).</div><pre>VXLAN-E21(config)# <strong>vlan {{spod}}00</strong>\nVXLAN-E21(config-vlan)# <strong>vn-segment 4{{spod}}00</strong>\nVXLAN-E21(config-vlan)# <strong>exit</strong>\nVXLAN-E21(config)# <strong>show run vlan {{spod}}00</strong>\n\n!Command: show running-config vlan {{spod}}00\n!Time: Fri May  8 19:19:42 2015\n\nversion 7.0(3)I1(3)\nvlan {{spod}}00\nvlan {{spod}}00\n  <span class=\"highlight\">vn-segment 4{{spod}}00</span></pre></li><li class=\"step\">On the NVE configuration for E21, associate the POD VRF to the the Layer 3 VNID used for control plane traffic ({{spod}}00).<pre>VXLAN-E21(config)# <strong>interface nve1</strong>\nVXLAN-E21(config-if-nve)# <strong>member vni 4{{spod}}00 associate-vrf</strong>\nVXLAN-E21(config-if-nve)# <strong>show run interface nve1</strong>\n\n!Command: show running-config interface nve1\n!Time: Fri May  8 19:26:12 2015\n\nversion 7.0(3)I1(3)\n\ninterface nve1\n  no shutdown\n  source-interface loopback0\n  host-reachability protocol bgp\n  <span class=\"highlight\">member vni 4{{spod}}00 associate-vrf</span></pre></li><li class=\"step\">Create the VRF for the POD, associate the control plane VLAN {{spod}}00 VNID to the VRF and specify the EVPN session used (auto selection).<pre>VXLAN-E21(config)# <strong>vrf context POD{{spod}}</strong>\nVXLAN-E21(config-vrf)# <strong>vni 4{{spod}}00</strong>\nVXLAN-E21(config-vrf)# <strong>rd auto</strong>\nVXLAN-E21(config-vrf)# <strong>address-family ipv4 unicast</strong>\nVXLAN-E21(config-vrf-af-ipv4)# <strong>route-target import 65000:{{spod}}</strong>\nVXLAN-E21(config-vrf-af-ipv4)# <strong>route-target import 65000:{{spod}} evpn</strong>\nVXLAN-E21(config-vrf-af-ipv4)# <strong>route-target export 65000:{{spod}}</strong>\nVXLAN-E21(config-vrf-af-ipv4)# <strong>route-target export 65000:{{spod}} evpn</strong>\nVXLAN-E21(config-vrf-af-ipv4)# <strong>show run vrf POD{{spod}}</strong>\n!Command: show running-config vrf POD{{spod}}\n!Time: Fri May  8 19:29:04 2015\n\nversion 7.0(3)I1(3)\n<span class=\"highlight\">vrf context POD{{spod}}</span>\n   <span class=\"highlight\">vni 4{{spod}}00</span>\n   rd auto\n   address-family ipv4 unicast\n     <span class=\"highlight\">route-target import 65000:{{spod}}</span>\n     <span class=\"highlight\">route-target import 65000:{{spod}} evpn</span>\n     <span class=\"highlight\">route-target export 65000:{{spod}}</span>\n     <span class=\"highlight\">route-target export 65000:{{spod}} evpn</span></pre></li><li class=\"step\">Configure the interface VLAN (SVI) for the control VLAN on the POD{{spod}} VRF.<pre>VXLAN-E21(config)# <strong>interface vlan {{spod}}00</strong>\nVXLAN-E21(config-if)# <strong>vrf member POD{{spod}}</strong>\nVXLAN-E21(config-if)# <strong>ip forward</strong>\nVXLAN-E21(config-if)# <strong>no shutdown</strong>\nVXLAN-E21(config)# <strong>show run int vlan{{spod}}00</strong>\n\n!Command: show running-config interface Vlan{{spod}}00\n!Time: Fri May  8 20:07:57 2015\n\nversion 7.0(3)I1(3)\n\ninterface Vlan{{spod}}00\n  no shutdown\n  <span class=\"highlight\">vrf member POD{{spod}}</span>\n  <span class=\"highlight\">ip forward</span></pre></li><li class=\"step\">Verify your control VNI (L3 VNI) is in an up state under the NVE<pre>VXLAN-E21(config)# <strong>show nve vni</strong>\nCodes: CP - Control Plane        DP - Data Plane\n       UC - Unconfigured         SA - Suppress ARP\n\nInterface VNI      Multicast-group   State Mode Type [BD/VRF]      Flags\n--------- -------- ----------------- ----- ---- ------------------ -----\nnve1      <span class=\"highlight\">4{{spod}}00</span>     n/a               <span class=\"highlight\">Up</span>    CP   L3 [POD{{spod}}]</pre></li><li class=\"step\">Copy paste the provided file on your desktop into E22. This file is titled &ldquo;E22&rdquo;.<div class=\"important-note\">It is vital that you do not skip this step!</div></li><li class=\"step\">Configure switch L21 just like the other switches in DC1 were configured (note that this switch is not VPC). Add VLAN to VNID mappings. The value specified with the vn-segment keyword is the VNID value sent in the VXLAN header. Extend VLAN X51 and assign it to the same VXLAN ID as we did in the first DC.<pre>VXLAN-L21(config)# <strong>vlan {{spod}}00</strong>\nVXLAN-L21(config-vlan)# <strong>vn-segment 4{{spod}}00</strong>\nVXLAN-L21(config-vlan)# <strong>vlan {{spod}}51</strong>\nVXLAN-L21(config-vlan)# <strong>vn-segment 42{{spod}}51</strong>\nVXLAN-L21(config-vlan)# <strong>exit</strong>\nVXLAN-L21# <strong>show run vlan {{spod}}00,{{spod}}51</strong>\n\n!Command: show running-config vlan {{spod}}00, {{spod}}51\n!Time: Fri May  8 15:16:57 2015\n\nversion 7.0(3)I1(3)\nvlan {{spod}}00,{{spod}}51\nvlan {{spod}}00\n  <span class=\"highlight\">vn-segment 4{{spod}}00</span>\nvlan 251\n  <span class=\"highlight\">vn-segment 42{{spod}}51</span></pre></li><li class=\"step\">Configure the interface VLAN (SVI) for the gateway of Ubuntu-S{{spod}} on L21.<pre>VXLAN-L21(config)# <strong>interface Vlan{{spod}}00</strong>\nVXLAN-L21(config-if)# <strong>no shutdown</strong>\nVXLAN-L21(config-if)# <strong>vrf member POD{{spod}}</strong>\nVXLAN-L21(config)# <strong>interface vlan {{spod}}51</strong>\nVXLAN-L21(config-if)# <strong>vrf member POD{{spod}}</strong>\nVXLAN-L21(config-if)# <strong>ip address 10.{{spod}}.51.1/24</strong>\nVXLAN-L21(config-if)# <strong>no shutdown</strong>\nVXLAN-L21(config-if)# <strong>fabric forwarding mode anycast-gateway</strong>\nVXLAN-L21# <strong>show run int vlan {{spod}}00, vlan {{spod}}51</strong>\n \n !Command: show running-config interface Vlan{{spod}}00, interface Vlan{{spod}}51\n !Time: Sun Jan 24 03:21:30 2016\n \n version 7.0(3)I1(3)\n \n interface Vlan{{spod}}00\n   no shutdown\n   <span class=\"highlight\">vrf member POD{{spod}}</span>\n \n interface Vlan{{spod}}51\n   no shutdown\n   <span class=\"highlight\">vrf member POD{{spod}}</span>\n   ip address 10.{{spod}}.51.1/24\n   fabric forwarding mode anycast-gateway</pre></li><li class=\"step\">On the NVE configuration for L21, associate the Layer 3 VNI and Layer 2 VNI as we did in DC1 on L13.<pre>VXLAN-L21(config)# <strong>int nve1</strong>\nVXLAN-L21(config-if-nve)# <strong>member vni 4{{spod}}00 associate-vrf</strong>\nVXLAN-L21(config-if-nve)# <strong>member vni 42{{spod}}51</strong>\nVXLAN-L21(config-if-nve-vni)# <strong>ingress-replication protocol bgp</strong>\nVXLAN-L21(config-if-nve-vni)# <strong>suppress-arp</strong>\n\nVXLAN-L21(config)# <strong>vrf context POD{{spod}}</strong>\nVXLAN-L21(config-vrf)# <strong>vni 4{{spod}}00</strong>\nVXLAN-L21(config-vrf)# <strong>rd auto</strong>\nVXLAN-L21(config-vrf)# <strong>address-family ipv4 unicast</strong>\nVXLAN-L21(config-vrf-af-ipv4)# <strong>route-target import 65000:{{spod}}</strong>\nVXLAN-L21(config-vrf-af-ipv4)# <strong>route-target import 65000:{{spod}} evpn</strong>\nVXLAN-L21(config-vrf-af-ipv4)# <strong>route-target export 65000:{{spod}}</strong>\nVXLAN-L21(config-vrf-af-ipv4)# <strong>route-target export 65000:{{spod}} evpn</strong>\n\nVXLAN-L21# <strong>show run int nve1</strong>\n!Command: show running-config interface nve1\n !Time: Sun Jan 24 03:24:16 2016\n \n version 7.0(3)I1(3)\n \n interface nve1\n   no shutdown\n   source-interface loopback0\n   host-reachability protocol bgp\n   <span class=\"highlight\">member vni 4{{spod}}00 associate-vrf</span>\n   <span class=\"highlight\">member vni 42{{spod}}51</span>\n     <span class=\"highlight\">suppress-arp</span>\n     <span class=\"highlight\">ingress-replication protocol bgp</span>\n<span class=\"snip\">&lt;SNIP&gt;</span>\n\nVXLAN-L21# <strong>show run vrf POD{{spod}}</strong>\n !Command: show running-config vrf POD{{spod}}\n !Time: Sun Jan 24 03:30:58 2016\n \n version 7.0(3)I1(3)\n \n vrf context POD{{spod}}\n   vni 4{{spod}}00\n   rd auto\n   <span class=\"highlight\">address-family ipv4 unicast</span>\n     <span class=\"highlight\">route-target import 65000:{{spod}}</span>\n     <span class=\"highlight\">route-target import 65000:{{spod}} evpn</span>\n     <span class=\"highlight\">route-target export 65000:{{spod}}</span>\n     <span class=\"highlight\">route-target export 65000:{{spod}} evpn</span>\n<span class=\"snip\">&lt;SNIP&gt;</span></pre></li><li class=\"step\">Import/export the data VLAN VNIDs /L2 VNI (VLAN {{spod}}51) into/out of EVPN for host MAC learning on L21.<pre>VXLAN-L21(config)# <strong>evpn</strong>\nVXLAN-L21(config-evpn)# <strong>vni 42{{spod}}51 l2</strong>\nVXLAN-L21(config-evpn-evi)# <strong>rd auto</strong>\nVXLAN-L21(config-evpn-evi)# <strong>route-target import {{spod}}:42{{spod}}51</strong>\nVXLAN-L21(config-evpn-evi)# <strong>route-target export {{spod}}:42{{spod}}51</strong></pre></li><li class=\"step\">Configure BGP on L21 to advertise the VRF POD{{spod}} routes.<pre>VXLAN-L21(config)# <strong>router bgp 65201</strong>\nVXLAN-L21(config-router)# <strong>vrf POD{{spod}}</strong>\nVXLAN-L21(config-router-vrf)# <strong>address-family ipv4 unicast</strong>\nVXLAN-L21(config-router-vrf-af)# <strong>advertise l2vpn evpn</strong>\n \nVXLAN-L21# <strong>show run bgp</strong>\n!Command: show running-config bgp\n !Time: Sun Jan 24 03:35:29 2016\n \n version 7.0(3)I1(3)\n feature bgp\n \n router bgp 65201\n   address-family ipv4 unicast\n     network 111.1.1.1/32\n     network 111.1.1.2/32\n     network 111.1.1.3/32\n   neighbor 192.168.3.1 remote-as 65200\n     address-family ipv4 unicast\n       allowas-in\n       send-community both\n     address-family l2vpn evpn\n       allowas-in\n       send-community both\n       advertise l2vpn evpn\n   <span class=\"highlight\">vrf POD{{spod}}</span>\n     address-family ipv4 unicast\n       <span class=\"highlight\">advertise l2vpn evpn</span>\n<span class=\"snip\">&lt;SNIP&gt;</span>\n evpn\n   <span class=\"highlight\">vni 42{{spod}}51 l2</span>\n     <span class=\"highlight\">rd auto</span>\n     <span class=\"highlight\">route-target import {{spod}}:42{{spod}}51</span>\n     <span class=\"highlight\">route-target export {{spod}}:42{{spod}}51</span>\n\n<span class=\"snip\">&lt;SNIP&gt;</span></pre></li><li class=\"step\">Configure the EBGP session for your POD VRF on E21 to leak the routes to the default VRF to provide external connectivity to DC2.<pre>VXLAN-E21(config)# <strong>interface Ethernet1/21.{{spod}}</strong>\nVXLAN-E21(config-subif)# <strong>description VRFsubif_to_C2_POD{{spod}}</strong>\nVXLAN-E21(config-subif)# <strong>encapsulation dot1q 21{{spod}}</strong>\nVXLAN-E21(config-subif)# <strong>vrf member POD{{spod}}</strong>\nVXLAN-E21(config-subif)# <strong>ip address 172.21.{{spod}}.1/30</strong>\nVXLAN-E21(config-subif)# <strong>no shutdown</strong>\nVXLAN-E21(config-subif)# <strong>exit</strong>\nVXLAN-E21(config)# <strong>router bgp 65201</strong>\nVXLAN-E21(config-router)# <strong>vrf POD{{spod}}</strong>\nVXLAN-E21(config-router-vrf)# <strong>address-family ipv4 unicast</strong>\nVXLAN-E21(config-router-vrf-af)# <strong>advertise l2vpn evpn</strong>\nVXLAN-E21(config-router-vrf-af)# <strong>neighbor 172.21.{{spod}}.2 remote-as 64439</strong>\nVXLAN-E21(config-router-vrf-neighbor)# <strong>address-family ipv4 unicast</strong>\n \nVXLAN-E21# <strong>show run vrf POD{{spod}}</strong>\n \n !Command: show running-config vrf POD{{spod}}\n !Time: Sun Jan 24 03:33:41 2016\n \n version 7.0(3)I1(3)\n <span class=\"snip\">&lt;SNIP&gt;</span> \n interface Ethernet1/21.{{spod}}\n   <span class=\"highlight\">vrf member POD{{spod}}</span>\n <span class=\"snip\">&lt;SNIP&gt;</span>\n router bgp 65201\n   vrf POD{{spod}}\n     address-family ipv4 unicast\n       advertise l2vpn evpn\n     <span class=\"highlight\">neighbor 172.21.{{spod}}.2</span>\n       <span class=\"highlight\">remote-as 64439</span>\n       <span class=\"highlight\">address-family ipv4 unicast</span>\n  \nVXLAN-E21# <strong>show ip interface brief vrf POD{{spod}}</strong>\n IP Interface Status for VRF &quot;POD{{spod}}&quot;(4)\n Interface            IP Address      Interface Status\n Vlan{{spod}}00              forward-enabled protocol-up/link-up/admin-up\n Eth1/21.{{spod}}            <span class=\"highlight\">172.21.{{spod}}.1</span>      protocol-up/link-up/admin-up\n\nVXLAN-E21# <strong>show bgp sessions vrf POD{{spod}}</strong>\n Total peers 36, established peers 36\n ASN 65201\n VRF POD{{spod}}, local ASN 65201\n peers 1, established peers 1, local router-id 172.21.{{spod}}.1\n State: I-Idle, A-Active, O-Open, E-Established, C-Closing, S-Shutdown\n \n Neighbor        ASN    Flaps LastUpDn|LastRead|LastWrit St Port(L/R)  Notif(S/R)\n <span class=\"highlight\">172.21.{{spod}}.2      64439 0     2d04h   |00:00:42|00:00:18 E   18816/179        0/0</span></pre></li><li class=\"step\">Configure the EBGP session for your POD VRF on E22 to leak the routes to the default VRF to provide external connectivity to DC2.<pre>VXLAN-E22(config)# <strong>interface Ethernet1/26.{{spod}}</strong>\nVXLAN-E22(config-subif)# <strong>description VRFsubif_to_C2_POD{{spod}}</strong>\nVXLAN-E22(config-subif)# <strong>encapsulation dot1q 26{{spod}}</strong>\nVXLAN-E22(config-subif)# <strong>vrf member POD{{spod}}</strong>\nVXLAN-E22(config-subif)# <strong>ip address 172.22.{{spod}}.1/30</strong>\nVXLAN-E22(config-subif)# <strong>no shutdown</strong>\nVXLAN-E22(config-subif)# <strong>router bgp 65201</strong>\nVXLAN-E22(config-router)# <strong>vrf POD{{spod}}</strong>\nVXLAN-E22(config-router-vrf)# <strong>address-family ipv4 unicast</strong>\nVXLAN-E22(config-router-vrf-af)# <strong>advertise l2vpn evpn</strong>\nVXLAN-E22(config-router-vrf-af)# <strong>neighbor 172.22.{{spod}}.2 remote-as 64439</strong>\nVXLAN-E22(config-router-vrf-neighbor)# <strong>address-family ipv4 unicast</strong>\n\nVXLAN-E22# <strong>show run vrf POD{{spod}}</strong>\n \n !Command: show running-config vrf POD{{spod}}\n !Time: Sun Jan 24 03:44:03 2016\n \n version 7.0(3)I1(3)\n <span class=\"snip\">&lt;SNIP&gt;</span>\n interface Ethernet1/26.{{spod}}\n   <span class=\"highlight\">vrf member POD{{spod}}</span>\n <span class=\"snip\">&lt;SNIP&gt;</span>\n router bgp 65201\n   vrf POD{{spod}}\n     address-family ipv4 unicast\n       advertise l2vpn evpn\n     <span class=\"highlight\">neighbor 172.22.{{spod}}.2</span>\n       <span class=\"highlight\">remote-as 64439</span>\n       <span class=\"highlight\">address-family ipv4 unicast</span>\n  \nVXLAN-E22# <strong>show ip interface brief vrf POD{{spod}}</strong>\n IP Interface Status for VRF &quot;POD{{spod}}&quot;(4)\n Interface            IP Address      Interface Status\n Vlan{{spod}}00              forward-enabled protocol-up/link-up/admin-up\n Eth1/26.{{spod}}            <span class=\"highlight\">172.22.{{spod}}.1</span>      protocol-up/link-up/admin-up\n \nVXLAN-E22# <strong>sh bgp sessions vrf POD{{spod}}</strong>\n Total peers 36, established peers 36\n ASN 65201\n VRF POD{{spod}}, local ASN 65201\n peers 1, established peers 1, local router-id 172.22.{{spod}}.1\n State: I-Idle, A-Active, O-Open, E-Established, C-Closing, S-Shutdown\n \n Neighbor        ASN    Flaps LastUpDn|LastRead|LastWrit St Port(L/R)  Notif(S/R)\n <span class=\"highlight\">172.22.{{spod}}.2      64439 0     2d04h   |00:00:52|00:00:29 E   50514/179        0/0</span></pre></li></ol>",
//                         "path": "use-case-3-pod-overlay-configuration"
//                     },
//                     {
//                         "name": "Traffic Flow Verification",
//                         "id": "662806880489",
//                         "data": "<style type=\"text/css\">ol.step {\n    counter-reset: step;\n    margin-left: 3em;\n}\n\nli.step {\n    display: block;\n}\n\nli.step::before {\n    display: inline-block;\n    content: \"Step \"counter(step) \":\";\n    counter-increment: step;\n    width: 4.3em;\n    margin-left: -4.3em;\n    font-weight: bold;\n}\n\npre.configsample {\n    background-color: rgba(255, 255, 255, 0.0);\n    color: #000;\n}\n\npre>strong {\n    color: rgba(0, 188, 235, 0.8);\n}\n\nspan.snip {\n    background-color: rgba(240, 76, 55, 0.7);\n}\n\nspan.highlight {\n    background-color: rgba(110, 190, 74, 0.4);\n}\n\nspan.arrow {\n    color: rgba(251, 171, 24, 1);\n    font-weight: bold;\n}</style><h1>Use Case 3</h1><h2>Traffic Flow Verification</h2><ol class=\"step\"><li class=\"step\">Use ping to test connectivity between the Ubuntu-S{{spod}} VM and Ubuntu-V{{spod}} and Ubuntu-I VMs.<pre>VXLAN\\POD{{spod}}user@ubuntu-S{{spod}}:~$ <strong>ping 10.{{spod}}.51.11</strong> <span class=\"arrow\">&larr; ping external host Ubuntu-V{{spod}}</span>\nPING 75.162.84.11 (10.2.51.11) 56(84) bytes of data.\n64 bytes from 10.{{spod}}.51.11: icmp_req=1 ttl=60 time=0.367 ms\n64 bytes from 10.{{spod}}.51.11: icmp_req=2 ttl=60 time=0.409 ms\n64 bytes from 10.{{spod}}.51.11: icmp_req=3 ttl=60 time=0.436 ms\n64 bytes from 10.{{spod}}.51.11: icmp_req=4 ttl=60 time=0.445 ms\n^C\n--- 10.{{spod}}.51.11 ping statistics ---\n4 packets transmitted, 4 received, <span class=\"highlight\">0% packet loss</span>, time 3000ms\n\nVXLAN\\POD{{spod}}user@ubuntu-S{{spod}}:~$ <strong>ping 75.162.84.11</strong> <span class=\"arrow\">&larr; ping external host Ubuntu-I</span>\nPING 75.162.84.11 (75.162.84.11) 56(84) bytes of data.\n64 bytes from 75.162.84.11: icmp_req=1 ttl=60 time=0.367 ms\n64 bytes from 75.162.84.11: icmp_req=2 ttl=60 time=0.409 ms\n64 bytes from 75.162.84.11: icmp_req=3 ttl=60 time=0.436 ms\n64 bytes from 75.162.84.11: icmp_req=4 ttl=60 time=0.445 ms\n^C\n--- 75.162.84.11 ping statistics ---\n4 packets transmitted, 4 received, <span class=\"highlight\">0% packet loss</span>, time 3000ms</pre></li><li class=\"step\">Confirm that all of the leaf switches (L11, L12, L13, L21) are all NVE peers of each other.<pre>VXLAN-L11# <strong>show nve peers</strong>\nInterface Peer-IP          State LearnType Uptime   Router-Mac\n--------- ---------------  ----- --------- -------- -----------------\nnve1      103.1.1.1        Up    CP        3d14h    58f3.9ca3.4603\nnve1      104.1.1.1        Up    CP        3d14h    6412.2575.1431\nnve1      105.1.1.1        Up    CP        3d14h    6412.2575.0641\nnve1      109.1.1.1        Up    CP        3d14h    7426.ac76.6c1f\nnve1      110.1.1.1        Up    CP        3d14h    6412.2575.13c1\nnve1      111.1.1.1        Up    CP        3d14h    74a0.2fdf.0b73</pre><pre>VXLAN-L12# <strong>show nve peers</strong>\nInterface Peer-IP          State LearnType Uptime   Router-Mac\n--------- ---------------  ----- --------- -------- -----------------\nnve1      103.1.1.1        Up    CP        3d14h    58f3.9ca3.4603\nnve1      104.1.1.1        Up    CP        3d14h    6412.2575.1431\nnve1      105.1.1.1        Up    CP        3d14h    6412.2575.0641\nnve1      109.1.1.1        Up    CP        3d14h    7426.ac76.6c1f\nnve1      110.1.1.1        Up    CP        3d14h    6412.2575.13c1\nnve1      111.1.1.1        Up    CP        3d14h    74a0.2fdf.0b73</pre><pre>VXLAN-L13# <strong>show nve peers</strong>\nInterface Peer-IP          State LearnType Uptime   Router-Mac\n--------- ---------------  ----- --------- -------- -----------------\nnve1      101.1.1.10       Up    CP        3d14h    f8c2.8887.d36f\nnve1      104.1.1.1        Up    CP        3d14h    6412.2575.1431\nnve1      105.1.1.1        Up    CP        3d14h    6412.2575.0641\nnve1      109.1.1.1        Up    CP        3d14h    7426.ac76.6c1f\nnve1      110.1.1.1        Up    CP        3d14h    6412.2575.13c1\nnve1      111.1.1.1        Up    CP        3d14h    74a0.2fdf.0b73</pre><pre>VXLAN-L21# <strong>show nve peers</strong>\nInterface Peer-IP          State LearnType Uptime   Router-Mac\n--------- ---------------  ----- --------- -------- -----------------\nnve1      101.1.1.10       Up    CP        3d14h    f8c2.8887.d36f\nnve1      103.1.1.1        Up    CP        3d14h    58f3.9ca3.4603\nnve1      104.1.1.1        Up    CP        3d14h    6412.2575.1431\nnve1      105.1.1.1        Up    CP        3d14h    6412.2575.0641\nnve1      109.1.1.1        Up    CP        3d14h    7426.ac76.6c1f\nnve1      110.1.1.1        Up    CP        3d14h    6412.2575.13c1</pre></li><li class=\"step\">Verify that the switches are using ingress replication for BUM traffic.<pre>VXLAN-L11# <strong>show nve vni ingress-replication 42{{spod}}51</strong>\nInterface VNI      Replication List  Source  Up Time\n--------- -------- ----------------- ------- -------\nnve1      42{{spod}}51    103.1.1.1         IMET    2d00h\n                   111.1.1.1         IMET    1d19h</pre><pre>VXLAN-L12# <strong>show nve vni ingress-replication 42{{spod}}51</strong>\nInterface VNI      Replication List  Source  Up Time\n--------- -------- ----------------- ------- -------\nnve1      42{{spod}}51    103.1.1.1         IMET    2d00h\n                   111.1.1.1         IMET    1d19h</pre><pre>VXLAN-L13# <strong>show nve vni ingress-replication 42{{spod}}51</strong>\nInterface VNI      Replication List  Source  Up Time\n--------- -------- ----------------- ------- -------\nnve1      42{{spod}}51    101.1.1.10        IMET    2d00h\n                   111.1.1.1         IMET    1d19h</pre><pre>VXLAN-L21# show nve vni ingress-replication 42{{spod}}51\nInterface VNI      Replication List  Source  Up Time\n--------- -------- ----------------- ------- -------\nnve1      42{{spod}}51    101.1.1.10        IMET    1d19h\n                   103.1.1.1         IMET    1d19h</pre></li><li class=\"step\">Verify that the switches are using ARP suppression.<pre>VXLAN-L11# <strong>show ip arp suppression-cache summary</strong>\n\nIP ARP suppression-cache Summary\n<span class=\"highlight\">Remote              :39</span>\nLocal               :25\nTotal               :64\n\nVXLAN-L11# <strong>show ip arp suppression-cache statistics</strong>\n\nARP packet statistics for suppression-cache\n\n<span class=\"highlight\">Suppressed:</span>\n<span class=\"highlight\">Total 93176</span>, Requests 70159, Requests on L2 34, Gratuitous 22983, Gratuitous on L2 0\nForwarded :\nTotal: 880\n L3 mode :      Requests 420, Replies 45\n                Request on core port 420, Reply on core port 45\n                Dropped 0\n L2 mode :      Requests 409, Replies 6\n                Request on core port 409, Reply on core port 2\n                Dropped 0\nReceived:\nTotal: 165747\n L3 mode:       Requests 142156, Replies 161\n                Local Request 71577, Local Responses 116\n                Gratuitous 22983, Dropped 0\n L2 mode :      Requests 443, Replies 4\n                Gratuitous 0, Dropped 0\nARP suppression-cache Local entry statistics\nAdds 274117, Deletes 0</pre><pre>VXLAN-L12# <strong>show ip arp suppression-cache summary</strong>\n\nIP ARP suppression-cache Summary\n<span class=\"highlight\">Remote              :28</span>\nLocal               :17\nTotal               :45\n\nVXLAN-L12# <strong>show ip arp suppression-cache statistics</strong>\n\nARP packet statistics for suppression-cache\n<span class=\"highlight\">Suppressed:</span>\n<span class=\"highlight\">Total 44878</span>, Requests 29767, Requests on L2 0, Gratuitous 15111, Gratuitous on L2 0\nForwarded :\nTotal: 129\n L3 mode :      Requests 119, Replies 10\n                Request on core port 119, Reply on core port 10\n                Dropped 0\n L2 mode :      Requests 0, Replies 0\n                Request on core port 0, Reply on core port 0\n                Dropped 0\nReceived:\nTotal: 67325\n L3 mode:       Requests 52057, Replies 157\n                Local Request 22171, Local Responses 147\n                Gratuitous 15111, Dropped 0\n L2 mode :      Requests 0, Replies 0\n                Gratuitous 0, Dropped 0\nARP suppression-cache Local entry statistics\nAdds 80550, Deletes 1</pre><pre>VXLAN-L13# <strong>show ip arp suppression-cache summary</strong>\n\nIP ARP suppression-cache Summary\n<span class=\"highlight\">Remote              :39</span>\nLocal               :49\nTotal               :88\n\nVXLAN-L13# <strong>show ip arp suppression-cache statistics</strong>\n\nARP packet statistics for suppression-cache\n\n<span class=\"highlight\">Suppressed:</span>\n<span class=\"highlight\">Total 154003</span>, Requests 153904, Requests on L2 99, Gratuitous 0, Gratuitous on L2 0\nForwarded :\nTotal: 9107\n L3 mode :      Requests 2492, Replies 1\n                Request on core port 2492, Reply on core port 1\n                Dropped 0\n L2 mode :      Requests 6612, Replies 2\n                Request on core port 6612, Reply on core port 1\n                Dropped 0\nReceived:\nTotal: 301614\n L3 mode:       Requests 294744, Replies 158\n                Local Request 138348, Local Responses 157\n                Gratuitous 0, Dropped 0\n L2 mode :      Requests 6711, Replies 1\n                Gratuitous 0, Dropped 0\nARP suppression-cache Local entry statistics\nAdds 301614, Deletes 0</pre><pre>VXLAN-L21# <strong>show ip arp suppression-cache summary</strong>\n\nIP ARP suppression-cache Summary\n<span class=\"highlight\">Remote              :28</span>\nLocal               :14\nTotal               :42\n\nVXLAN-L21# <strong>show ip arp suppression-cache statistics</strong>\n\nARP packet statistics for suppression-cache\n<span class=\"highlight\">Suppressed:</span>\n<span class=\"highlight\">Total 3439</span>, Requests 3439, Requests on L2 0, Gratuitous 0, Gratuitous on L2 0\nForwarded :\nTotal: 106\n L3 mode :      Requests 90, Replies 2\n                Request on core port 90, Reply on core port 2\n                Dropped 0\n L2 mode :      Requests 14, Replies 0\n                Request on core port 14, Reply on core port 0\n                Dropped 0\n\nReceived:\nTotal: 5366\n L3 mode:       Requests 3559, Replies 1793\n                Local Request 30, Local Responses 1791\n                Gratuitous 0, Dropped 0\n L2 mode :      Requests 14, Replies 0\n                Gratuitous 0, Dropped 0\nARP suppression-cache Local entry statistics\nAdds 5366, Deletes 0</pre></li></ol><h3>Summary</h3><p>In summary, traffic is now flowing from VM Ubuntu-S{{spod}} to the internet IP address and to Ubuntu-V{{spod}} via the Multipod fabric. All of the leaf switches are NVE peers of each other, so they are all in one big fabric.</p>",
//                         "path": "use-case-3-traffic-flow-verification"
//                     }
//                 ]
//             },
//             {
//                 "name": "Summary and Survey",
//                 "id": "177827873913",
//                 "data": "<h1>Summary</h1><p>This lab session demonstrated deploying VXLAN (Virtual Extensible LAN) in a data center using hardware VXLAN endpoints (VTEPs) with the Nexus 9000 series platform. It lab focused on multiple scenarios using the hardware VTEPs. You now should have the skills to implement a VXLAN solution in your network.</p><p>If you did not have time to complete all three sections of the lab, or if you would like access to redo a portion of the lab later, please request extended access to the lab. To request access, either ask a proctor or email us using the contact information on the <a href=\"welcome\">welcome</a> page.</p><p>If you would like extended access to the lab, please know that it will only be available for 2 weeks.</p><h1>Session Evaluations</h1><p style=\"font-size:18px;\">We sincerely hope you enjoyed the lab. <span style=\"color:#cf2030;\"><strong>Your feedback is invaluable to us</strong></span>. Feedback from students who take the lab are what help us to shape the lab for students at future events and the scores are used as a major determining factor when deciding which labs will be allowed to present at future events. <span style=\"color:#6cc04a;\"><u><strong>Please complete the surveys via CiscoLive.com/online or in the mobile app.</strong></u></span></p><p style=\"font-size:18px;\"><span style=\"color:#005073;\">Attendees who complete 4 session evaluations and the overall conference evaluation will receive a free Cisco Live T-Shirt!.</span></p>",
//                 "path": "summary-and-survey"
//             }
//         ],
//         buttons: [
//             {
//                 "name": "Pod Number",
//                 "selector": "pod-number",
//                 "description": "Pod Number",
//                 "icon": "info",
//                 "id": "343993433",
//                 "data": "<h1>Pod Number</h1><p>Your current pod number is POD{{spod}}.</p>",
//                 "is_open:": "false",
//                 "is_open": "true"
//             },
//             {
//                 "name": "Physical Toplogy",
//                 "id": "714653916176",
//                 "data": "<p><img src=\"/uploads/104733fc-ae6b-63fa-8ab3-79c4a7b4717b.png\" /></p>",
//                 "description": "Physical Topology",
//                 "selector": "physical-toplogy",
//                 "icon": "meeting-room"
//             }
//         ]
//     },
//     (err, course) => {
//         if (err) {
//             console.log(err);
//         }
//         console.log(course);
//
//     }
// );

/** Routes **/

// Course specific splash pages
app.get('/courses/:title', (req, res, next) => {
    // Get course data
    courseApi.getCourse(req.params.title, (err, course) => {
        // Get a list of the users (array of strings).
        let users = courseApi.getStudents(req.params.title);

        // Render the splash page with the users populating a dropdown.
        return res.render('splash', {
            users: users,
            landingPage: true,
            title: course.splashTitle,
            instructions: course.splashInstructions,
            courseName: course.courseName,
            courseSlug: course.courseSlug,
            courseTitle: course.courseTitle.toLowerCase().replace(/\s+|_/g, '-'),
            // Raw version for the title
            rawCourseTitle: course.courseTitle,
            userNomenclature: course.userNomenclature
        });
    });
});

// Individual course section pages.
app.get('/courses/:title/:section', (req, res, next) => {
    courseApi.getCourse(req.params.title, (err, course) => {
        let userData, contentString, courseTemplate, showSidebar, templatedButtons;

        // Assign defaults if the session student variables haven't been set prior to hitting this page.
        userData = Object.assign({}, courseApi.getStudentDefaults(req.params.title), req.session.studentVars);

        // Determine whether sidebar should be shown, defaults to true.
        if (typeof req.session.showSidebar === 'undefined') {
            showSidebar = true;
        }
        else {
            showSidebar = req.session.showSidebar;
        }

        templatedButtons = _.map(course.buttons, (button) => {
            let dataTemplate = Handlebars.compile(button.data);
            button.data = dataTemplate(userData);
            return button;
        });

        // If the section parameter is included then we're on an individual
        // section page...
        if (req.params.section !== '__start') {
            // Fetch the individual course section data (an HTML string).
            let courseData = courseApi.fetchData(req.params.section, course.pages);

            // If the course was successfully found.
            if (typeof courseData !== "undefined") {
                // Create a template function with Handlebars based on that data.
                courseTemplate = Handlebars.compile(courseData);

                // Compile the the course section html along with the userData variables.
                contentString = courseTemplate(userData);
            }
            // If the course module doesn't exist, we 404 it.
            else {
                return next();
            }
        }
        // ... Otherwise we redirect to the head of the course.
        else {
            let firstSection = course.pages[0];

            // If the first section is empty, then it's just a drawer,
            // and we need to load the first child instead.
            if (firstSection.data === '') {
                courseTemplate = Handlebars.compile(firstSection.pages[0].data);
            }
            else {
                // Load in the template for the first section's data. Run it through
                // Handlebars to create a template function.
                courseTemplate = Handlebars.compile(firstSection.data);

            }
            // Pass in the user data and then set the content to the compiled
            // string generated by Handlebars.
            contentString = courseTemplate(userData);
        }

        // We load the views/courses.hbs template (which will inject itself into
        // {{{section}}} block of the views/index.hbs template, which will then
        // inject *itself* into the {{{body}}} section of views/layouts/main.hbs)
        return res.render('courses', {
            // Passes an html string into the template that represents the sidebar menu
            sidebarData: courseApi.generateMenuString(course.pages, req.params.title),

            // String representation of the content to be loaded for this section
            content: contentString,

            // Let's the front end know that we're on a course page.
            coursePage: true,

            // Passes in the userData to the template to fill in where relevant.
            userData: userData,

            // Determine whether we should show sidebar or not.
            sidebarShown: showSidebar,

            // Title to be shown in title bar
            courseSlug: course.courseSlug,

            // Name of the course
            courseName: course.courseName,

            // Used for a URL, so we modify it first.
            courseTitle: course.courseTitle.toLowerCase().replace(/\s+|_/g, '-'),

            // And the raw version for the title
            rawCourseTitle: course.courseTitle,

            // The buttons and the modal dialog HTML that belongs to them
            buttons: templatedButtons
        });
    });
});

// Load the editing page for the given course
app.get('/edit-course/:title', isAuthenticated(), (req, res) => {
    // Get course data
    let course = courseApi.getCourse(req.params.title);

    // Need to get a list of injectable variables
    let courseVariables = courseApi.getVariableNames(req.params.title);

    // Render the splash page with the users populating a dropdown.
    return res.render('editCourse', {
        title: course.splashTitle,
        instructions: course.splashInstructions,
        courseName: course.courseName,
        courseSlug: course.courseSlug,
        courseTitle: course.courseTitle.toLowerCase().replace(/\s+|_/g, '-'),
        // And the raw version for the title
        rawCourseTitle: course.courseTitle,
        userNomenclature: course.userNomenclature,
        courseVars: courseVariables.sort(),
        editPage: true
    });
});

// Used for an Ajax response for the editor.
app.get('/get-course/:title', (req, res) => {
    courseApi.getCourse(req.params.title, (err, course) => {
        res.json(course);
    });
});

// Update a specific course
app.post('/update-course', isAuthenticated(), (req, res) => {
    courseApi.saveCourse(req.body, (err, status) => {
        if (err) {
            res.json({
               success: false,
               message: err
            });
        }
        else {
            res.json({
                success: true
            })
        }
    });
});

app.post('/upload_photo', [isAuthenticated(), upload.single('upload')], (req, res) => {
    let
        fileName = guid.create() + path.extname(req.file.originalname),
        target_path = 'public/uploads/' + fileName,
        tmp_path = req.file.path,
        src = fs.createReadStream(tmp_path),
        dest = fs.createWriteStream(target_path)
    ;

    src.pipe(dest);

    src.on('end', function() {
        let response = {
            uploaded: 1,
            fileName: fileName,
            url: '/uploads/' + fileName
        };

        res.json(response);
    });

    src.on('error', function(err) {
        let response = {
            uploaded: 0,
            error: {
                message: 'The file could not be saved'
            }
        };

        res.send(response);
    });

    fs.unlinkSync(tmp_path);

});

app.post('/upload-file/:title', [isAuthenticated(), upload.single('qqfile')], (req, res) => {
    let
        fileName = guid.create() + path.extname(req.file.originalname),
        targetPath = 'data/courses/' + req.params.title.replace(/-/g, '_') + '_variables.csv',
        tmp_path = req.file.path,
        src = fs.createReadStream(tmp_path),
        dest = fs.createWriteStream(targetPath)
    ;

    src.pipe(dest);

    // Read in the CSV file.
    let csvData = fs.readFileSync(tmp_path).toString();

    let prepend;

    csvData = csvData.split(/[\r\n]+/);

    // Fix for bizarre first property/column issue.
    for (let i = 0; i < csvData.length; i++) {
        if (i === 0) {
            prepend = "null,";
        }
        else {
            prepend = "0,";
        }

        csvData[i] = prepend + csvData[i];
        csvData[i] = csvData[i].replace(/\s/g, '');
    }

    csvData = csvData.join('\n');

    // Transform the CSV data into JSON
    let jsonData = Baby.parse(csvData, {header: true}).data;

    // Update our current student variables if they're set.
    if (req.session.studentVars) {
        req.session.studentVars = _.findWhere(jsonData, { number: req.session.studentVars.number});
    }

    // Get the variables from the headers.
    let jsonVars = _.keys(jsonData[0]);

    src.on('end', function() {
        let response = {
            uploaded: 1,
            fileName: fileName,
            url: '/uploads/' + fileName,
            vars: jsonVars,
            success: true
        };

        fs.writeFile(targetPath, csvData, () => {
            res.json(response);
        });
    });

    src.on('error', function(err) {
        let response = {
            uploaded: 0,
            error: 'The file could not be saved'
        };

        res.send(response);
    });

    fs.unlinkSync(tmp_path);
});

// When the user selects a student to login as, they pop this endpoint
// which sets up the user session before letting the front page
// know that it's safe to redirect.
app.get('/training-login/:title/:id', (req, res) => {
    // Get the variables applicable to the selected student.
    let userData = courseApi.getUserVars(req.params.title, req.params.id);

    // Set the session's user object to carry these variables.
    req.session.studentVars = userData;

    // Default the user session to showing the menu bars
    req.session.showSidebar = true;

    // Let the calling code know that the session has been set up.
    return res.json({
        response: 'Success'
    });
});

// Endpoint for logins utilizing the passport system.
app.post('/login', passport.authenticate('login', {
    successRedirect: '/profile/admin',
    failureRedirect: '/',
    failureFlash: true
}));

// Log user out
app.get('/signout', (req, res) => {
    // Logout of passport
    req.logout();
    // Remove our session.
    redisClient.del('sess:' + req.session.id);
    res.redirect('/');
});

// Clear session here
app.get('/end-session', (req, res) => {
    redisClient.del('sess:' + req.session.id);
    res.redirect('/');
});

// User home page. Will eventually list courses the user can edit.
app.get('/profile/:user', isAuthenticated(), (req, res) => {
    courseApi.getCourses((err, courses) => {
        if (!err) {
            res.render('profile', {
               courses: courses
            });
        }
    });
});

// Ajax endpoint to turn the sidebar on and off for subsequent page loads.
app.get('/sidebar/:showSidebar', (req, res) => {
    req.session.showSidebar = (req.params.showSidebar === 'true');

    // Let the calling code know the sidebar status was recorded
    return res.json({
        response: 'Success'
    })
});

// Link to compile and serve the pdf of the course
app.get('/pdf/:title', (req, res) => {
    const
        // External library for converting html to pdf
        htmlPdf = require('html-pdf'),
        // The configuration object for our pdf file. Right now
        // we're just setting the format.
        pdfConfig = {
            format: 'Letter',
            border: {
                top: '0.5in',
                right: '0.25in',
                left: '0.25in',
                bottom: '0.5in'
            },
            base: 'http://localhost:' + server.address().port + '/uploads',
            timeout: 120000
        },
        title = req.params.title
    ;

    let
        course = courseApi.getCourse(title),
        userData
    ;


    // Assign defaults if the session student variables haven't been set prior to hitting this page.
    userData = Object.assign({}, courseApi.getStudentDefaults(title), req.session.studentVars);

    let htmlString = courseApi.generatePdfString(course.courseData.children, userData);

    // Store the output file in the uploads directory.
    htmlPdf.create(htmlString, pdfConfig).toFile('public/uploads/' + title + '.pdf', function(err, handler) {
        if (err) {
            return console.log(err);
        }
        else {
            // Serve the generated file to the user.
            return res.download('public/uploads/' + title + '.pdf');
        }
    });
});

// This is the landing/splash page.
app.get('/', (req, res) => {
    // Renders home page for SVS site.
    return res.render('home', {
        authenticated: req.isAuthenticated(),
        message: req.flash('message')
    });
});

// Setup the static middleware to serve static content from the
// public directory.
app.use(express.static('public'));

// Set up an error handler to prevent server halts.
app.use((err, req, res, next) => {
    if (res.headersSent) {
        return next(err);
    }
    return res.status(500).send('<strong>Something went wrong.</strong>');
});

// Handle 404s.
app.use(function (req, res, next) {
    return res.status(404).send('Sorry cannot find that! <a href="/">Return to home</a>.');
});


// Initialize our server to listen on port 8040.
let server = app.listen(port, function() {
    const host = server.address().address;
    const port = server.address().port;

    console.log('App listening on http://%s:%s', host, port);
});
