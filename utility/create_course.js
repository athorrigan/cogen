const
    courseApi = require('../api/course_service'),
    process = require('process')
;

courseApi.createCourse(
    {
        "courseTitle": "ILT CLEUR18 SAE",
        "courseSlug": "",
        "courseName": "LTRCLD-2121",
        "splashTitle": "Virtualize, Orchestrate and Automate Your DMZ Extranet, Internet, and Public Cloud Connections with Secure Agile Exchange!",
        "splashInstructions": "Select a student ID from the dropdown above to continue",
        "userNomenclature": "Student",
        "coursePath": "ilt-cleur18-sae",
        "children": [
            {
                "name": "Welcome",
                "path": "welcome",
                "id": "552441622311",
                "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Welcome to LTRCLD-2121!</h1><p>This lab was designed to introduce attendees to Secure Agile Exchange (SAE). SAE is turn-key solution that provides customers with the ability to virtualize, orchestrate and automate their cloud and DMZ connections.</p><p class=\"text-center\"><img style=\"width: 20%; height: 20%\" src=\"/uploads/76bf44cb-4882-e5aa-5a52-8fc87e124e15.png\" /></p><h2>Abstract</h2><p>In this session, attendees will be introduced to <strong>Secure Agile Exchange (SAE)</strong>. SAE securely connects users - employees, customers and partners - to applications across private data centers, public IaaS clouds, and/or public SaaS clouds. SAE was designed for these hybrid cloud environments, ensuring optimal connectivity, security, speed, and agility. Built around the basic principles of Network Functions Virtualization (NFV), SAE enables customers to use Virtual Network Functions (VNF) and network orchestration to replace traditional physical environments with scalable, highly-secure, and agile service chains. In this session, attendees will be given the opportunity to learn, explore and configure SAE. This session will introduce attendees to the Cloud Services Platform 2100 (CSP), the Network Services Orchestrator (NSO), as well as several Cisco and 3rd Party VNFs, including the ASAv, Avi load balancer, and newly acquired, Viptela. Using these technologies, attendees will learn how to quickly and easily deploy and configure service chains into SAE, enabling end-users in the branch to reach services in the data center.</p><h2>Objective</h2><p>The objective of this lab is to connect a branch end user to a cluster of web servers in the data center. In order for this traffic to reach the data center, it must travel over the &quot;internet&quot; via Viptela&#39;s SD-WAN overlay, and enter Secure Agile Exchange where it will pass through a service chain before continuing onto the web servers.</p><p>In order to enable this communication, students will be asked to complete the following:</p><ul><li>Deploy, configure and register a Viptela vEdge on the Branch CSP-2100</li><li>Using the Network Services Orchestrator SAE Function Pack, deploy an eCommerce Service Chain, consisting of a Cisco ASA and an Avi Vantage SLB</li><li>Configure the eCommerce Service Chain using a combination of NSO Device Templates and Service Models</li></ul><p>Our hope is that students complete and leave this lab with a better understanding of SAE. Primarily, we hope students understand how SAE works and what parts of the solution enable customers to own and control the network, security, and telemetry virtualization stack; be agile and automate like application teams; and simplify deployment, operations and troubleshooting. In addition, we hope students appreciate the opportunity to learn more about the various technologies involved in SAE, from Viptela to the CSP-2100.</p><p class=\"text-center\"><strong>Please continue to learn more about the lab environment.</strong></p>",
                "is_open": "false",
                "children": [
                    {
                        "name": "Lab Information",
                        "id": "936287410730",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Lab Information</h1><p>This lab was designed to support (20) students concurrently, each with their own separate environments. Each student environment can be broken up into three main sections: <strong>Branch</strong>, <strong>Secure Agile Exchange</strong> and <strong>Management</strong>. In the upper-right hand corner of the browser, students can click on the small, round icon with a stack of servers to display the lab&#39;s topology diagrams in an overlay.</p><div class=\"note\">In the following diagrams, there are red <strong>&quot;X&quot;</strong> placeholders. These are placeholders for your student number. Whenever a red &quot;X&quot; is preceded by a <strong>&quot;(0)&quot;</strong>, this means <strong>students 1-9</strong> need to use/add a preceding &quot;0&quot; to their student number. For example, student01 would use VLAN1101 for VLAN11(0)X and s01 for s(0)X. When possible, the lab guide instructions will explicitly state what name/number to use for each step. In addition, example pictures will be marked with clearly defined labels.</div><h2>Physical Topology</h2><p class=\"text-center\"><img style=\"width: 80%; height: 80%\" src=\"/uploads/68fc18eb-ec90-e01b-600f-b7607c12044f.png\" /></p><h2>Branch</h2><p>Each student has access to (2) CSP-2100s - <strong>{{student-csp1}}</strong> and <strong>{{student-csp2}}</strong>. The first CSP-2100 will be used for students to deploy and configure their own Branch vEdge. {{student-csp1}} is connected to a pair of switches emulating two &quot;public&quot; networks - <strong>Internet</strong> and <strong>MPLS</strong>; these networks connect the branch to the data center.</p><p>There are (2) CSP-2100s residing in the data center. <strong>SAE-CSP1</strong> is an &quot;infra&quot;-device as it hosts the termination point for each of the student branch environments. In the first part of the lab, students will use Viptela to connect their branch user, <strong>SAE-Client</strong>, to the services running in SAE. Given Viptela&#39;s SD-WAN overlay technology, every student can connect their vBranch-vEdge to the same vEdge residing in SAE.</p><p class=\"text-center\"><img style=\"width: 80%; height: 80%\" src=\"/uploads/3ddd9c7b-9d7e-2ac2-174e-8f165768e3e4.png\" /></p><h2>Secure Agile Exchange</h2><p>The second CSP-2100 residing in data center, <strong>{{student-csp2}}</strong>, will be used for the <strong>eCommerce Service Chain</strong>. Using NSO, students will deploy and configure their own <strong>Virtual Network Functions</strong> (VNFs) on {{student-csp2}}. Traffic from SAE-Client will traverse this service chain before exiting SAE and reaching <strong>SAE-Servers</strong>.</p><p class=\"text-center\"><img src=\"/uploads/73a9c8f3-2e1d-353f-dcad-b6560383a15e.png\" /></p><h2>Management</h2><p>Throughout the lab, students will use a number of portals to manage and configure various VNFs.</p><ul><li>CSP-2100 Web-Based GUI</li><li>Viptela vManage</li><li>Avi Vantage Controller</li><li>Network Services Orchestrator</li></ul><div class=\"note\">This lab topology is being shared with another lab at Cisco Live, entitled <em><strong>LABSCRS-2629 - Introduction to Cisco&rsquo;s SD-WAN Solution - Viptela</strong></em>. Because of Viptela&#39;s versatility and powerful SD-WAN capabilities, it is being positioned in a number of solutions at Cisco, including SAE. During this 45-minute Walk-In Self-Paced (WISP) Lab, students will install a vEdge on the CSP-2100 (similar to this lab), and learn how to apply device templates.<p class=\"text-center\"><strong>If you would like to know more about Viptela and how it is enabling customers to improve their hybrid-cloud capabilities, please consider attending LABSCRS-2629</strong></p></div><p>.</p>",
                        "path": "lab-information",
                        "is_open": "true"
                    },
                    {
                        "name": "Connection Information",
                        "path": "connection-information",
                        "id": "218351040185",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Connection Information</h1><p>The management subnets for this lab are <strong>10.1.60.0/23</strong> (CSP-2100, Nexus, VNFs and NFS) and <strong>10.1.48.x/24</strong> (vManage, vBond, vSmart). In the upper-right hand corner of the browser, students can click on the small, round icon with bi-directional arrows to display an overlay with following IP addressing.</p><h2>Infrastructure Addresses</h2><div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>Device</th><th>IP Address</th><th>Credentials</th></tr><tr><td><a href=\"http://{{student-csp1-ip}}\">{{student-csp1}}</a></td><td>{{student-csp1-ip}}</td><td>student/Cisc#123</td></tr><tr><td><a href=\"http://{{student-csp2-ip}}\">{{student-csp2}}</a></td><td>{{student-csp2-ip}}</td><td>student/Cisc#123</td></tr><tr><td><a href=\"http://10.1.60.56\">Avi Controller</a></td><td>10.1.60.56</td><td>{{student-name}}/Cisc#123</td></tr><tr><td><a href=\"http://10.1.60.31\">Network Services Orchestrator</a></td><td>10.1.60.31</td><td>admin/admin</td></tr><tr><td>SAE-Client</td><td>10.1.60.36</td><td>student/Cisc#123</td></tr></tbody></table></div><h3>Accessing the GUI</h3><p>Many of the devices utilize web-based GUIs. In order to access these portals, please use the <strong>Chrome Web Browser</strong>, which has been pre-installed on the Windows jump host. There is a folder on the Bookmarks Bar entitled <strong>SAE Bookmarks</strong>, which contains bookmarks for each of the management portals.</p><p><img src=\"/uploads/8aa229c3-cce2-00e4-3ed0-cef36d6b9388.png\" /></p><h2>VNF Addresses</h2><p>The following addresses are to be used for the management addresses of the VNFs in the eCommerce Service Chain. With the exception of the vEdge, Day0 Configuration Files will be used to &quot;automatically&quot; configure these management IP address during deployment.</p><div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>Device</th><th>IP Address</th><th>Credentials</th></tr><tr><td>{{student-abbrev}}-vEdge</td><td>10.1.61.{{number-NOzero}}1</td><td>admin/admin</td></tr><tr><td>{{student-abbrev}}-ASA</td><td>10.1.61.{{number-NOzero}}2</td><td>admin/Cisc#123</td></tr><tr><td>{{student-abbrev}}-AviSE</td><td>10.1.61.{{number-NOzero}}3</td><td>N/A</td></tr></tbody></table></div><h3>Accessing the CLI</h3><p>Once the VNFs are given management address, the virtual machines can be reached via SSH. Located on the desktop, please use <strong>Smartty</strong> to access the device&#39;s CLI. Once Smartty is open, use the filter box in the right-hand corner to find your device; double-click to open an SSH session. Students will need to accept the SSH host key warning and enter the device&#39;s password.</p><p><img src=\"/uploads/5a2fa5fd-057e-c985-182a-89fb588756ac.png\" /></p><div class=\"note\">If students prefer, they are welcomed to use <strong>Putty</strong> as an alternative to Smartty.</div>",
                        "is_open": "true"
                    }
                ]
            },
            {
                "name": "Deploying vEdge to SAE-vBranch",
                "path": "deploying-vedge-to-saevbranch",
                "id": "976351648346",
                "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Deploying vEdge to SAE-vBranch</h1><p>One of the first questions to answer when designing an SAE solution is <strong>&quot;How are my connections going to reach and terminate in SAE?&quot;</strong> In other words, what tools and protocols are going to be responsible for securely connecting a user, cloud, or service provider to services runnning in SAE? There are many &quot;right&quot; answers to this question, but some options are cetainly more popular than others. Cisco recommends that customers use one of the two following methods to provide connectivity into SAE:</p><ul><li>Viptela SD-WAN</li><li>GRE/IPSEC Tunnels with the CSRv</li></ul><p>In this lab, students will be focusing on the first option, Viptela. The first objective of this lab is to deploy, configure and then register a student-vEdge on {{student-csp1}}. Once deployed, this vEdge will be used to route traffic to and from the vEdge residing in SAE; the student-vEdge serves as the WAN edge router of the branch. Students are encouraged to read brief introductory overviews of the CSP-2100 and Viptela before proceeding onto the first steps in the section entitled <em>Deploying the vEdge</em>.</p><p class=\"text-center\"><img style=\"width: 80%; height: 80%\" src=\"/uploads/9c2d1f38-11da-1c44-82c3-4dacf31696bc.png\" /></p>",
                "is_open": "false",
                "children": [
                    {
                        "name": "Introduction to the CSP-2100",
                        "path": "introduction-to-the-csp2100",
                        "id": "436177917144",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Introduction to the CSP-2100</h1><p>In this lab, students will be deploying various virtual machines onto the <strong>CSP-2100</strong>. The Cloud Services Platform is where <strong>Virtual Network Functions</strong> (also known as VNFs or Services) are deployed, hosted and managed. The CSP-2100 is a KVM hypervisor based on RHEL 7.3 and ConfD. It can be managed via GUI, REST API, NETCONF or ConfD Cisco CLI. The CSP-2100 supports several different image types, including QCOW2, ISO and OVA, and can utilize Day-0 Configuration Files to expedite service deployment and configurations. For storage, the CSP supports HDDs (600GB-1TB), SSDs (400GB-1.6TB) and NFS. Because the CSP-2100 is based on Cisco C-Series Servers, the hardware and the software of CSP is capable of changing and scaling as the UCS product portfolio grows. While the CSP-2100 is more popular in data centers and colocation facilities, it has found success in the branch due to it&#39;s small form factor, flexible configuration options and it&#39;s aggressive price:performance ratio.</p><div class=\"important-note\">The CSP-2100s used in this lab are named <strong>{{student-csp1}}</strong> and <strong>{{student-csp2}}</strong>. The guide will instruct students to perfrom actions on each of these devices, and may not specifically reference the CSP-2100.</div><p class=\"text-center\"><img src=\"/uploads/b726f5be-dee9-dd50-797b-603cd3135aff.png\" /></p><h2>Networking Options</h2><p>When running on the CSP-2100 VNFs, can utilize a combination of virtual switches, implemented in software or hardware, to deliver networking features. The Cisco CSP-2100 supports three of the most popular choices - OVS, PCIe-PassThrough, and SR-IOV. Each option has its own benefits and tradeoffs.</p><p class=\"text-center\"><img src=\"/uploads/a4f8ca56-f350-9272-d89b-55f79fa526d0.png\" /></p><p>In this lab, students will use both OVS and SR-IOV.</p><ul><li><strong>Each student-vEdge will use port-channels configured on OVS</strong>. OVS offers the most flexible networking options by completely abstracting the underlying hardware from the VNF by implementing network switching in the software layer. This allows for many to one (N:1) mapping of VNFs to physical NICs. However, this flexibility comes with a significant performance penalty due to all switching implemented in software.</li><li><strong>The Cisco ASA and Avi SLB will use SR-IOV</strong>. Single Root I/O Virtualization allows multiple VMs running a variety of guest operating systems to share a single PCIe network adapter within a host server. SR-IOV allows a VM to move data directly to and from the network adapter, bypassing the hypervisor for increased network throughput and lower server CPU burden. The most widely supported drivers for SR-IOV are from Intel, which is why the CSP-2100 comes with Intel NICs instead of Cisco VICs.</li></ul>",
                        "is_open": "true"
                    },
                    {
                        "name": "Introduction to Viptela",
                        "id": "888311838112",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(220, 76, 55);\n    font-weight: bold;\n}</style><h1>Introduction to Viptela</h1><p>Viptela Fabric is a cloud-delivered network fabric that is secure, scalable, open and simple to deploy. Viptela Fabric enables an Enterprise to extend its network footprint to all infrastructure elements using a single platform. This includes branches, campus, remote sites, cloud and data center.</p><p>The enterprise network has evolved significantly as a result of users, devices, and things needing to connect to applications in the cloud. The requirements of the network have significantly evolved as a result. There are pressing requirements both new and old on the current network architecture.</p><p class=\"text-center\"><img src=\"/uploads/a08de4b9-a567-7817-ffcd-5cf1cf0f233d.png\" /></p><p>Viptela has taken a fundamental, grounds-up approach to building the Viptela Fabric. The Viptela Fabric is built on using of time-tested and proven principles of networking but the sophistication is wrapped in a simplified delivery model.</p><ul><li>Separation of control, data, management and orchestration layers</li><li>Integrated routing, security and policy for optimal connectivity</li><li>Built-in optimization techniques for network and applications</li></ul><h2>How does it work?</h2><p>The Viptela solution starts with the initial deployment and configuration of the controller nodes; the vManage, the vSmart and the vBond. These controller nodes establish DTLS/TLS control connections between themselves, thus allowing the vBond to build a mapping table of all controller nodes in the network. This mapping table is what allows for the discovery and onboarding of vEdges, as well as providing vEdges with a NAT traversal information (public and private IP addresses) of deployed vEdges, if applicable. For a secure control plane, the controllers generate the necessary encryption keys and certificates for the establishment of DTLS/TLS tunnels. Additionally, the controller nodes get configured with a list of serial numbers of all connecting vEdges (to allow for the initial vEdge device onboarding).</p><p>When a vEdge is initially deployed, it is configured with the vBond IP address (in addition to basic information such as site ID and organization name). The vEdge then registers (authenticates and is checked against the whitelist) with the vBond, where it retrieves the controller nodes&#39; information for the establishment of DTLS/TLS control connections. Once onboarded, the vEdge joins the Overlay Management Protocol (OMP), where it downloads the fabric control information such as routing information, encryption keys and certificates, which allows it to establish the data plane IPSec connections to other vEdges on the network.</p><div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>&nbsp;</th><th>Name</th><th>Description</th></tr><tr><td><p class=\"text-center\"><img style=\"width: 20%; height: 20%\" src=\"/uploads/a02d8662-4584-2e7a-726f-46572460c03a.png\" /></p></td><td>vEdge</td><td>An Edge platform (vEdge) built for wide ranging applications &ndash; ranging from homes, branches, data centers to virtualized environments like NFV and Cloud.</td></tr><tr><td><p class=\"text-center\"><img style=\"width: 20%; height: 20%\" src=\"/uploads/b98e230f-b65c-f09b-56fc-fc92f6e5e8ad.png\" /></p></td><td>vSmart / vManage / vBond</td><td>A multi-tenant cloud element that provides control &amp; management</td></tr><tr><td><p class=\"text-center\"><img style=\"width: 20%; height: 20%\" src=\"/uploads/11bcfff6-5323-3236-efac-cea42a5dbf55.png\" /></p></td><td>vAnalytics</td><td>An analytics engine (vAnalytics) that obtains application, user and network characteristics to provide predictive analysis and tools for better decision making</td></tr><tr><td><p class=\"text-center\"><img style=\"width: 20%; height: 20%\" src=\"/uploads/1726252f-69bc-ea61-642d-3cd305e37471.png\" /></p></td><td>vOrchestrator</td><td>An orchestration layer (vOrchestrator) that automates &amp; simplifies the provisioning of the infrastructure</td></tr></tbody></table></div>",
                        "path": "introduction-to-viptela"
                    },
                    {
                        "name": "Deploying the vEdge",
                        "id": "122426255881",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Deploying the vEdge</h1><p>The first step to setting up your very own Viptela SD-WAN network, is to deploy the vEdge VNF on the CSP-2100. In this this section, students will use a pre-loaded QCOW2 to deploy a vEdge onto {{student-csp1}}.</p><p><span class=\"step\">STEP 1:</span> Open a browser window in Chrome and navigate to <strong>{{student-csp1}}</strong>. When prompted, login to the CSP-2100 with <strong>student/Cisc#123</strong></p><p><img src=\"/uploads/4907d3f2-96fc-e23c-38b0-e9579b4749c8.png\" /></p><div class=\"important-note\">Before the login page opens, Chrome may present a certificate error. Click <strong>ADVANCED</strong> and then <strong>Proceed ...</strong> to bypass the warning.</div><p>The page will reload and display the CSP-2100&#39;s Dashboard. The Dashboard gives users a top-down view of their deployed VNFs, providing them with usage data around cores, memory and disk drives. Depending on the number of people currently using the lab environment, the usage metrics displayed may vary slightly.</p><p><span class=\"step\">STEP 2:</span> In the top-right corner, click on <strong>Configuration &gt; Services</strong>.</p><p><img src=\"/uploads/1b017640-42df-1388-ed3f-f6cbed0db665.png\" /></p><p><span class=\"step\">STEP 3:</span> When the Service page loads, click on the <strong>plus symbol (+)</strong> to open the <strong>Create Service Wizard</strong>.</p><p><img src=\"/uploads/93bfcf53-8687-6e4d-0998-cb7d93f70534.png\" /></p><p><span class=\"step\">STEP 4:</span> Before completing the wizard as pictured below, select the radio button that says <strong>&quot;Create Service using Template&quot;</strong>. When the page refreshes, select the only template available from the first drop-down, <strong>student-vEdge.tmpl</strong>. This will automatically populate some of the necessary fields, such as the resource requirements, the image name and the management vNIC (enp1s0f0). <strong>Change the Name to {{student-abbrev}}-vEdge</strong></p><p><img src=\"/uploads/0be65417-b29c-6f28-a8c5-53739c2ebcc5.png\" /></p><p>The final step before continuing is to configure the vEdge with 3 data interfaces. These are the interfaces that connect the vEdge to the LAN segment, as well as both of the public networks - Internet and MPLS. It is these same connections that allow vManage and vBond configure and control the vEdge.</p><p class=\"text-center\"><img style=\"width: 40%; height: 40%\" src=\"/uploads/792c78eb-fa53-d73b-b8c6-f4b25760606b.png\" /></p><p>The following table includes the necessary information for each vNIC.</p><div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>Connection</th><th>vNIC Name</th><th>CSP Interface</th><th>vEdge Interface</th><th>VLAN</th></tr><tr><td>Internet</td><td>vnic1</td><td>enp1s0f1</td><td>GE0/0</td><td>11{{number}}</td></tr><tr><td>MPLS</td><td>vnic2</td><td>enp1s0f1</td><td>GE0/1</td><td>12{{number}}</td></tr><tr><td>LAN</td><td>vnic3</td><td>enp1s0f1</td><td>GE0/3</td><td>1{{number}}</td></tr></tbody></table></div><div class=\"warning-note\">Please ensure you use the appropriate VLANs for your student pod. The following screenshots are <strong>EXAMPLES</strong>!</div><p><span class=\"step\">STEP 5:</span> Click on the small <strong>plus symbol (+)</strong> to open the <strong>VNIC Configuration Wizard</strong>. When the wizard appears, enter the VLAN for the <strong>Internet vNIC</strong>. From the <strong>Network Name</strong> drop-down, select <strong>enp1s0f1</strong>, which is physical interface connected to both of the public networks. Click <strong>Submit</strong>.</p><p><img src=\"/uploads/ba2475b3-eda6-d450-c0b0-ce6a2d265164.png\" /></p><p><span class=\"step\">STEP 6:</span> Repeat this step for vNIC2 and vNIC3. When you are completed, the Create Service Wizard should look like the following example screenshot.</p><p><img src=\"/uploads/89fcca1b-db91-5a1e-a105-610d188b6205.png\" /></p><p><span class=\"step\">STEP 7:</span> Click <strong>Deploy</strong> to start the provisioning process. When the pop-up appears, click on <strong>Close</strong> to navigate back to the main Services page. Wait approximately 30 seconds before clicking on the <strong>Console Icon</strong> to open a new browser tab for noVNC. Press <strong>Connect</strong> to start the console session with your vEdge. The deployment may take up to 5 minutes.</p><div class=\"note\">Occasionally, the GUI for the CSP-2100 will hang, and will not allow users to open a console session immediately after deploying a service. If clicking the console icon does not open a new browser window, click on <strong>Dashboard &gt; Overview</strong> to navigate away from the Services page, and then click on <strong>Configuration &gt; Services</strong> to return. Clicking on the console icon should now open the noVNC session.</div><p><img src=\"/uploads/5ca08313-6702-fc0c-1073-63064f3af969.png\" /></p>",
                        "path": "deploying-the-vedge",
                        "is_open": "true"
                    },
                    {
                        "name": "Configuring vEdge Management",
                        "id": "735577703488",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Configuring vEdge Management</h1><p>The first step in setting up the vEdge is ensuring it has a management address. In most deployments, the management address configuration is also known as the <strong>Day0 Configuration</strong>. This is going to be the out-of-band IP address used to side-load the Day1 configuration file in the next step.</p><div class=\"note\">The CSP-2100 has a feature that enables users to &quot;side-load&quot; a Day0 Configuration File during VNF deployment. However, this feature needs to also be supported by the VNF. Because Viptela is new to the Cisco NFV ecosystem, this feature is not working as expected on the CSP-2100.</div><p><span class=\"step\">STEP 1:</span> In the noVNC console window, enter the username and password to login to the vEdge - <strong>admin/admin</strong>. It may take approximately 30-60 seconds before the vEdge will accept a login.</p><p><img src=\"/uploads/09ab0ccf-a95a-27fb-1be9-e1e1b64681fa.png\" /></p><p>The management configuration on the vEdge is nearly identical to the management configuration of any other Cisco router - you need an ip address on the interface, and a default route pointing to the default gateway. However, as mentioned in the Viptela Overview, the vEdge uses VPNs to separate interfaces and their traffic. By default, the management interface (eth0) should be assigned to <strong>VPN 512</strong>. VPN 512 is the default VPN on the vEdge and it is used for management connections and functions.</p><p><span class=\"step\">STEP 2:</span> Enter Configuration Mode and configure the vEdge&#39;s management interface. The following screenshot below is an example - for {{student-name}} use <strong>10.1.61.{{number-NOzero}}1/23</strong> for the IP address. Type <strong>Commit</strong> to save the configuration.</p><pre>conf t\nvpn 512\nint eth0\nip address 10.1.61.{{number-NOzero}}1/23 \nno shut\nexit\nip route 0.0.0.0/0 10.1.60.1\ntop\ncommit\n</pre><p><img src=\"/uploads/416507c8-7da1-0076-1988-1c838589f7f5.png\" /></p><p><span class=\"step\">STEP 3:</span> Verify the configuration was successful. Students can use <strong>(do) show run vpn 512</strong> to verify the configuration in the running-configuration, and <strong>(do) ping 10.1.60.1 vpn 512</strong> to verify the vEdge can reach the default gateway using VPN 512.</p><p><img src=\"/uploads/e24f61a3-f713-87dd-03be-413b9a0b91f8.png\" /></p><p><span class=\"step\">STEP 4:</span> On the desktop, open Smartty. Using the filter box in the right-hand corner, locate <strong>{{student-abbrev}}-vEdge</strong>. Double-click on the profile, input the password (admin), and ensure the SSH connection establishes. Students may need to accept the Host Key and select the type of Virtual Terminal (select the &quot;Remember this choice for all further sessions&quot; check box).</p><p><img src=\"/uploads/3cda127a-aae1-b8ab-882b-3ac30993d159.png\" /></p>",
                        "path": "configuring-vedge-management"
                    },
                    {
                        "name": "vEdge Day1 Configuration",
                        "id": "699870547333",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>vEdge Day1 Configuration</h1><p>With the management interface configured, the vEdge is ready to for a <strong>Day1 Configuration File</strong>. The Day1 Configuration File has two main sections - <strong>System</strong> and <strong>VPN 0</strong>.</p><h2>System Configuration</h2><p>Besides the host-name, system-ip (management address) and site-id, the System configuration associates the vEdge to the right <strong>Organization</strong> and <strong>vBond</strong>. Both the Organization and the vBond are required for the registering the vEdge with vManage and for pushing policies to the vEdge. The following is an example of the System configuration in the Day1 Configuration File:</p><pre>system\n <strong>host-name               {{student-abbrev}}-vEdge\n system-ip               10.1.61.{{number-NOzero}}1\n site-id                 3{{number}}</strong>\n no route-consistency-check\n <strong>sp-organization-name    &quot;Cisco Sy1 - 19968&quot;\n organization-name       &quot;Cisco Sy1 - 19968&quot;\n vbond 172.19.1.233</strong>\n</pre><h2>VPN 0 Configuration</h2><p>The second part of the Day1 Configuration File is for VPN 0. This section configures the 3 data interfaces (Internet, MPLS, LAN) with IP addresses and creates their tunnel-interfaces. In this lab, the vEdge tunnel-interfaces will be using <strong>IPSEC</strong>. Interface GE0/0 has been given a color of <strong>public-internet</strong>, while GE0/1 has been given a color of <strong>mpls</strong>. Because GE0/2 is connected to the LAN, it does not need a tunnel-interface, nor does it need a color; however, it does use a different VPN from the internet interfaces. If you recall, these interfaces map to vNIC1 and vNIC2 on the CSP-2100, which are using VLANs 11{{number}} and 12{{number}} respectively.</p><p>For each interface, there is a default route configured. This default route is responsible for advertising routes to other vEdges, indicating how to reach these subents from different tunnel endpoints.</p><p>The following is an example of the VPN 0 configuration in the Day 1 Configuration File:</p><pre><strong>vpn 0</strong>\n interface ge0/0\n  ip address 10.10.{{number-NOzero}}.2/24\n  ipv6 dhcp-client\n  <strong>tunnel-interface\n   encapsulation ipsec\n   color public-internet</strong>\n   allow-service all\n   no allow-service bgp\n   allow-service dhcp\n   allow-service dns\n   allow-service icmp\n   no allow-service sshd\n   no allow-service netconf\n   no allow-service ntp\n   no allow-service ospf\n   no allow-service stun\n  !\n  no shutdown\n !\n <strong>ip route 0.0.0.0/0 10.10.{{number-NOzero}}.1</strong>\n\n interface ge0/1\n  ip address 20.20.{{number-NOzero}}.2/24\n  ipv6 dhcp-client\n  <strong>tunnel-interface\n   encapsulation ipsec\n   color mpls</strong>\n   allow-service all\n   no allow-service bgp\n   allow-service dhcp\n   allow-service dns\n   allow-service icmp\n   no allow-service sshd\n   no allow-service netconf\n   no allow-service ntp\n   no allow-service ospf\n   no allow-service stun\n  !\n  no shutdown\n !\n <strong>ip route 0.0.0.0/0 20.20.{{number-NOzero}}.1</strong>\n!\n\n interface ge0/2\n  ip address 192.168.{{number-NOzero}}.1/24\n  ipv6 dhcp-client\n  !\n  no shutdown\n !\n!\n\n<strong>vpn 100</strong>\n interface ge0/2\n  ip address 192.168.{{number-NOzero}}.1/24\n  ipv6 dhcp-client\n  !\n  no shutdown\n !\n <strong>ip route 192.168.{{number-NOzero}}.0/24 192.168.{{number-NOzero}}.1</strong>\n!\n\nvpn 512\n interface eth0\n  ip address 10.1.61.{{number-NOzero}}1/23\n  no shutdown\n !\n ip route 0.0.0.0/0 10.1.60.1\n</pre><p>The Day1 Configuration File for each student vEdge has been pre-generated and uploaded to a shared repository.</p><p><span class=\"step\">STEP 1:</span> In the Smartty SSH session, issue the following commands to load the Day1 Configuration File; this is called a <strong>load merge</strong>. The password for the student user on the NFS is <strong>Cisc#123</strong>.</p><pre>request download vpn 512 scp://student@10.1.60.251:/var/student-vEdge-Day1/SAE/{{student-abbrev}}-vEdge-Day1.cfg \nfile list <strong>&lt;-- Ensures the file was successfully downloaded to the vEdge</strong>\nload merge {{student-abbrev}}-vEdge-Day1.cfg \n</pre><p>The following output shows the expected outcome of the load merge:</p><pre>vedge# <strong>request download vpn 512 scp://student@10.1.60.251:/var/student-vEdge-Day1/SAE/{{student-abbrev}}-vEdge-Day1.cfg</strong>\nstudent@10.1.60.251&#39;s password: <strong>Cisc#123</strong>\n{{student-abbrev}}-vEdge-Day1.cfg                                                                                                                                                 100% 1212    53.8KB/s   00:00    \nvedge# <strong>file list</strong>\narchive_id_rsa.pub\n{{student-abbrev}}-vEdge-Day1.cfg\nvedge# <strong>conf t</strong>\nEntering configuration mode terminal\nvedge(config)# <strong>load merge {{student-abbrev}}-vEdge-Day1.cfg</strong>\nvedge(config)# <strong>commit</strong>\nCommit complete.\n<strong>{{student-abbrev}}-vEdge</strong>(config)#\n</pre><p><span class=\"step\">STEP 2:</span> When the load merge is successful, the first thing to change is the hostname from vedge to <strong>{{student-abbrev}}-vEdge</strong>. Verify the rest of the configuration was successfully loaded by issuing a <strong>(do) show run</strong>. The configuration on the device should now match the examples posted above with the IP addresses changed.</p><p><span class=\"step\">STEP 3:</span> The final verification is checking whether or not the vEdge can reach the vBond via VPN 0 - this connectivity is a requirement for either device to register and push policies to the vEdge. On the vEdge CLI, ensure pings to the vBond address (172.19.1.233) via VPN 0 are successful.</p><pre>{{student-abbrev}}-vEdge# <strong>ping 172.19.1.233 vpn 0</strong>\nPing in VPN 0\nPING 172.19.1.233 (172.19.1.233) 56(84) bytes of data.\n64 bytes from 172.19.1.233: icmp_seq=1 ttl=62 time=37.3 ms\n64 bytes from 172.19.1.233: icmp_seq=2 ttl=62 time=21.9 ms\n64 bytes from 172.19.1.233: icmp_seq=3 ttl=62 time=28.4 ms\n64 bytes from 172.19.1.233: icmp_seq=4 ttl=62 time=36.2 ms\n^C\n--- 172.19.1.233 ping statistics ---\n6 packets transmitted, 6 received, 0% packet loss, time 5005ms\nrtt min/avg/max/mdev = 1.690/25.610/37.379/11.908 ms\ns21-vEdge# \n</pre>",
                        "path": "vedge-day1-configuration"
                    },
                    {
                        "name": "Registering the vEdge",
                        "id": "878742770521",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Registering the vEdge</h1><p>The last step to provisioning and setting up the vEdge is to register the virtual device with vManage. Registration is accomplished by &quot;checking-out&quot; and activating a <strong>Token</strong> on the vEdge. Each token is associated to a static <strong>Chassis Number</strong>. Whenever the device is torn-down and decommissioned from vManage, a new token is generated, but Chassis Number remains the same.</p><p>For the purposes of this lab, the tokens have been generated for the student. In a non-lab environment, users would navigate to <strong>Configuration &gt; Devices</strong> on vManage and select <strong>Generate Bootstrap Configuration</strong> for one of the available Chassis Numbers. The screenshot below illustrates this process - <strong>the student does NOT need to generate a token in vManage!</strong></p><p><img src=\"/uploads/a886692e-b0fc-7186-9c51-1d671bb080d4.png\" /></p><p><span class=\"step\">STEP 1:</span> The bootstrap configurations are being stored on a NFS share connected to the Windows jump host. On the desktop, double-click on the folder entitled <strong>vEdge-Bootstraps</strong> and open <strong>{{student-abbrev}}-vEdge-Bootstrap.cfg</strong> in Notepad.</p><div class=\"note\">There may be more than one bootstrap file in the folder. Please ensure you open the right one before proceeding!</div><p><img src=\"/uploads/a32643eb-deae-f575-969b-7e0c5d077da4.png\" /></p><p><span class=\"step\">STEP 2:</span> Because the Day1 Configuration File included both the vBond address and the Organization, the only items needed from the bootstrap configuration file are the token ID and the Chassis Number. Issue the following command on the vEdge CLI, copying and pasting the token ID and the Chassis Number where indicated. The registration process takes approximately 2-3 minutes.</p><pre>request vedge-cloud activate token <strong>(otp)</strong> chassis-number <strong>(uuid)</strong></pre><p><img src=\"/uploads/7f706ee9-a1b6-1839-193c-4af4de9052bc.png\" /></p><p>Once the vEdge is registered with the vManage, it will join the encrypted-overlay and start to communicate with other vEdges on the same &quot;network&quot;. The vEdges will share routes with other vEdges and start propagating statistics back to vManage. The next section will verify this process has started.</p>",
                        "path": "registering-the-vedge"
                    },
                    {
                        "name": "Verifying the Registration",
                        "id": "374787110838",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Verifying the Registration</h1><p><span class=\"step\">STEP 1:</span> Use the following commands to ensure the registration was successful. The first command indicates whether or not the certificate was accepted and is valid, while the second command lists the active connections between the vEdge and the other Viptela controller VMs - vBond, vSmart and vManage.</p><div class=\"note\">The vEdge is connected and is communicating with the controller VMs via the &quot;internet&quot; connections, NOT out-of-band. In other words, the controller VMs must have ip reachability to the vEdge via the data interfaces in VPN 0.</div><pre>{{student-abbrev}}-vEdge# <strong>show certificate validity</strong>\nThe certificate issued by b3f7d4be-90b1-4933-84e0-f15303f2d2bd is valid from  Jan 4 16:05:02 2018 GMT  (Current date is Thu Jan 4 16:08:35 GMT 2018) &amp; valid until  Jan 2 16:05:02 2028 GMT\n{{student-abbrev}}-vEdge# <strong>show control connections</strong>\n                                                                                       PEER                                          PEER                                    CONTROLLER \nPEER    PEER PEER            SITE       DOMAIN PEER                                    PRIV  PEER                                    PUB                                     GROUP      \nTYPE    PROT SYSTEM IP       ID         ID     PRIVATE IP                              PORT  PUBLIC IP                               PORT  LOCAL COLOR     STATE UPTIME      ID         \n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nvsmart  dtls 10.1.48.232     1000       1      172.19.1.232                            12346 172.19.1.232                            12346 public-internet up    0:00:01:08  0           \nvsmart  dtls 10.1.48.232     1000       1      172.19.1.232                            12346 172.19.1.232                            12346 mpls            up    0:00:01:19  0           \nvbond   dtls -               0          0      172.19.1.233                            12346 172.19.1.233                            12346 public-internet up    0:00:01:09  0           \nvbond   dtls -               0          0      172.19.1.233                            12346 172.19.1.233                            12346 mpls            up    0:00:01:20  0           \nvmanage dtls 10.1.48.231     1000       0      172.19.1.231                            12346 172.19.1.231                            12346 mpls            up    0:00:01:04  0           \n</pre><p><span class=\"step\">STEP 2:</span> The next item to verify is the routing table. In the following output, students can see from which VPN they are learning each route, as well as the protocol. The routes being learned from SAE-vEdge are marked with a <strong>omp</strong>, as they are being learned via the encryted, overlay tunnels. They are also marked with their <strong>color</strong>. Most importantly however, is the <strong>TLOC IP</strong> which indicates from which vEdge the routes are being learned. The TLOC IP is used to tell the student-vEdge where to send the traffic desitined for a 172.1.x.y/24 subnet.</p><div class=\"note\">The vEdges in this lab are part of a greater setup. Therefore, it is expected to see different, and many more, routes listed.</div><pre>{{student-abbrev}}-vEdge# <strong>show ip route</strong>\nCodes Proto-sub-type:\n  IA -&gt; ospf-intra-area, IE -&gt; ospf-inter-area,\n  E1 -&gt; ospf-external1, E2 -&gt; ospf-external2,\n  N1 -&gt; ospf-nssa-external1, N2 -&gt; ospf-nssa-external2,\n  e -&gt; bgp-external, i -&gt; bgp-internal\nCodes Status flags:\n  F -&gt; fib, S -&gt; selected, I -&gt; inactive,\n  B -&gt; blackhole, R -&gt; recursive\n\n                                            PROTOCOL  NEXTHOP     NEXTHOP          NEXTHOP                                                   \nVPN    PREFIX              <strong>PROTOCOL</strong>         SUB TYPE  IF NAME     ADDR             VPN      <strong>TLOC IP</strong>          <strong>COLOR</strong>            ENCAP  STATUS  \n---------------------------------------------------------------------------------------------------------------------------------------------\n0      0.0.0.0/0           static           -         ge0/0       10.10.{{number-NOzero}}.1       -        -                -                -      F,S     \n0      0.0.0.0/0           static           -         ge0/1       20.20.{{number-NOzero}}.1       -        -                -                -      F,S     \n0      10.1.61.{{number-NOzero}}1/32      connected        -         system      -                -        -                -                -      F,S     \n0      10.10.{{number-NOzero}}.0/24       connected        -         ge0/0       -                -        -                -                -      F,S     \n0      20.20.{{number-NOzero}}.0/24       connected        -         ge0/1       -                -        -                -                -      F,S     \n100    172.1.1.0/24        <strong>omp</strong>              -         -           -                -        10.1.60.71       <strong>mpls</strong>             ipsec  F,S     \n100    172.1.1.0/24        <strong>omp</strong>              -         -           -                -        10.1.60.71       <strong>public-internet</strong>  ipsec  F,S     \n100    172.1.2.0/24        <strong>omp</strong>              -         -           -                -        10.1.60.72       <strong>mpls</strong>             ipsec  F,S     \n100    172.1.2.0/24        <strong>omp</strong>              -         -           -                -        10.1.60.72       <strong>public-internet</strong>  ipsec  F,S     \n100    192.168.{{number-NOzero}}.0/24     connected        -         ge0/2       -                -        -                -                -      F,S     \n512    0.0.0.0/0           static           -         eth0        10.1.60.1        -        -                -                -      F,S     \n512    10.1.60.0/23        connected        -         eth0        -                -        -                -                -      F,S     \n</pre><p>In order to actually test the tunnels and routes, there is a test VM that students can use to generate traffic. <strong>SAE-Client</strong> is sitting behind the student-vEdge on {{student-csp1}}. Students can ping the interface-VLAN configured on the SAE-N9k&#39;s residing in the data center.</p><p><span class=\"step\">STEP 3:</span> On the desktop, open Smartty. Using the filter box in the right-hand corner, locate <strong>SAE-Client</strong>. Double-click on the profile, input the password (Cisc#123). Please make sure to use <strong>-I</strong> to indicate the correct interface - there is one jump host, with many different sub-interfaces.</p><pre>[student@SAE-Client ~]# <strong>ping -I ens192.1{{number}} 172.2.{{number-NOzero}}.1</strong>\nPING 172.2.{{number-NOzero}}.1 (172.2.{{number-NOzero}}.1) from 192.168.{{number-NOzero}}.2 ens192.1{{number}}: 56(84) bytes of data.\n64 bytes from 172.2.{{number-NOzero}}.1: icmp_seq=1 ttl=62 time=47.6 ms\n64 bytes from 172.2.{{number-NOzero}}.1: icmp_seq=2 ttl=62 time=28.8 ms\n64 bytes from 172.2.{{number-NOzero}}.1: icmp_seq=3 ttl=62 time=65.8 ms\n64 bytes from 172.2.{{number-NOzero}}.1: icmp_seq=4 ttl=62 time=27.9 ms\n^C\n--- 172.2.{{number-NOzero}}.1 ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 3005ms\nrtt min/avg/max/mdev = 27.923/42.564/65.886/15.598 ms\n</pre>",
                        "path": "verifying-the-registration"
                    }
                ]
            },
            {
                "name": "Deploying eCommerce VNFs",
                "id": "32576712387",
                "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Deploying eCommerce VNFs</h1><p>The second objective of this lab is to deploy the <strong>eCommerce Service Chain</strong> on {{student-csp2}}. The eCommerce Service Chain is responsible for receiving traffic from the WAN edge and passing it onto the webservers in the data center. In this lab, the eCommerce Service Chain consists of an ASAv and an Avi Service Engine (AviSE).</p><p>Students will deploy individual service chains, each consisting of their own ASA and AviSE, using the Network Services Orchestrator (NSO). In many ways, this design is a perfect example of SAE in action - many &quot;individaul&quot; branch connections, using orchestration to deploy cetrelized and virtualized network functions to reach services residing in the cloud and/or data center.</p><p class=\"text-center\"><img src=\"/uploads/88a69fb4-3284-b091-7ff0-065aadc007be.png\" /></p><p>While the ASA has a number of features that would be useful in a virtualized DMZ, it is primarily being used for NAT Translation in this setup. The VIP of the AviSE is being translated to the subnet of the outside interface of the ASA. The AviSE is responsible for load-balancing web traffic to a cluster of webservers in the data center. The AviSE can also provide rich analytics and performance measurements about the HTTP traffic traversing the service chain.</p><p>Please continue onto the next section to learn more about service orchestration in NSO.</p>",
                "path": "deploying-ecommerce-vnfs",
                "is_open": "false",
                "children": [
                    {
                        "name": "Introduction to NSO",
                        "id": "268769115142",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Introduction to NSO</h1><p>In recent years, the industry has identified automation as one of the main areas where service providers and large enterprises can reduce cost and improve time to market. This is becoming increasingly important as the average return per user and service diminishes each year. Service Defined Network principles deliver abstractions of existing network infrastructure, which enables faster service development and deployment. In the data center, this comes in the form of network products such as Application Centric Infrastructure, OpenStack and Cisco CloudCenter. In the future however, it is standards like NETCONF and YANG that will be the real driving force behind these abstractions, as they propose significant improvements to network management.</p><h2>Architecture</h2><p>The logical architecture below outlines the NSO&#39;s two-layered approach to orchestration and automation: a device manager that simplifies device interface integration and manages device configuration scenarios, and a service manager that applies service changes to devices. At the core of NSO is the configuration datastore, Configuration Database (CDB), which is in sync with the actual device and service configuration. It also manages relationships between services and devices and can handle revisions of device interfaces. Cisco NSO addresses the mapping from a desired service configuration to the corresponding device configuration through a dedicated mapping layer. The network can be a mix of traditional equipment, virtual devices and software solutions.</p><p>NSO leverages the power of YANG and NETCONF to streamline network operations and management. By focusing on latest standards and innovation, Cisco NSO is a true multi-vendor SDN solution. NSO is an automation software that can add, change, and delete services without the need to develop custom code. NSO brings consistency to service instantiation by removing complex configuration parameters from an end-user&rsquo;s workflow.</p><p class=\"text-center\"><img src=\"/uploads/333a2ce3-dbea-5396-fe61-84616ea588c7.png\" /></p><h2>Network Element Drivers</h2><p>NSO knows how to automatically communicate southbound to NETCONF and SNMP enabled devices. By supplying NSO with the YANG models of a NETCONF device, NSO knows the data models of the device, and through the NETCONF protocol knows exactly how to manipulate the device configuration. This can be used by any device that uses NETCONF or ConfD as management system, such as the CSP-2100.</p><p>Reality today is that many of the existing devices in current networks do not speak NETCONF. By far the most common way to configure network devices is through the CLI. Management systems typically connect over SSH to the CLI of the device and issue series of CLI configuration commands. Some devices do not even have a CLI, and thus SNMP, or even worse, various proprietary protocols, are used to configure the device. NSO can speak southbound not only to NETCONF-enabled devices, but through the NED architecture it can speak to any arbitrary management interface.</p><p>This is of course not entirely automatic like with NETCONF, and depending on the type of interface the device has for configuration, this may involve some programming. SNMP devices can be managed automatically, by supplying NSO with the MIBs for the device, with some additional declarative annotations. Devices with a Cisco style CLI can be managed by writing YANG models describing the data in the CLI, and a relatively thin layer of Java code to handle the communication to the devices. Other types of devices require more coding.</p><p>In this lab, students will be using many different types of NEDs. These NEDs have been pre-installed and loaded into NSO for the student. Whenever a service is deployed - or a configuration is made - from NSO, the appropriate NED will be used to communicate to the device.</p><pre>admin@ncs# show packages package oper-status \n                                                                                    PACKAGE                \n                     PROGRAM                                                        META     FILE          \n                     CODE     JAVA           BAD NCS  PACKAGE  PACKAGE  CIRCULAR    DATA     LOAD   ERROR  \nNAME             UP  ERROR    UNINITIALIZED  VERSION  NAME     VERSION  DEPENDENCY  ERROR    ERROR  INFO   \n-----------------------------------------------------------------------------------------------------------\n<strong>avi-vantage</strong>      X   -        -              -        -        -        -           -        -      -      \n<strong>cisco-asa</strong>        X   -        -              -        -        -        -           -        -      -      \n<strong>cisco-ios</strong>        X   -        -              -        -        -        -           -        -      -      \n<strong>csp2100-netconf</strong>  X   -        -              -        -        -        -           -        -      -      \ncspOnboard       X   -        -              -        -        -        -           -        -      -      \necommerce        X   -        -              -        -        -        -           -        -      -     \n</pre><div class=\"important-note\">In NSO, Services, NEDs, and Function Packs are also referred to as <strong>Packages</strong> - all user code that needs to run in NSO must be part of a package. Packages are basically a directory of files with a fixed file structure. These package consists of code, YANG modules, and custom WebUI widgets, etc. that are needed in order to add an application or function to NSO. Packages are a controlled way to manage loading and versions of custom applications.</div><h2>Function Packs</h2><p>In order to deploy these VNFs, students will be using a custom-built <strong>NSO Function Pack</strong> called <strong>cspOnboard</strong>. NSO Function Packs are collections of NSO code (YANG, Python, XML), that work together to accomplish a specific goal, or in this case, &quot;Service&quot;. The cspOnboard Service will prompt the user for the necessary information to deploy a VNF on the CSP-2100. This information will be fed into the CSP-2100 NED before it is sent southbound to the device. The following screenshot is how the service is represented in the GUI:</p><p><img src=\"/uploads/dbca43e4-0973-0039-0212-dab0f27b644c.png\" /></p><p>In the image above, the first (4) values - vnf-device-type, mgmt-ip-address, mgmt-port, vnf-authgroup - are configurations to enable communication between NSO and the southbound device. The remaining (7) variables are going to be used in the configuration sent to the CSP-2100.</p><div class=\"warning-note\">The NSO instance in this lab is shared between students. Please be mindful of your work, and do not make any configuration changes that may affect another student.</div><p>Students will also being using a <strong>Service Model</strong> called <strong>eCommerce</strong>. Unlike the Function Pack, this service model consists of a single package that will configure Day1 and Day2 configurations on the ASA and AviSE. For the ASA, this includes the NAT translation configurations, while on the AviSE it includes the HTTP Virtual Service. The following screenshot is how the service model is represented in the GUI:</p><p><img src=\"/uploads/0e25bba5-54be-321d-470a-7d02e9cbe963.png\" /></p><h2>NSO WebUI</h2><p>One of NSO&#39;s more powerful features is the ability to interact with the orchestrator using many different northbound APIs. Regardless of communication method used, NSO will operate exactly the same way. The NSO CLI and the WebUI are primarily intended for direct human interaction, while NETCONF, REST and JSON/RPC are primarily intended for implementing automation. In this lab, students will be primarily interacting with the NSO WebUI.</p><p><span class=\"step\">STEP 1:</span> Open a browser window in Chrome and navigate to <strong><a href=\"http://10.1.60.31:8080\">NSO WebUI</a></strong>. When prompted, login to NSO with <strong>admin/admin</strong>.</p><p><img src=\"/uploads/a921ee2c-688d-8dc2-4717-2df46c487ce2.png\" /></p><p>Welcome to the NSO WebUI. The WebUI can be customized as needed as evident by the <strong>SAE</strong> section added below the default navigation options. The WebUI is actually a &quot;living&quot; representation of the underlying NSO configuration, meaning any changes to service models, function packs, NEDs, etc. will automatically be visually generated when the page reloads. Throughout the next few sections of the lab, students will be revisting this &quot;homepage&quot; many times. The hompage can always be reached by clicking on the Cisco logo in the top left-hand corner.</p><div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>Item</th><th>Description</th></tr><tr><td>Commit manager</td><td>This is where users can view and commit any pending configurations. Before changes are committed, this page displays anticipated changes, as well as warnings for any expected configuration issues. This is also where students can perform Rollbacks.</td></tr><tr><td>Device manager</td><td>This is where users can view devices being managed by NSO. Users can view device configurations, as well as sync running-configurations to and from NSO.</td></tr><tr><td>Model browser</td><td>This page serves as a visual &quot;file-system&quot; for the underlaying NSO configuration, allowing users to point-and-click their way into various sections of the orchestrator.</td></tr><tr><td>Service manager</td><td>This is where actively deployed services can be viewed and edited.</td></tr></tbody></table></div><p><img src=\"/uploads/c9ef108d-4307-ba7a-2816-4a0b116accd7.png\" /></p>",
                        "path": "introduction-to-nso"
                    },
                    {
                        "name": "Deploying the ASA",
                        "id": "362347835628",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Deploying the ASA</h1><p>In this section, we are going to focus on deploying the first part of the service chain, the ASA. The ASA has (2) data interfaces - Outside and Inside. Each interface uses a different VLAN and a different subnet.</p><p class=\"text-center\"><img src=\"/uploads/2fd70bac-c5d8-ddd9-fc45-5b6190c63fe0.png\" /></p><h2>Day0 File Configuration</h2><p>Unlike the vEdge, the ASA (and the AviSE) supports <strong>Day0 Configuration Files</strong>. During deployment, the Day0 Configuration File will configure the ASA with a) management connectivity and b) any configurations that are the same across every ASA. Day0 Configuration Files provide consistency and scalability, while reducing deployment time. The following output contains the relevant Day0 Configuration File for {{student-abbrev}}-ASA:</p><div class=\"note\">The following Day0 configuration does not include any references to NAT, access-lists, or even the IP addresses of the data interfaces. This configuration only ensures management connectivity to the device. The other configurations will be done by the NSO eCommerce Service Model.</div><pre>ASA Version 9.8(0)71\n!\nhostname s01-ASA\nenable password Cisc#123\ndomain-name svs-nfv.cisco.com\n\n<strong>&lt;--Management Interface--&gt;</strong>\ninterface Management0/0\nnameif management\nsecurity-level 100\nip address 10.1.61.12 255.255.254.0\nno shutdown\n\n<strong>&lt;--Outside Interface--&gt;</strong>\ninterface TenGigabitEthernet0/0\nsecurity-level 0\nno shutdown\n\n<strong>&lt;--Inside Interface--&gt;</strong>\ninterface TenGigabitEthernet0/1\nsecurity-level 100\nno shutdown\n\n<strong>&lt;--Management Routing--&gt;</strong>\nroute management 10.0.0.0 255.0.0.0 10.1.60.1 1 \n\nusername student01 password Cisc#123 privilege 15 \n</pre><h2>Configuring cspOnboard for {{student-abbrev}}-ASA</h2><p><span class=\"step\">STEP 1:</span> In the NSO WebUI, click on the <strong>cspOnboard Function Pack</strong> under the <strong>SAE</strong> category.</p><p><img src=\"/uploads/093e59ec-ee88-46d2-d5f1-b4317fb89dde.png\" /></p><p><span class=\"step\">STEP 2:</span> The next page displays the currently configured instances of the cspOnboard service instantiated on NSO. Click on the <strong>plus symbol (+)</strong> to create a new instance of the cspOnboard service. Name the item <strong>{{student-abbrev}}-ServiceChain</strong>. Click <strong>confirm</strong> to continue. The configuration will be added to cspOnboard:cspOnboard/. Click on your service name to continue editing {{student-abbrev}}-ServiceChain.</p><p><img src=\"/uploads/6a69e242-1ac8-e587-32d8-f27c0954d063.png\" /></p><p>The first configuration page of the cspOnboard wizard determines on which CSP-2100 the service chain should be deployed. The service-number field will be use to identify the service chain &quot;owner&quot; (student), as well as automatically generate some of the data needed to deploy the VNF on the specified CSP-2100.</p><p><span class=\"step\">STEP 3:</span> Select <strong>{{student-csp2}}</strong> from the <strong>csp-device</strong> drop-down. Type in your student number <strong>({{number-NOzero}})</strong> into <strong>service-number</strong>. Click on the <strong>plus symbol (+)</strong> under <strong>vnf-onboard/</strong> to create a new item for <strong>{{student-abbrev}}-ASA.</strong>. Click <strong>confirm</strong> to create and add the item to vnf-onboard/. <strong>Click on {{student-abbrev}}-ASA to continue editing the VNF deployment configuration.</strong></p><p><img src=\"/uploads/72ecf27d-8cd5-189d-2fe0-6280fcd73525.png\" /></p><p><span class=\"step\">STEP 4:</span> Complete the vnf-onboard wizard as seen in the screenshot below. Please use your student values as applicable. The table below lists the values that vary from student to student - <strong>if the item is not listed in the table below, please use the values as shown in the screenshot.</strong> Once the wizard has been completed, click on the database icon to open the <strong>Commit manager</strong>.</p><div class=\"important-note\">Despite being the same for each student, the <strong>iso-name</strong> has been included in the following table due to people constantly mistyping the name. Missed periods and incorrectly typing the mgmt-ip-address are some of the more common mistakes.</div><div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>Field</th><th>Input</th></tr><tr><td>mgmt-ip-address</td><td>10.1.61.{{number-NOzero}}2</td></tr><tr><td>vnf-authgroup</td><td>{{student-abbrev}}-authgroup</td></tr><tr><td>iso-name</td><td>asa_9.8.2</td></tr><tr><td>vnic1-vlan</td><td>2{{number}}</td></tr><tr><td>vnic2-vlan</td><td>3{{number}}</td></tr></tbody></table></div><p><img src=\"/uploads/71814c31-425b-1507-40a5-4ec51aef09b5.png\" /></p><h2>Introducing the Commit manager</h2><p>When the Commit manager loads, the user will be presented with the current transaction. <strong>Transactions</strong> are automatically created each time a configuration needs to be committed. Because each commit is associated with a transaction, configurations can be rolled back whenever necessary. In addition, before a transaction can be committed, it must be considered &quot;valid&quot;. NSO will verify the desired configuration against the current configuration stored in the database, as well as the device model in the NED, to determine whether or not the transaction should be committed. If there are any reasons the transaction is NOT valid, they will be displayed under <strong>warnings</strong>. The current transaction can be removed/erased by clicking on the <strong>revert changes</strong> button.</p><p><img src=\"/uploads/61d41d41-40af-78ad-3a2e-62f7f27d4de3.png\" /></p><p><span class=\"step\">STEP 4:</span> Before commiting the transaction, students are encouraged to click on and compare the differences between <strong>config</strong> and <strong>native config</strong>. Each of these &quot;views&quot; will display the same transaction differently. The config view (left) displays the transaction as interpreted by NSO. Within the config view, the output on the left is the current configuration in the NSO CDB, while the output on the right shows the expected changes. The native config view (right) displays the transaction as seen by the NED device model. This is the actual configuration, in the device&#39;s native format, that will be sent southbound. In the case of the CSP-2100, this format is XML.</p><p><img src=\"/uploads/97f00802-277c-4000-f951-c7eeeab0f327.png\" /></p><p><span class=\"step\">STEP 5:</span> Click <strong>Commit</strong> to submit the transaction.</p><h2>Verifying {{student-abbrev}}-ASA Deployment</h2><p><span class=\"step\">STEP 6:</span> Students can verify the configuration was successful by ensuring the VNF was deployed on {{student-csp2}}. Open a browser window in Chrome and navigate to <strong><a href=\"http://{{student-csp2-ip}}\">{{student-csp2}}</a></strong>. When prompted, login to {{student-csp2}} with <strong>student/Cisc#123</strong>. Once the GUI refreshes, click on <strong>Configuration &gt; Services</strong> to display the currently running services on the CSP-2100. Identify {{student-abbrev}}-ASA and verify that the State is <strong>Deployed</strong>. The following is an example for student01.</p><p><img src=\"/uploads/666eb8f0-b28c-a0da-28d7-f4a8eb1cc5ae.png\" /></p>",
                        "path": "deploying-the-asa"
                    },
                    {
                        "name": "Deploying the AviSE",
                        "id": "938727778956",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><div class=\"important-note\"><strong>The AviSE usually requires an Authentication Token</strong>, which only lasts for 60 minutes, to be generated and placed into the Day0 Configuration File before deployment. This token is specific to each tenant and ensures that &quot;random&quot; service engines can not join an Avi Contoller. For the purposes of this lab, the requirement for an AUTHTOKEN has been removed.</div><h1>Deploying the AviSE</h1><p>Once services have deployed through NSO, they can be modified and re-deployed as necessary. The next step in this lab will be to modify the previously deployed cspOnboard service to include the AviSE. Similar to the ASA, the AviSE has (2) data interfaces. However, because the lab shares a cluster of webservers in the data center, the VLAN and subnet for the &quot;inside&quot; interface will be the same for every student.</p><p class=\"text-center\"><img src=\"/uploads/5805dda5-8c23-03e9-08b7-ef71fd064073.png\" /></p><h2>Day0 File Configuration</h2><p>The AviSE also uses Day0 Configuration Files to ensure management connectivity when the VNF deploys. The following output contains the relevant Day0 Configuration File for {{student-abbrev}}-AviSE:</p><pre>AVICNTRL: 10.1.60.51\nAVICNTRL_AUTHTOKEN: \navi.default-gw.SE: 10.1.60.1\navi.mgmt-ip.SE: 10.1.61.{{number-NOzero}}3\navi.mgmt-mask.SE: 255.255.254.0\n</pre><h2>Updating cspOnboard for {{student-abbrev}}-ASA</h2><p><span class=\"step\">STEP 1:</span> In the NSO WebUI, click on the <strong>cspOnboard Function Pack</strong>. If necessary, click on the small Cisco logo in the left-hand corner to return to the NSO WebUI homepage.</p><p><img src=\"/uploads/093e59ec-ee88-46d2-d5f1-b4317fb89dde.png\" /></p><p><span class=\"step\">STEP 2:</span> Identify <strong>{{student-abbrev}}-ServiceChain</strong> and click on <strong>edit</strong> to open your instance of cspOnboard. When the page loads, click on the <strong>plus symbol (+)</strong> to add another device to the service. For this <strong>vnf-name</strong> use <strong>{{student-abbrev}}-AviSE</strong>. Click <strong>confirm</strong>, and then <strong>click on {{student-abbrev}}-AviSE to configure the VNF.</strong> The following (example) screenshot illustrates Step 2 for student01:</p><p><img src=\"/uploads/8c3b33d5-1d46-5ef7-b15f-6a52670cd2ea.png\" /></p><p><span class=\"step\">STEP 3:</span> Complete the vnf-onboard wizard as seen in the screenshot below. The AviSE has several notable differences. For starters, because the AviSE is actually configured from a centralized controller, <strong>students will be using the mgmt-ip-address and mgmt-port of the controller, not their individual AviSE</strong>. While the vnf-authgroup and day0-type are the same, the iso-name needs to be updated for the AviSE. And finally, while the vnics are the same, students need to change the VLANs. The table below lists the values that vary from student to student - <strong>if the item is not listed in the table below, please use the values as shown in the screenshot.</strong></p><p>Once the wizard has been completed, click on the same database icon to open the <strong>Commit manager</strong>.</p><div class=\"note\">The following Day0 configuration does not include any references to NAT, access-lists, or even the IP addresses of the data interfaces. This configuration only ensures management connectivity to the device. The other configurations will be done by the NSO eCommerce Service Model.</div><div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>Field</th><th>Input</th></tr><tr><td>vnf-authgroup</td><td>{{student-abbrev}}-authgroup</td></tr><tr><td>iso-name</td><td>avise_sae_16.5.3</td></tr><tr><td>vnic1-vlan</td><td>3{{number}}</td></tr><tr><td>vnic2-vlan</td><td>401</td></tr></tbody></table></div><p><img src=\"/uploads/135d0f6d-120c-a8a6-8cbd-016be808ddd0.png\" /></p><h2>Commit Manager and Verification</h2><p><span class=\"step\">STEP 4:</span> Students are once again encouraged to verify the transaction in the Commit manager. Click on the various different views (changes, warnings, config, native config) to ensure the transaction is consistent with the previous transaction to deploy the ASA on the same CSP-2100. If the top-left corner states the transaction is <strong>valid</strong>, click <strong>commit</strong> to submit the AviSE transaction.</p><p><img src=\"/uploads/785c8892-c740-3326-b646-3573031eb99c.png\" /></p><p><span class=\"step\">STEP 5:</span> Students can verify the configuration was successful by ensuring the VNF was deployed on {{student-csp2}}. Open a browser window in Chrome and navigate to <strong><a href=\"http://{{student-csp2-ip}}\">{{student-csp2}}</a></strong>. When prompted, login to {{student-csp2}} with <strong>student/Cisc#123</strong>. Once the GUI refreshes, click on <strong>Configuration &gt; Services</strong> to display the currently running services on the CSP-2100. Identify {{student-abbrev}}-AviSE and verify that the State is <strong>Deployed</strong>. The following is an example for student01.</p><p><img src=\"/uploads/579c0e27-6bd1-b4ec-2e4e-6a5b73f83f4c.png\" /></p>",
                        "path": "deploying-the-avise"
                    },
                    {
                        "name": "Syncing the VNFs with NSO",
                        "id": "690700533367",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Syncing the VNFs with NSO</h1><p>Before devices can be configured by NSO, they need to be <strong>connected</strong> and <strong>synced</strong>. The cspOnboard function pack only instructed NSO &quot;how&quot; to reach the devices, not what to do with them once they were registered. NSO will not make any changes to a device if the running-configuration in the CDB does not match the current running-configuration on the device. Thankfully, the NSO GUI makes it extremely easy to connect and sync with devices.</p><p><span class=\"step\">STEP 1:</span> In the NSO WebUI, click on <strong>Device manager</strong>. If necessary, click on the small Cisco logo in the left-hand corner to return to the NSO WebUI homepage.</p><p><img src=\"/uploads/46e04407-be72-b67a-d024-1d8c7e3a2dd2.png\" /></p><p><span class=\"step\">STEP 2:</span> Because the ASA NED uses SSH and CLI to configure the southbound device, NSO needs to fetch the device&#39;s host key before it can use SSH to connect to {{student-abbrev}}-ASA. In the device list, identify {{student-abbrev}}-ASA and click on <strong>Settings</strong> to open the configuration page.</p><p><img src=\"/uploads/22d987ca-94c4-73fc-c65b-e6c9a4f0ea15.png\" /></p><p>When the page reloads, students can use the URL in the top left-hand corner to verify from which ASA they are fetching SSH keys - ensure it says <strong>ncs:devices/devices({{student-abbrev}}-ASA)</strong>.</p><p><span class=\"step\">STEP 3:</span> In top menu bar, check <strong>show actions</strong> to display available interactions that NSO can perform on or to the southbound device. To proceed, click on <strong>ssh/</strong> near the bottom of the current window.</p><p><img src=\"/uploads/2e0a1948-5d26-efaf-c747-3b10a9c86212.png\" /></p><p><span class=\"step\">STEP 4:</span> On the ssh/ page, click on the <strong>fetch-host-keys</strong> action button, then click <strong>Run fetch-host-keys action</strong>. If the action is successful, the key will added to the NSO CDB. In the top left-hand corner, click on <strong>Device Manager</strong> to return to the top of the Device manager &quot;tree&quot;.</p><p><img src=\"/uploads/38a87048-e0bf-5966-b71f-e9ec79a946f0.png\" /></p><p><span class=\"step\">STEP 5:</span> In the device list, identify and select <strong>{{student-abbrev}}-ASA</strong> and <strong>{{student-abbrev}}-AviSE</strong> by checking the boxes next to their names. On the right, click on the <strong>Actions Menu</strong> and select <strong>connect</strong>. If the connection is successful, the gray fields underneath each column should turn green. The text inside of each field will also change from <strong>N/A</strong> to <strong>yes</strong>. With the devices still selected, perform the same steps, this time selecting <strong>sync-from</strong> from the Actions Menu. Once again, the fields should change from gray to green and from N/A to yes.</p><p><img src=\"/uploads/76ef5c12-09a2-7e53-a448-59ce9c85378a.png\" /></p><p><span class=\"step\">STEP 6:</span> The devices are now successfully connected and synced with NSO. In order to verify this, students can click on <strong>config</strong> next to either device to see the running-configurations that were part of the Day0 configuration files. For example, students can find the management configuration pre-configured on the ASA.</p><p>The resulting page is a procedurely-generated page based on the NED&#39;s device model. Whenever changes are made to the device via NSO, the CDB is automatically updated. Users can even make changes from this page without using a service or function pack! If a device is configured &quot;out-of-band&quot; from NSO, users must perform a sync-from (or a sync-to) before NSO will allow any further changes.</p>",
                        "path": "syncing-the-vnfs-with-nso"
                    }
                ]
            },
            {
                "name": "eCommerce Service Model",
                "id": "104001276087",
                "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>eCommerce Service Model</h1><p>With the VNFs deployed and synced, each student now has a &quot;generic&quot; service chain, with basic management connectivity, to utilize for any number of network requirements ... such as routing eCommerce traffic in and out of the data center! Students will use the <strong>eCommerce NSO Service Model</strong> to configure the virtual machines with the necessary <strong>Day1 configurations</strong> to handle eCommerce traffic originating from the WAN edge.</p><p>The eCommerce Service Model was written specifically for this lab, but could easily be modified to fit any number of scenarios and environments. Here is an example of the service model as it appears in the NSO WebUI:</p><p><img src=\"/uploads/6742c789-df32-aa2b-9927-4179cd14310b.png\" /></p><p>This service model requests a student number, 3 subnets and the devices under configuration. The student number will be used to individualize each configuration, ensuring the configurations are tied to the right student. The subnets will be used to configure interfaces on both devices, as well as NAT and the ACL and routing rules on the ASA.</p>",
                "path": "ecommerce-service-model",
                "is_open": "true",
                "children": [
                    {
                        "name": "Structure of the eCommerce Service Model",
                        "id": "771581857218",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Structure of the eCommerce Service Model</h1><p>Generally, service models utilize 3 different types of files to configure end devices - YANG, Python, and XML. When combined with other accessory files into a specific directory structure, service models are considered a &quot;package&quot;, similar to NEDs and Function Packs.</p><h3>YANG</h3><p>The YANG file determines the structure of the model, including the variables required to make any configuration changes. The model pictured above was procedurelly generated from the YANG file, where the input fields and selection menues map to the variables in the code. For example, the following output is the section of the YANG for <strong>asa-outside-subnet</strong>:</p><pre>leaf asa-outside-subnet {\n\ttailf:info &quot;ASA Outside Subnet&quot;;\n    type inet:ipv4-prefix { \n    \tpattern &quot;172\\.2\\.[1-20]\\.0/24&quot;;\n    }\n}\n</pre><p>For this <strong>leaf</strong> (YANG for an individual attribute of a node), the model is looking for an IP subnet that adheres to the specified pattern; the YANG will deny any inputs that do no match.</p><p>The entire YANG file can be found in the <a href=\"http://svs-incubation.cisco.com/courses/sae/ecommerce-service-model-config-files\">Appendix</a>.</p><div class=\"note\">YANG is first a language for describing data models. The YANG language could be used to describe ANY data model, but it was designed to describe networking data models. If you are interested in learning more about YANG, please consider visiting the World of Solutions, DevNet and the following online Cisco Learning Lab, <a href=\"https://learninglabs.cisco.com/lab/06-dmi-02-introducing-yang-data-modeling/step/1\">Introducing YANG Data Modeling</a></div><h3>Python</h3><p>NSO can use Python (or Java) to manipulate YANG inputs before they are passed into the XML device model. In the YANG model, there are a few lines of code that associate the YANG model to the Python code:</p><pre>list ecommerce {\n\tdescription &quot;This is the eCommerce Service for Cisco Live&quot;;\n\t\n\tuses ncs:service-data;\n\t<strong>ncs:servicepoint ecommerce-servicepoint;</strong>\n}\n</pre><p>Once the inputs are accepted by the YANG service model, they are passed into the Python script where they can be modified and altered. For the eCommerce Service Model, the Python scripts reads in an IP subnet, and drops the &quot;.0/24&quot; before writing it to a different variable entirely. This new variable is then passed onto the device template (XML). Once again, here is the asa-outside-subnet being &quot;split&quot; and re-written:</p><pre><code class=\"language-python\">\n\tclass ServiceCallbacks(Service):\n    @Service.create\n    def cb_create(self, tctx, root, service, proplist):\n        self.log.info('Service create(service=', service._path, ')')\n\n        vars = ncs.template.Variables()\n        template = ncs.template.Template(service)\n\n        read_asa_outside_subnet = service.asa_outside_subnet\n        a,b,c,d  = read_asa_outside_subnet.split(\".\")\n        write_asa_outside_subnet = '%s.%s.%s' % (a,b,c)\n\n    class Main(ncs.application.Application):\n    def setup(self):\n        self.log.info('Main RUNNING')\n        self.register_service('ecommerce-servicepoint', ServiceCallbacks)\n\n    def teardown(self):\n        self.log.info('Main FINISHED')</code></pre><p>The entire Python file can be found in the <a href=\"http://svs-incubation.cisco.com/courses/sae/ecommerce-service-model-config-files\">Appendix</a>.</p><h3>XML</h3><p>Finally, the massaged values from the Python file are passed to the XML device template. This device template is the actual configuration, as understood by NSO and the NEDs, that will be pushed to the southbound devices. For that reason, the template file contains XML configuration output for both the ASA and the AviSE. Variables, from either YANG or the Python, are represented by placeholders in the XML code. See below for the same asa-outside-subnet example:</p><pre>&lt;config-template xmlns=&quot;http://tail-f.com/ns/config/1.0&quot;&gt;\n  &lt;devices xmlns=&quot;http://tail-f.com/ns/ncs&quot;&gt;\n&lt;!--ASA Configuration--&gt;\n    &lt;device&gt;\n      &lt;name&gt;{/asa}&lt;/name&gt;\n      &lt;config&gt;\n        &lt;interface xmlns=&quot;http://cisco.com/ned/asa&quot;&gt;\n          &lt;TenGigabitEthernet&gt;\n            &lt;name&gt;0/0&lt;/name&gt;\n            &lt;ip&gt;\n              &lt;address&gt;\n                &lt;ip&gt;\n                  &lt;host-ip&gt;<strong>{$ASA_OUTSIDE_SUBNET}</strong>.2&lt;/host-ip&gt;\n                  &lt;netmask&gt;255.255.255.0&lt;/netmask&gt;\n                &lt;/ip&gt;\n              &lt;/address&gt;\n            &lt;/ip&gt;\n          &lt;/TenGigabitEthernet&gt;\n        &lt;/interface&gt;\n      &lt;/config&gt;\n    &lt;/device&gt; \n</pre><p>The entire device template can be found in the <a href=\"http://svs-incubation.cisco.com/courses/sae/ecommerce-service-model-config-files\">Appendix</a>.</p>",
                        "path": "structure-of-the-ecommerce-service-model"
                    },
                    {
                        "name": "Deploying the eCommerce Service Model",
                        "id": "921057604868",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Deploying the eCommerce Service Model</h1><p><span class=\"step\">STEP 1:</span> On the NSO WebUI homepage, click on the <strong>eCommerce Service Model</strong>. If necessary, click on the small Cisco logo in the left-hand corner to return to the NSO WebUI homepage.</p><p><img src=\"/uploads/f30f2c76-8912-cec5-1cda-f3232ab96e64.png\" /></p><p><span class=\"step\">STEP 2:</span> When the next page loads, click on the <strong>plus symbol (+)</strong> to create a new instance of the service. Name your service <strong>{{student-abbrev}}-eCommerce</strong>. Click <strong>confirm</strong> to continue and then click on the name of your service model to open the editing wizard.</p><p><img src=\"/uploads/e6951811-6445-c8e4-df92-a675c89d48ec.png\" /></p><p><span class=\"step\">STEP 3:</span> Complete the wizard as seen below - <strong>reference the following table to ensure the right student number, IP addresses and devices are used</strong>. Remember, because the webservers are shared and exist on the same subnet, the <strong>avi-inside-subnet</strong> will use the same subnet address <strong>(172.4.1.0/24)</strong> for every student. Once completed, click on the blue database icon open the <strong>Commit manager</strong>.</p><div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>Field</th><th>Input</th></tr><tr><td>student-number</td><td>{{number-NOzero}}</td></tr><tr><td>asa-outside-subnet</td><td>172.2.{{number-NOzero}}.0/24</td></tr><tr><td>shared-subnet</td><td>172.3.{{number-NOzero}}.0/24</td></tr><tr><td>avi-inside-subnet</td><td>172.4.1.0/24</td></tr><tr><td>asa/</td><td>{{student-abbrev}}-ASA</td></tr><tr><td>avi/</td><td>{{student-abbrev}}-AviSE</td></tr></tbody></table></div><div class=\"note\">Notice how these fields map directly to the variables being used in the YANG, Python and XML.</div><p><img src=\"/uploads/5bb837ef-eaba-f904-a788-fcae1f70856c.png\" /></p><p><span class=\"step\">STEP 4:</span> In the Commit Manager, click on <strong>config</strong> and <strong>native config</strong> to see the configuration changes being sent to the southbound devices. Ensure the transaction is consistent with the device template (XML) discussed in the previous section. If the top-left corner states the transaction is <strong>valid</strong>, click <strong>commit</strong> to submit the eCommerce transaction.</p><p><img src=\"/uploads/de41f04b-4501-889f-2b14-0ca67d631b87.png\" /></p>",
                        "path": "deploying-the-ecommerce-service-model"
                    },
                    {
                        "name": "Verifying the eCommerce Service Chain",
                        "id": "848758710463",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Verifying the eCommerce Service Chain</h1><p>With the eCommerce Service Chain deployed, students can now expect traffic to successfully pass from the branch, through SAE, and onto the webservers in the data center. In this section, students will verify the configurations on the VNFs before proceeding to generate traffic on SAE-Client.</p><h2>ASA Configuration</h2><p><span class=\"step\">STEP 1:</span> In the NSO WebUI, click on <strong>Device manager</strong>. If necessary, click on the small Cisco logo in the left-hand corner to return to the NSO WebUI homepage.</p><p><img src=\"/uploads/46e04407-be72-b67a-d024-1d8c7e3a2dd2.png\" /></p><p><span class=\"step\">STEP 2:</span> Once the page loads, identify {{student-abbrev}}-ASA and click on <strong>Config</strong> to open the configuration page, <strong>ncs:devices/device({{student-abbrev}}-ASA)/config/</strong>.</p><p><span class=\"step\">STEP 3:</span> On the configuration page, students are welcomed to find the interface and NAT configurations completed by the eCommerce Service model. The various configurations to look for are listed (in the order that they appear in the configuration) below:</p><div class=\"note\">After navigating into a sub-menu, students can click on the small, black arrow next to the URL directory to navigate up one level in the device configuration tree.</div><ul><li>asa:route/</li><li>asa:interface/TenGigabitEthernet<strong>{0/1}</strong>/ip/address/&gt;</li><li>asa:interface/TenGigabitEthernet<strong>{0/2}</strong>/ip/address/&gt;</li><li>asa:object</li><li>asa:object/network{vip}/nat/</li><li>asa:access-list/</li><li>asa:access-group/</li></ul><p><img src=\"/uploads/0e683785-0e8e-3583-1470-67e4f4544569.png\" /></p><h2>AviSE Configuration</h2><p>For the AviSE, students are going to verify the configuration using the controller&#39;s web portal - not only is the configuration easier to view in the web portal, the students can use the controller&#39;s tools to analyze the HTTP traffic as it traverses the service chain.</p><p><span class=\"step\">STEP 4:</span> Open a browser window in Chrome and navigate to the <strong><a href=\"http://10.1.60.51\">Avi Controller</a></strong>. When prompted, login to the controller with <strong>{{student-name}}/Cisc#123</strong>.</p><p><img src=\"/uploads/daaaf472-21a6-c2de-bf50-0257835c16ed.png\" /></p><p><span class=\"step\">STEP 5:</span> Students should ensure the AviSE interfaces were programmed with IP addresses. In the left-hand corner, (1) click on the &quot;hamburger menu&quot; and select <strong>Infrastructure</strong> from the drop-down panel. When the dashboard loads, (2) select <strong>Service Engine</strong> from the top menu bar. In the main panel, students should see a single item listed - the management IP address of their AviSE (10.1.61.{{number-NOzero}}1). (3) Click on the small pencil icon to open the editing wizard.</p><p>In the wizard, students should see 3 IP address (4) - one for each interface (eth1 and eth2) and one for the <strong>Virtual IP</strong>(VIP). The VIP was programmed as part of the Virtual Service. In the right-hand corner of the wizard, (5) click the <strong>X</strong> to close the window.</p><p><img src=\"/uploads/14c21ba2-8396-d2c6-97ff-67074b1da8cf.png\" /></p><p><span class=\"step\">STEP 6:</span> The next object to verify is the Virtual Service. Once again, (1) click on the hamburger menu and select <strong>Applications</strong> from the drop-down panel. When the dashboard loads, (2) select <strong>Virtual Services</strong> from the top menu bar. In the main panel, students should see a single item listed, <strong>{{student-abbrev}}-HTTP-VirtService</strong>; it&#39;s health should be 100. (3) Click on the small pencil icon to open the editing wizard.</p><p>In the wizard, students should (4) take note of the <strong>VIP Address</strong>, <strong>Services</strong>, and the <strong>Pool</strong>. Students can (5) click on the small pencil icon next to <strong>{{student-abbrev}}-HTTP-VirtService-pool</strong>, and then (6) select <strong>Servers</strong> to see the 3 webservers configured. In the right-hand corner of the wizard, (7) click the <strong>X</strong> to close the window.</p><p><img src=\"/uploads/9bea277c-1be3-f1f4-4033-3e0fa628f672.png\" /></p><p><span class=\"step\">STEP 7:</span> Before proceeding, click on the name of your Virtual Service to open the <strong>Analytics</strong> view. The graphs on this page will be used in the next section.</p><p><img src=\"/uploads/4cf0741e-24d4-4565-ef05-00a9559e6e84.png\" /></p><h2>Sending Traffic</h2><p>The last verification step is to send traffic from the client in the branch to the webservers in the data center.</p><p><span class=\"step\">STEP 8:</span> On the desktop, open Smartty. Using the filter box in the right-hand corner, locate <strong>SAE-Client</strong>. Double-click on the profile, and input the password (Cisc#123). For starters, use <strong>curl</strong> to retrieve the webpage from the webservers.</p><pre>[student@SAE-Client ~]$ <strong>curl --interface ens192.1{{number}} 172.2.{{number-NOzero}}.3</strong>\n &lt;html&gt;\n   &lt;head&gt;\n &lt;title&gt;LTRCLD2121 - Virtualize, Orchestrate and Automate Your DMZ Extranet, Internet, and Public Cloud Connections with Secure Agile Exchange! &lt;/title&gt;\n &lt;/head&gt;\n   &lt;body&gt;\n     &lt;h1&gt;Congratulations! This message indicates your service chain was successfully deployed and configured. &lt;/h1&gt;\n   &lt;/body&gt;\n &lt;/html&gt;\n</pre><p><span class=\"step\">STEP 9:</span> Next, students are going to use the <strong>Apache Benchmarking Tool</strong>, or &quot;ab&quot; for short. ab is a tool for benchmarking your server by showing how many requests per second an Apache installation is capable of serving. The following command is going to send a total of 1000 requests (batches of 20) to the NAT interface on the ASA, measuring how long each request takes to be processed by the webservers.</p><div class=\"important-note\">While this process is running, please proceed to <strong>Step 10</strong>. Students are going to view these requests from the perspective of the AviSE.</div><pre>[student@SAE-Client ~]$ <strong>ab -n 300 -c 20 -B 192.168.{{number-NOzero}}.2 http://172.2.{{number-NOzero}}.3/</strong>\nThis is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking 172.2.{{number-NOzero}}.3 (be patient)\nCompleted 100 requests\nCompleted 200 requests\nCompleted 300 requests\nFinished 300 requests\n\n\nServer Software:        Apache/2.4.6\nServer Hostname:        172.2.{{number-NOzero}}.3\nServer Port:            80\n\nDocument Path:          /\nDocument Length:        316 bytes\n\nConcurrency Level:      20\nTime taken for tests:   52.372 seconds\nComplete requests:      300\nFailed requests:        0\nWrite errors:           0\nTotal transferred:      173400 bytes\nHTML transferred:       94800 bytes\nRequests per second:    5.73 [#/sec] (mean)\nTime per request:       3491.479 [ms] (mean)\nTime per request:       174.574 [ms] (mean, across all concurrent requests)\nTransfer rate:          3.23 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:       34  189 342.9     55    1076\nProcessing:    38 2190 7218.6    260   51045\nWaiting:       38 2180 7221.4    253   51045\nTotal:         84 2379 7251.8    336   51111\n\nPercentage of the requests served within a certain time (ms)\n  50%    336\n  66%    721\n  75%   1314\n  80%   1493\n  90%   3108\n  95%  12702\n  98%  26479\n  99%  51110\n 100%  51111 (longest request)\n</pre><p><span class=\"step\">STEP 10:</span> In Chrome, open the Avi Controller web portal to show statistics on the Virtual Service. If necessary, log back into the web portal with {{student-name}}/Cisc#123. Students should be viewing the <strong>Analytics</strong> page.</p><p>Because we ran apache bench, the <strong>End to End Timing</strong> graph should be showing spikes in traffic, including responses times from both the clients and the servers; hovering over a section of the graph will populate data just above the chart for that specific moment in time. On the right, the <strong>Virtual Services Metrics</strong> section displays the averages for various, meaningful attributes, such as Throughput and Open Connections.</p><p><img src=\"/uploads/03ce11e7-0e16-7482-5ec4-19ca7ad969c1.png\" /></p><p><span class=\"step\">STEP 11:</span> Near the top of the page, click on <strong>Logs</strong>. Here, students can see log entires for each and every request handled by the Virtual Service. Clicking on a log will display additional information about the request, such as who sent it, which server from the pool responded, and what was the response code (200, 400, etc.)</p><p><img src=\"/uploads/af9005d3-87b8-2108-1762-e677bb6d077f.png\" /></p>",
                        "path": "verifying-the-ecommerce-service-chain"
                    },
                    {
                        "name": "Deleting the eCommerce Service Model",
                        "id": "116431692365",
                        "data": "<style type=\"text/css\">span.step {\n    color: rgb(240, 76, 55);\n    font-weight: bold;\n}</style><h1>Deleting the eCommecre Service Model</h1><p>Because NSO has a top-level view of both device configurations and service models, it is as easy to remove configurations as it is to deploy them. The following steps will instruct students how to quickly remove their eCommerce service model from their VNFs.</p><p><span class=\"step\">STEP 1:</span> On the NSO WebUI homepage, click on the <strong>eCommerce Service Model</strong>. If necessary, click on the small Cisco logo in the left-hand corner to return to the NSO WebUI homepage.</p><p><img src=\"/uploads/f30f2c76-8912-cec5-1cda-f3232ab96e64.png\" /></p><p><span class=\"step\">STEP 2:</span> When the next page loads, identify your service deployment, <strong>{{student-abbrev}}-eCommerce</strong>, and select the checkbox next to the appropriate row. Click on the <strong>minus symbol (-)</strong> to remove the service model, and then click on the blue database icon open the <strong>Commit manager</strong>.</p><p><img src=\"/uploads/5731706f-29cb-7a9e-c33b-7ee899fcb939.png\" /></p><p><span class=\"step\">STEP 4:</span> In the Commit Manager, click on <strong>config</strong> and <strong>native config</strong> to see the configuration changes being sent to the southbound devices. The configurations should be the &quot;exact&quot; opposite of the configurations used to configure the devices. For example, on the ASA, <strong>&quot;no&quot;</strong> has been added before every configuration statement to remove only those things configured during the deployment section. If the top-left corner states the transaction is <strong>valid</strong>, click <strong>commit</strong> to remove the eCommerce transaction.</p><p><img src=\"/uploads/ff94f72a-cdfd-3009-1eed-d9719e74b549.png\" /></p><p>With the service model removed, these VNFs are now available to be torn down, or to be used for another networking function.</p>",
                        "path": "deleting-the-ecommerce-service-model"
                    }
                ]
            },
            {
                "name": "Thank You",
                "id": "651011102122",
                "data": "<h1 class=\"text-center\">Thank you for completing our SAE lab at Cisco Live Barcelona 2018!</h1><p class=\"text-center\">We really hope you enjoyed our lab, and we hope you enjoy the rest of your conference experience. Participants are welcomed to stay in-touch with the lab proctors in the Spark room.</p><h3 class=\"text-center\">Please Remember to complete your surveys!</h3><p class=\"text-center\"><img style=\"width: 60%; height: 60%\" src=\"/images/SVS_Logo.png\" /></p><h1 class=\"text-center\">Visit us at <a href=\"http://getsvs.cisco.com/\"><strong>getsvs.cisco.com</strong></a>!</h1>",
                "path": "thank-you"
            },
            {
                "name": "Appendix",
                "id": "629984397135",
                "data": "",
                "path": "appendix",
                "is_open": "false",
                "children": [
                    {
                        "name": "eCommerce Service Model Config Files",
                        "id": "568289180790",
                        "data": "<h1>eCommerce Service Model</h1><p>The following YANG, Python and XML outputs are from the <strong>eCommerce Service Model</strong>. Using the underlying NSO architecture, these files are responsible for configuring and enabling Day1 operations on both the ASA and the AviSE.</p><h2>YANG</h2><pre>module ecommerce {\n\n  namespace &quot;http://example.com/ecommerce&quot;;\n  prefix ecommerce;\n\n  import ietf-inet-types {\n    prefix inet;\n  }\n  import tailf-common {\n    prefix tailf;\n  }\n  import tailf-ncs {\n    prefix ncs;\n  }\n\n  revision 2016-01-01 {\n    description\n      &quot;Initial revision.&quot;;\n  }\n\n    list ecommerce {\n      description &quot;This is the eCommerce Service for Cisco Live&quot;;\n\n      uses ncs:service-data;\n      ncs:servicepoint ecommerce-servicepoint;\n\n      key name;\n      leaf name {\n      tailf:info &quot;Unique Service Name&quot;;\n      tailf:cli-allow-range;\n      type string;\n      mandatory true;\n      }\n\n      leaf-list asa {\n        tailf:info &quot;Select the ASA to configure&quot;;\n        type leafref {\n          path &quot;/ncs:devices/ncs:device/ncs:name&quot;;\n        }\n        must &#39;contains(current(), &quot;ASA&quot;)&#39;;\n      }\n\n      leaf-list avi {\n        tailf:info &quot;Select the Avi Controller Username &quot;;\n        type leafref {\n          path &quot;/ncs:devices/ncs:device/ncs:name&quot;;\n        }\n        must &#39;contains(current(), &quot;AviSE&quot;)&#39;;\n      }\n\n      leaf student-number {\n        tailf:info &quot;Student Number&quot;;\n        type string {\n          length &quot;1..32&quot;;\n        }\n      }\n\n      leaf asa-outside-subnet {\n        tailf:info &quot;ASA Outside Subnet&quot;;\n        type inet:ipv4-prefix { \n         pattern &quot;172\\.2\\.[1-20]\\.0/24&quot;;\n        }\n      }\n\n      leaf shared-subnet {\n        tailf:info &quot;Subnet between Inside ASA and Outside AviSE Interfaces&quot;;\n        type inet:ipv4-prefix { \n         pattern &quot;172\\.3\\.[1-20]\\.0/24&quot;;\n        }\n      }\n\n      leaf avi-inside-subnet {\n        tailf:info &quot;AviSE Inside Subnet&quot;;\n        type inet:ipv4-prefix { \n         pattern &quot;172\\.4\\.1\\.0/24&quot;;\n        }\n      }\n\n    }\n}\n</pre><h2>Python</h2><pre><code class=\"language-python\">\n# -*- mode: python; python-indent: 4 -*-\nimport ncs\nfrom ncs.application import Service\n\n\n# ------------------------\n# SERVICE CALLBACK EXAMPLE\n# ------------------------\nclass ServiceCallbacks(Service):\n\n    # The create() callback is invoked inside NCS FASTMAP and\n    # must always exist.\n    @Service.create\n    def cb_create(self, tctx, root, service, proplist):\n        self.log.info('Service create(service=', service._path, ')')\n\n        vars = ncs.template.Variables()\n        template = ncs.template.Template(service)\n\n        read_asa_outside_subnet = service.asa_outside_subnet\n        a,b,c,d  = read_asa_outside_subnet.split(\".\")\n        write_asa_outside_subnet = '%s.%s.%s' % (a,b,c)\n\n        read_avi_inside_subnet = service.avi_inside_subnet\n        a,b,c,d  = read_avi_inside_subnet.split(\".\")\n        write_avi_inside_subnet = '%s.%s.%s' % (a,b,c)\n\n        read_shared_subnet = service.shared_subnet\n        a,b,c,d  = read_shared_subnet.split(\".\")\n        write_shared_subnet = '%s.%s.%s' % (a,b,c)\n\n        number_NOzero = service.student_number\n        read_student_number = service.student_number\n        write_student_number = str(read_student_number).rjust(2,\"0\")\n\n        vars = ncs.template.Variables()\n        vars.add('ASA_OUTSIDE_SUBNET', write_asa_outside_subnet)\n        vars.add('AVI_INSIDE_SUBNET', write_avi_inside_subnet)\n        vars.add('SHARED_SUBNET', write_shared_subnet)\n        vars.add('STUDENT_NUMBER', write_student_number)\n        vars.add('number_NOzero', number_NOzero)\n        template = ncs.template.Template(service)\n        template.apply('ecommerce-template', vars)\n\n# ---------------------------------------------\n# COMPONENT THREAD THAT WILL BE STARTED BY NCS.\n# ---------------------------------------------\nclass Main(ncs.application.Application):\n    def setup(self):\n        self.log.info('Main RUNNING')\n        self.register_service('ecommerce-servicepoint', ServiceCallbacks)\n\n    def teardown(self):\n        self.log.info('Main FINISHED')\n</code></pre><h2>XML</h2><pre>&lt;config-template xmlns=&quot;http://tail-f.com/ns/config/1.0&quot;&gt;\n  &lt;devices xmlns=&quot;http://tail-f.com/ns/ncs&quot;&gt;\n&lt;!--ASA Configuration--&gt;\n    &lt;device&gt;\n      &lt;name&gt;{/asa}&lt;/name&gt;\n      &lt;config&gt;\n        &lt;interface xmlns=&quot;http://cisco.com/ned/asa&quot;&gt;\n          &lt;TenGigabitEthernet&gt;\n            &lt;name&gt;0/0&lt;/name&gt;\n            &lt;ip&gt;\n              &lt;address&gt;\n                &lt;ip&gt;\n                  &lt;host-ip&gt;{$ASA_OUTSIDE_SUBNET}.2&lt;/host-ip&gt;\n                  &lt;netmask&gt;255.255.255.0&lt;/netmask&gt;\n                &lt;/ip&gt;\n              &lt;/address&gt;\n            &lt;/ip&gt;\n            &lt;nameif&gt;outside&lt;/nameif&gt;\n            &lt;security-level&gt;0&lt;/security-level&gt;\n          &lt;/TenGigabitEthernet&gt;\n          &lt;TenGigabitEthernet&gt;\n            &lt;name&gt;0/1&lt;/name&gt;\n            &lt;ip&gt;\n              &lt;address&gt;\n                &lt;ip&gt;\n                  &lt;host-ip&gt;{$SHARED_SUBNET}.1&lt;/host-ip&gt;\n                  &lt;netmask&gt;255.255.255.0&lt;/netmask&gt;\n                &lt;/ip&gt;\n              &lt;/address&gt;\n            &lt;/ip&gt;\n            &lt;nameif&gt;inside&lt;/nameif&gt;\n            &lt;security-level&gt;100&lt;/security-level&gt;\n          &lt;/TenGigabitEthernet&gt;\n        &lt;/interface&gt;\n        &lt;object xmlns=&quot;http://cisco.com/ned/asa&quot;&gt;\n          &lt;network&gt;\n            &lt;name&gt;inside-outside&lt;/name&gt;\n            &lt;subnet&gt;\n              &lt;address&gt;{$SHARED_SUBNET}.0&lt;/address&gt;\n              &lt;mask&gt;255.255.255.0&lt;/mask&gt;\n            &lt;/subnet&gt;\n            &lt;nat&gt;\n              &lt;ifc&gt;(inside,outside)&lt;/ifc&gt;\n              &lt;type&gt;dynamic&lt;/type&gt;\n              &lt;interface/&gt;\n            &lt;/nat&gt;\n          &lt;/network&gt;\n          &lt;network&gt;\n            &lt;name&gt;vip&lt;/name&gt;\n            &lt;host&gt;{$SHARED_SUBNET}.3&lt;/host&gt;\n            &lt;nat&gt;\n              &lt;ifc&gt;(inside,outside)&lt;/ifc&gt;\n              &lt;type&gt;static&lt;/type&gt;\n              &lt;mapped-obj&gt;vip-external-ip&lt;/mapped-obj&gt;\n              &lt;service&gt;\n                  &lt;protocol&gt;tcp&lt;/protocol&gt;\n                  &lt;real-port&gt;www&lt;/real-port&gt;\n                  &lt;mapped-port&gt;www&lt;/mapped-port&gt;\n              &lt;/service&gt;\n            &lt;/nat&gt;\n          &lt;/network&gt;\n          &lt;network&gt;\n            &lt;name&gt;vip-external-ip&lt;/name&gt;\n            &lt;host&gt;{$ASA_OUTSIDE_SUBNET}.3&lt;/host&gt;\n          &lt;/network&gt;\n        &lt;/object&gt;\n        &lt;access-list xmlns=&quot;http://cisco.com/ned/asa&quot;&gt;\n          &lt;access-list-id&gt;\n              &lt;id&gt;outside_acl&lt;/id&gt;\n              &lt;rule&gt;\n                &lt;id&gt;extended permit tcp any object vip eq www&lt;/id&gt;\n              &lt;/rule&gt;\n          &lt;/access-list-id&gt;\n        &lt;/access-list&gt;\n        &lt;access-group xmlns=&quot;http://cisco.com/ned/asa&quot;&gt;\n          &lt;interface-list&gt;\n              &lt;direction&gt;in&lt;/direction&gt;\n              &lt;interface&gt;outside&lt;/interface&gt;\n              &lt;access-list&gt;outside_acl&lt;/access-list&gt;\n          &lt;/interface-list&gt;\n        &lt;/access-group&gt;\n        &lt;route xmlns=&quot;http://cisco.com/ned/asa&quot;&gt;\n          &lt;id&gt;outside&lt;/id&gt;\n          &lt;net&gt;0.0.0.0&lt;/net&gt;\n          &lt;net-mask&gt;0.0.0.0&lt;/net-mask&gt;\n          &lt;gw&gt;{$ASA_OUTSIDE_SUBNET}.1&lt;/gw&gt;\n          &lt;metric&gt;1&lt;/metric&gt;\n        &lt;/route&gt;\n      &lt;/config&gt;\n    &lt;/device&gt;\n&lt;!--AviSE Configuration--&gt;\n    &lt;device&gt;\n      &lt;name&gt;{/avi}&lt;/name&gt;\n      &lt;config&gt;\n        &lt;tenant xmlns=&quot;http://tail-f.com/ned/avi-vantage&quot;&gt;\n          &lt;name&gt;student{$STUDENT_NUMBER}&lt;/name&gt;\n            &lt;pool&gt;\n              &lt;name&gt;s01-HTTP-VirtService-pool&lt;/name&gt;\n              &lt;default_server_port&gt;80&lt;/default_server_port&gt;\n              &lt;graceful_disable_timeout&gt;1&lt;/graceful_disable_timeout&gt;\n              &lt;connection_ramp_duration&gt;10&lt;/connection_ramp_duration&gt;\n              &lt;max_concurrent_connections_per_server&gt;0&lt;/max_concurrent_connections_per_server&gt;\n              &lt;servers&gt;\n                  &lt;ip-type&gt;V4&lt;/ip-type&gt;\n                  &lt;ip-addr&gt;172.4.1.251&lt;/ip-addr&gt;\n                  &lt;hostname&gt;172.4.1.251&lt;/hostname&gt;\n                  &lt;enabled&gt;true&lt;/enabled&gt;\n                  &lt;ratio&gt;1&lt;/ratio&gt;\n              &lt;/servers&gt;\n              &lt;servers&gt;\n                &lt;ip-type&gt;V4&lt;/ip-type&gt;\n                &lt;ip-addr&gt;172.4.1.252&lt;/ip-addr&gt;\n                &lt;hostname&gt;172.4.1.252&lt;/hostname&gt;\n                &lt;enabled&gt;true&lt;/enabled&gt;\n                &lt;ratio&gt;1&lt;/ratio&gt;\n              &lt;/servers&gt;\n              &lt;servers&gt;\n                &lt;ip-type&gt;V4&lt;/ip-type&gt;\n                &lt;ip-addr&gt;172.4.1.253&lt;/ip-addr&gt;\n                &lt;hostname&gt;172.4.1.253&lt;/hostname&gt;\n                &lt;enabled&gt;true&lt;/enabled&gt;\n                &lt;ratio&gt;1&lt;/ratio&gt;\n              &lt;/servers&gt;\n              &lt;inline_health_monitor&gt;true&lt;/inline_health_monitor&gt;\n              &lt;lb_algorithm&gt;LB_ALGORITHM_LEAST_CONNECTIONS&lt;/lb_algorithm&gt;\n              &lt;enabled&gt;true&lt;/enabled&gt;\n              &lt;request_queue_depth&gt;128&lt;/request_queue_depth&gt;\n              &lt;server_reselect&gt;\n                &lt;enabled&gt;false&lt;/enabled&gt;\n                &lt;num_retries&gt;4&lt;/num_retries&gt;\n                &lt;retry_nonidempotent&gt;false&lt;/retry_nonidempotent&gt;\n              &lt;/server_reselect&gt;\n              &lt;fail_action&gt;\n                  &lt;type&gt;FAIL_ACTION_CLOSE_CONN&lt;/type&gt;\n              &lt;/fail_action&gt;\n              &lt;fewest_tasks_feedback_delay&gt;10&lt;/fewest_tasks_feedback_delay&gt;\n            &lt;/pool&gt;\n            &lt;virtualservice&gt;\n              &lt;name&gt;s01-HTTP-VirtService&lt;/name&gt;\n              &lt;pool_ref&gt;/api/pool/?name=s01-HTTP-VirtService-pool&lt;/pool_ref&gt;\n              &lt;ip_address&gt;\n                  &lt;type&gt;V4&lt;/type&gt;\n                  &lt;addr&gt;{$SHARED_SUBNET}.3&lt;/addr&gt;\n              &lt;/ip_address&gt;\n              &lt;enabled&gt;true&lt;/enabled&gt;\n              &lt;type&gt;VS_TYPE_NORMAL&lt;/type&gt;\n              &lt;services&gt;\n                  &lt;port&gt;80&lt;/port&gt;\n                  &lt;enable_ssl&gt;false&lt;/enable_ssl&gt;\n              &lt;/services&gt;\n            &lt;/virtualservice&gt;\n        &lt;serviceengine&gt;\n            &lt;name&gt;10.1.61.{$number_NOzero}3&lt;/name&gt;\n              &lt;data_vnics&gt;\n                &lt;if_name&gt;eth1&lt;/if_name&gt;\n                &lt;vnic_networks&gt;\n                    &lt;mode&gt;STATIC&lt;/mode&gt;\n                    &lt;ip&gt;\n                      &lt;ip_addr&gt;\n                          &lt;type&gt;V4&lt;/type&gt;\n                          &lt;addr&gt;{$SHARED_SUBNET}.2&lt;/addr&gt;\n                      &lt;/ip_addr&gt;\n                      &lt;mask&gt;24&lt;/mask&gt;\n                    &lt;/ip&gt;\n                &lt;/vnic_networks&gt;\n                &lt;vnic_networks&gt;\n                    &lt;mode&gt;VIP&lt;/mode&gt;\n                      &lt;ip&gt;\n                        &lt;ip_addr&gt;\n                            &lt;type&gt;V4&lt;/type&gt;\n                            &lt;addr&gt;{$SHARED_SUBNET}.3&lt;/addr&gt;\n                        &lt;/ip_addr&gt;\n                        &lt;mask&gt;32&lt;/mask&gt;\n                      &lt;/ip&gt;\n                &lt;/vnic_networks&gt;\n              &lt;/data_vnics&gt;\n              &lt;data_vnics&gt;\n                &lt;if_name&gt;eth2&lt;/if_name&gt;\n                &lt;vnic_networks&gt;\n                    &lt;mode&gt;STATIC&lt;/mode&gt;\n                    &lt;ip&gt;\n                      &lt;ip_addr&gt;\n                          &lt;type&gt;V4&lt;/type&gt;\n                          &lt;addr&gt;{$AVI_INSIDE_SUBNET}.1{$STUDENT_NUMBER}&lt;/addr&gt;\n                      &lt;/ip_addr&gt;\n                      &lt;mask&gt;24&lt;/mask&gt;\n                    &lt;/ip&gt;\n                &lt;/vnic_networks&gt;\n              &lt;/data_vnics&gt;\n          &lt;/serviceengine&gt;\n        &lt;/tenant&gt;\n      &lt;/config&gt;\n    &lt;/device&gt;\n  &lt;/devices&gt;\n&lt;/config-template&gt;\n</pre>",
                        "path": "ecommerce-service-model-config-files"
                    },
                    {
                        "name": "Student NSO Configurations",
                        "id": "705757876249",
                        "data": "<h2>student01</h2><h3>cspOnboard</h3><pre>services cspOnboard s01-ServiceChain\nsae-csp2\n1\nvnf-onboard s01-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.12\nmgmt-port       22\nvnf-authgroup   s01-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      201\nvnic2-pnic      enp129s0f0\nvnic2-vlan      301\n\nvnf-onboard s01-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s01-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      301\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s01-eCommerce student-number 1 asa-outside-subnet 172.2.1.0/24 shared-subnet 172.3.1.0/24 avi-inside-subnet 172.4.1.0/24 asa s01-ASA avi s01-AviSE\n</pre><h2>student02</h2><h3>cspOnboard</h3><pre>services cspOnboard s02-ServiceChain\nsae-csp2\n2\nvnf-onboard s02-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.22\nmgmt-port       22\nvnf-authgroup   s02-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      202\nvnic2-pnic      enp129s0f0\nvnic2-vlan      302\n\nvnf-onboard s02-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s02-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      302\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s02-eCommerce student-number 2 asa-outside-subnet 172.2.2.0/24 shared-subnet 172.3.2.0/24 avi-inside-subnet 172.4.1.0/24 asa s02-ASA avi s02-AviSE\n</pre><h2>student03</h2><h3>cspOnboard</h3><pre>services cspOnboard s03-ServiceChain\nsae-csp2\n3\nvnf-onboard s03-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.32\nmgmt-port       22\nvnf-authgroup   s03-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      203\nvnic2-pnic      enp129s0f0\nvnic2-vlan      303\n\nvnf-onboard s03-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s03-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      303\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s03-eCommerce student-number 3 asa-outside-subnet 172.2.3.0/24 shared-subnet 172.3.3.0/24 avi-inside-subnet 172.4.1.0/24 asa s03-ASA avi s03-AviSE\n</pre><h2>student04</h2><h3>cspOnboard</h3><pre>services cspOnboard s04-ServiceChain\nsae-csp2\n4\nvnf-onboard s04-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.42\nmgmt-port       22\nvnf-authgroup   s04-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      204\nvnic2-pnic      enp129s0f0\nvnic2-vlan      304\n\nvnf-onboard s04-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s04-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      304\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s04-eCommerce student-number 4 asa-outside-subnet 172.2.4.0/24 shared-subnet 172.3.4.0/24 avi-inside-subnet 172.4.1.0/24 asa s04-ASA avi s04-AviSE\n</pre><h2>student05</h2><h3>cspOnboard</h3><pre>services cspOnboard s05-ServiceChain\nsae-csp2\n5\nvnf-onboard s05-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.52\nmgmt-port       22\nvnf-authgroup   s05-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      205\nvnic2-pnic      enp129s0f0\nvnic2-vlan      305\n\nvnf-onboard s05-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s05-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      305\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s05-eCommerce student-number 5 asa-outside-subnet 172.2.5.0/24 shared-subnet 172.3.5.0/24 avi-inside-subnet 172.4.1.0/24 asa s05-ASA avi s05-AviSE\n</pre><h2>student06</h2><h3>cspOnboard</h3><pre>services cspOnboard s06-ServiceChain\nsae-csp2\n6\nvnf-onboard s06-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.62\nmgmt-port       22\nvnf-authgroup   s06-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      206\nvnic2-pnic      enp129s0f0\nvnic2-vlan      306\n\nvnf-onboard s06-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s06-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      306\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s06-eCommerce student-number 6 asa-outside-subnet 172.2.6.0/24 shared-subnet 172.3.6.0/24 avi-inside-subnet 172.4.1.0/24 asa s06-ASA avi s06-AviSE\n</pre><h2>student07</h2><h3>cspOnboard</h3><pre>services cspOnboard s07-ServiceChain\nsae-csp2\n7\nvnf-onboard s07-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.72\nmgmt-port       22\nvnf-authgroup   s07-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      207\nvnic2-pnic      enp129s0f0\nvnic2-vlan      307\n\nvnf-onboard s07-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s07-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      307\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s07-eCommerce student-number 7 asa-outside-subnet 172.2.7.0/24 shared-subnet 172.3.7.0/24 avi-inside-subnet 172.4.1.0/24 asa s07-ASA avi s07-AviSE\n</pre><h2>student08</h2><h3>cspOnboard</h3><pre>services cspOnboard s08-ServiceChain\nsae-csp2\n8\nvnf-onboard s08-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.82\nmgmt-port       22\nvnf-authgroup   s08-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      208\nvnic2-pnic      enp129s0f0\nvnic2-vlan      308\n\nvnf-onboard s08-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s08-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      308\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s08-eCommerce student-number 8 asa-outside-subnet 172.2.8.0/24 shared-subnet 172.3.8.0/24 avi-inside-subnet 172.4.1.0/24 asa s08-ASA avi s08-AviSE\n</pre><h2>student09</h2><h3>cspOnboard</h3><pre>services cspOnboard s09-ServiceChain\nsae-csp2\n9\nvnf-onboard s09-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.92\nmgmt-port       22\nvnf-authgroup   s09-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      209\nvnic2-pnic      enp129s0f0\nvnic2-vlan      309\n\nvnf-onboard s09-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s09-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      309\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s09-eCommerce student-number 9 asa-outside-subnet 172.2.9.0/24 shared-subnet 172.3.9.0/24 avi-inside-subnet 172.4.1.0/24 asa s09-ASA avi s09-AviSE\n</pre><h2>student10</h2><h3>cspOnboard</h3><pre>services cspOnboard s10-ServiceChain\nsae-csp2\n10\nvnf-onboard s10-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.102\nmgmt-port       22\nvnf-authgroup   s10-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      210\nvnic2-pnic      enp129s0f0\nvnic2-vlan      310\n\nvnf-onboard s10-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s10-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      310\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s10-eCommerce student-number 10 asa-outside-subnet 172.2.10.0/24 shared-subnet 172.3.10.0/24 avi-inside-subnet 172.4.1.0/24 asa s10-ASA avi s10-AviSE\n</pre><h2>student11</h2><h3>cspOnboard</h3><pre>services cspOnboard s11-ServiceChain\nsae-csp3\n11\nvnf-onboard s11-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.112\nmgmt-port       22\nvnf-authgroup   s11-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      211\nvnic2-pnic      enp129s0f0\nvnic2-vlan      311\n\nvnf-onboard s11-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s11-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      311\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s11-eCommerce student-number 11 asa-outside-subnet 172.2.11.0/24 shared-subnet 172.3.11.0/24 avi-inside-subnet 172.4.1.0/24 asa s11-ASA avi s11-AviSE\n</pre><h2>student12</h2><h3>cspOnboard</h3><pre>services cspOnboard s12-ServiceChain\nsae-csp3\n12\nvnf-onboard s12-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.122\nmgmt-port       22\nvnf-authgroup   s12-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      212\nvnic2-pnic      enp129s0f0\nvnic2-vlan      312\n\nvnf-onboard s12-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s12-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      312\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s12-eCommerce student-number 12 asa-outside-subnet 172.2.12.0/24 shared-subnet 172.3.12.0/24 avi-inside-subnet 172.4.1.0/24 asa s12-ASA avi s12-AviSE\n</pre><h2>student13</h2><h3>cspOnboard</h3><pre>services cspOnboard s13-ServiceChain\nsae-csp3\n13\nvnf-onboard s13-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.132\nmgmt-port       22\nvnf-authgroup   s13-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      213\nvnic2-pnic      enp129s0f0\nvnic2-vlan      313\n\nvnf-onboard s13-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s13-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      313\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s13-eCommerce student-number 13 asa-outside-subnet 172.2.13.0/24 shared-subnet 172.3.13.0/24 avi-inside-subnet 172.4.1.0/24 asa s13-ASA avi s13-AviSE\n</pre><h2>student14</h2><h3>cspOnboard</h3><pre>services cspOnboard s14-ServiceChain\nsae-csp3\n14\nvnf-onboard s14-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.142\nmgmt-port       22\nvnf-authgroup   s14-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      214\nvnic2-pnic      enp129s0f0\nvnic2-vlan      314\n\nvnf-onboard s14-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s14-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      314\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s14-eCommerce student-number 14 asa-outside-subnet 172.2.14.0/24 shared-subnet 172.3.14.0/24 avi-inside-subnet 172.4.1.0/24 asa s14-ASA avi s14-AviSE\n</pre><h2>student15</h2><h3>cspOnboard</h3><pre>services cspOnboard s15-ServiceChain\nsae-csp3\n15\nvnf-onboard s15-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.152\nmgmt-port       22\nvnf-authgroup   s15-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      215\nvnic2-pnic      enp129s0f0\nvnic2-vlan      315\n\nvnf-onboard s15-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s15-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      315\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s15-eCommerce student-number 15 asa-outside-subnet 172.2.15.0/24 shared-subnet 172.3.15.0/24 avi-inside-subnet 172.4.1.0/24 asa s15-ASA avi s15-AviSE\n</pre><h2>student16</h2><h3>cspOnboard</h3><pre>services cspOnboard s16-ServiceChain\nsae-csp3\n16\nvnf-onboard s16-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.162\nmgmt-port       22\nvnf-authgroup   s16-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      216\nvnic2-pnic      enp129s0f0\nvnic2-vlan      316\n\nvnf-onboard s16-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s16-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      316\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s16-eCommerce student-number 16 asa-outside-subnet 172.2.16.0/24 shared-subnet 172.3.16.0/24 avi-inside-subnet 172.4.1.0/24 asa s16-ASA avi s16-AviSE\n</pre><h2>student17</h2><h3>cspOnboard</h3><pre>services cspOnboard s17-ServiceChain\nsae-csp3\n17\nvnf-onboard s17-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.172\nmgmt-port       22\nvnf-authgroup   s17-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      217\nvnic2-pnic      enp129s0f0\nvnic2-vlan      317\n\nvnf-onboard s17-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s17-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      317\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s17-eCommerce student-number 17 asa-outside-subnet 172.2.17.0/24 shared-subnet 172.3.17.0/24 avi-inside-subnet 172.4.1.0/24 asa s17-ASA avi s17-AviSE\n</pre><h2>student18</h2><h3>cspOnboard</h3><pre>services cspOnboard s18-ServiceChain\nsae-csp3\n18\nvnf-onboard s18-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.182\nmgmt-port       22\nvnf-authgroup   s18-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      218\nvnic2-pnic      enp129s0f0\nvnic2-vlan      318\n\nvnf-onboard s18-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s18-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      318\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s18-eCommerce student-number 18 asa-outside-subnet 172.2.18.0/24 shared-subnet 172.3.18.0/24 avi-inside-subnet 172.4.1.0/24 asa s18-ASA avi s18-AviSE\n</pre><h2>student19</h2><h3>cspOnboard</h3><pre>services cspOnboard s19-ServiceChain\nsae-csp3\n19\nvnf-onboard s19-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.192\nmgmt-port       22\nvnf-authgroup   s19-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      219\nvnic2-pnic      enp129s0f0\nvnic2-vlan      319\n\nvnf-onboard s19-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s19-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      319\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s19-eCommerce student-number 19 asa-outside-subnet 172.2.19.0/24 shared-subnet 172.3.19.0/24 avi-inside-subnet 172.4.1.0/24 asa s19-ASA avi s19-AviSE\n</pre><h2>student20</h2><h3>cspOnboard</h3><pre>services cspOnboard s20-ServiceChain\nsae-csp3\n20\nvnf-onboard s20-ASA\nasa\nasa_9.8.2\nmgmt-ip-address 10.1.61.202\nmgmt-port       22\nvnf-authgroup   s20-authgroup\nday0-type       MgmtOnly\nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      220\nvnic2-pnic      enp129s0f0\nvnic2-vlan      320\n\nvnf-onboard s20-AviSE\navi\navise_sae_16.5.3\nmgmt-ip-address 10.1.60.51\nmgmt-port       443\nvnf-authgroup   s20-authgroup\nday0-type       MgmtOnly  \nnfs-name        SAE-NFS\nvnic1-pnic      enp129s0f0\nvnic1-vlan      320\nvnic2-pnic      enp129s0f0\nvnic2-vlan      401\n</pre><h3>eCommerce</h3><pre>ecommerce s20-eCommerce student-number 20 asa-outside-subnet 172.2.20.0/24 shared-subnet 172.3.20.0/24 avi-inside-subnet 172.4.1.0/24 asa s20-ASA avi s20-AviSE\n</pre>",
                        "path": "student-nso-configurations"
                    }
                ]
            }
        ],
        "buttons": [
            {
                "name": "Session Information",
                "id": "632680007670",
                "data": "<h2>Session Information</h2><div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>Name</th><th>Title</th><th>Contact</th></tr><tr><td>Andrew Horrigan</td><td>Network Consulting Information</td><td>anhorrig@cisco.com</td></tr><tr><td>Rebecca Zhu</td><td>Technical Leader Services</td><td>rzhu@cisco.com</td></tr><tr><td>Matthew Wronkowski</td><td>Technical Leader Services</td><td>mwronkow@cisco.com</td></tr></tbody></table></div><p class=\"text-center\"><img style=\"width: 50%; height: 50%\" src=\"/images/SVS_Logo.png\" /></p>",
                "description": "Session Information",
                "selector": "session-information",
                "icon": "info"
            },
            {
                "name": "Connection Information",
                "id": "165438012173",
                "data": "<h3>Infrastructure Addresses</h3><p>&nbsp;</p><div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>Device</th><th>IP Address</th><th>Credentials</th></tr><tr><td><a href=\"http://{{student-csp1-ip}}\">{{student-csp1}}</a></td><td>{{student-csp1-ip}}</td><td>student/Cisc#123</td></tr><tr><td><a href=\"http://{{student-csp2-ip}}\">{{student-csp2}}</a></td><td>{{student-csp2-ip}}</td><td>student/Cisc#123</td></tr><tr><td><a href=\"http://10.1.60.56\">Avi Controller</a></td><td>10.1.60.51</td><td>{{student-name}}/Cisc#123</td></tr><tr><td><a href=\"http://10.1.60.31\">Network Services Orchestrator</a></td><td>10.1.60.31</td><td>admin/admin</td></tr><tr><td>SAE-Client</td><td>10.1.60.36</td><td>student/Cisc#123</td></tr></tbody></table></div><p>&nbsp;</p><h3>VNF Addresses</h3><p>&nbsp;</p><div class=\"table-responsive\"><table class=\"table table--bordered\"><tbody><tr><th>Device</th><th>IP Address</th><th>Credentials</th></tr><tr><td>{{student-abbrev}}-vEdge</td><td>10.1.61.{{number-NOzero}}1</td><td>admin/admin</td></tr><tr><td>{{student-abbrev}}-ASA</td><td>10.1.61.{{number-NOzero}}2</td><td>admin/Cisc#123</td></tr><tr><td>{{student-abbrev}}-AviSE</td><td>10.1.61.{{number-NOzero}}3</td><td>N/A</td></tr></tbody></table></div><p>&nbsp;</p>",
                "description": "Connection Information",
                "selector": "connection-information",
                "icon": "ethernet"
            },
            {
                "name": "Topology",
                "id": "677407439225",
                "data": "<h3>Physical Topology</h3><p class=\"text-center\"><img style=\"width: 80%; height: 80%\" src=\"/uploads/68fc18eb-ec90-e01b-600f-b7607c12044f.png\" /></p><h3>Branch Topology</h3><p class=\"text-center\"><img style=\"width: 80%; height: 80%\" src=\"/uploads/3ddd9c7b-9d7e-2ac2-174e-8f165768e3e4.png\" /></p><h3>SAE Topology</h3><p class=\"text-center\"><img src=\"/uploads/88a69fb4-3284-b091-7ff0-065aadc007be.png\" /></p>",
                "description": "Topology",
                "selector": "topology",
                "icon": "devices"
            }
        ]
    },
    (err, course) => {
        if (err) {
            console.log(err);
        }
        console.log(course);

        process.exit(0);
    }
);